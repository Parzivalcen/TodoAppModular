(()=>{"use strict";var n={2:(n,e,t)=>{t.d(e,{Z:()=>g});var a=t(537),i=t.n(a),r=t(645),o=t.n(r),A=t(667),s=t.n(A),d=new URL(t(935),t.b),l=new URL(t(921),t.b),c=new URL(t(818),t.b),u=o()(i());u.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap);"]);var p=s()(d),C=s()(l),m=s()(c);u.push([n.id,'*,*::after,*::before{margin:0;padding:0;box-sizing:border-box}body,h1,h2,h3,h4 p,figure,picture{margin:0}h1,h2,h3,h4,h5{text-transform:capitalize;font-weight:400}a,li{text-decoration:none;list-style:none}body{line-height:1.5;min-height:100vh;font-family:"Roboto",sans-serif;grid-template-rows:-webkit-min-content 1fr;grid-template-rows:min-content 1fr;overflow-x:hidden}img,picture{max-width:100%;display:block}input,button,textarea,select{font:inherit;-webkit-appearance:none;appearance:none}input:focus{outline:none;appearance:none}@media(prefers-reduced-motion: reduce){*,*::before,*::after{-webkit-animation-duration:.01ms !important;animation-duration:.01ms !important;-webkit-animation-iteration-count:1 !important;animation-iteration-count:1 !important;transition-duration:.01sms !important;scroll-behavior:auto !important}}.hidden{display:none}.inline{display:inline-block}.flex{display:flex;gap:var(--gap, 1rem)}.grid{display:grid;gap:var(--gap, 1rem)}.d-block{display:block}.container{padding-inline:0rem;margin-inline:auto;max-width:inherit}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border:0}@media screen and (min-width: 0px){.container--footer{display:flex;justify-content:space-around;align-items:center;min-height:10vh;background-color:#f3d2c1;color:#27355c;border-top:1px solid #f582ae;box-shadow:0px -8px 10px -8px rgba(78,51,75,.3)}.container--footer .social-icons{display:flex}.container--footer .social-icons .instagram,.container--footer .social-icons .twitter{background:rgba(0,0,0,0);background-color:rgba(0,23,88,.9);-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;cursor:pointer;width:5vh;height:5vh}.container--footer .social-icons .instagram{-webkit-mask-image:url('+p+");mask-image:url("+p+")}.container--footer .social-icons .twitter{-webkit-mask-image:url("+C+");mask-image:url("+C+")}.container--footer a{text-decoration:none;color:rgba(0,23,88,.9)}.container--footer .gitHub{background:rgba(0,0,0,0);background-color:rgba(0,23,88,.9);-webkit-mask-image:url("+m+");mask-image:url("+m+");-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;cursor:pointer;width:4vh;height:4vh}}","",{version:3,sources:["webpack://./src/styles/_custom.scss","webpack://./src/styles/sassModules/_footer.scss"],names:[],mappings:"AA8BA,qBAGE,QAAA,CACA,SAAA,CACA,qBAAA,CAGF,kCAOE,QAAA,CAGF,eAKE,yBAAA,CACA,eAAA,CAGF,KAEE,oBAAA,CACA,eAAA,CAGF,KACE,eAAA,CACA,gBAAA,CACA,+BAAA,CAEA,0CAAA,CACA,kCAAA,CACA,iBAAA,CAIF,YAEE,cAAA,CACA,aAAA,CAIF,6BAIE,YAAA,CACA,uBAAA,CACA,eAAA,CAGF,YACE,YAAA,CACA,eAAA,CAKF,uCAEE,qBAGE,2CAAA,CACA,mCAAA,CACA,8CAAA,CACA,sCAAA,CACA,qCAAA,CACA,+BAAA,CAAA,CAOJ,QACE,YAAA,CAGF,QACE,oBAAA,CAGF,MACE,YAAA,CACA,oBAAA,CAGF,MACE,YAAA,CACA,oBAAA,CAGF,SACE,aAAA,CASF,WACE,mBAAA,CACA,kBAAA,CACA,iBAAA,CAIF,SACE,iBAAA,CACA,SAAA,CACA,UAAA,CACA,SAAA,CACA,WAAA,CACA,eAAA,CACA,qBAAA,CACA,kBAAA,CAEA,QAAA,CC9JF,mCACE,mBACE,YAAA,CACA,4BAAA,CACA,kBAAA,CACA,eAAA,CACA,wBDNiB,CCOjB,aDDW,CCEX,4BAAA,CACA,+CAAA,CAGA,iCACE,YAAA,CACA,sFACE,wBAAA,CACA,iCDRc,CCSd,6BAAA,CACA,qBAAA,CACA,cAAA,CACA,SAAA,CACA,UAAA,CAGF,4CACE,0DAAA,CACA,kDAAA,CAEF,0CACE,0DAAA,CACA,kDAAA,CAIJ,qBACE,oBAAA,CACA,sBD5BgB,CC+BlB,2BACI,wBAAA,CACA,iCDjCc,CCkCd,0DAAA,CACA,kDAAA,CACA,6BAAA,CACA,qBAAA,CACA,cAAA,CACA,SAAA,CACA,UAAA,CAAA",sourcesContent:['// Variables\n$primary-background: #f3d2c1;\n$primary-background-opacity: rgba(243, 210, 193, 0.9);\n$primary-background-light: #FFE6D9;\n$primary-background-light-opacity: rgba(255, 230, 217, 0.9);\n$font-title-color: #001858;\n$font-title-grey: #343F5E;\n$font-p-color: #27355C;\n$font-p-color-light: #e6dfd0;\n$font-title-bg-color: rgba(0, 23, 88, 0.9);\n$secondary-background: #fef6e4;\n$secondary-background-dark: #F5EDDC;\n$secondary-background-dark-opacity: rgba(245, 237, 220, 0.9);\n\n$high-ligh-icon: #f582ae;\n$red: #F96961;\n\n$letter-spacing: 0.01em;\n\n\n\n\n/* FONT FAMILY */\n@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap");\n/*\n=============== \nGlobal Styles/ Reset\n===============\n*/\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody,\nh1,\nh2,\nh3,\nh4 p,\nfigure,\npicture {\n  margin: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  text-transform: capitalize;\n  font-weight: 400;\n}\n\na,\nli {\n  text-decoration: none;\n  list-style: none;\n}\n\nbody {\n  line-height: 1.5;\n  min-height: 100vh;\n  font-family: "Roboto", sans-serif;\n\n  grid-template-rows: -webkit-min-content 1fr;\n  grid-template-rows: min-content 1fr;\n  overflow-x: hidden;\n}\n\n/* imgs easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* form elements easier to work with */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n  -webkit-appearance: none;\n  appearance: none;\n  \n}\ninput:focus{\n  outline: none;\n  appearance: none;\n}\n\n\n/* remove animation for people who turned them off */\n@media (prefers-reduced-motion: reduce) {\n\n  *,\n  *::before,\n  *::after {\n    -webkit-animation-duration: 0.01ms !important;\n    animation-duration: 0.01ms !important;\n    -webkit-animation-iteration-count: 1 !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01sms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n/* =========\nutility clases \n=========== */\n.hidden {\n  display: none;\n}\n\n.inline {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n  gap: var(--gap, 1rem);\n}\n\n.grid {\n  display: grid;\n  gap: var(--gap, 1rem);\n}\n\n.d-block {\n  display: block;\n}\n\n\n/* SPACING .flow */\n/* Seclect all the elements of a divider except the first Child */\n/* It is use to make the top and botton line heights and borders the same */\n/* Where is a way to group things, is lower on specificy so we dont overwrite things*/\n\n.container {\n  padding-inline: 0rem;\n  margin-inline: auto;\n  max-width: inherit;\n}\n\n/* for the visually impaired -Hide Contten- */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  /* added line */\n  border: 0;\n}\n\n',"@use '../custom' as *;\n@media screen and (min-width: 0px) {\n  .container--footer{\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    min-height: 10vh;\n    background-color: $primary-background;\n    color: $font-p-color;\n    border-top: 1px solid $high-ligh-icon;\n    box-shadow: 0px -8px 10px -8px rgba(78, 51, 75, 0.3);\n\n    /*SOCIAL ICONS*/ \n    .social-icons{\n      display: flex;\n      .instagram, .twitter{\n        background: transparent;\n        background-color: $font-title-bg-color;\n        -webkit-mask-repeat: no-repeat;\n        mask-repeat: no-repeat;\n        cursor: pointer;\n        width: 5vh;\n        height: 5vh;\n     \n      }\n      .instagram{\n        -webkit-mask-image: url(../../imgs/instagram.svg) ;\n        mask-image: url(../../imgs/instagram.svg) ;\n      }\n      .twitter{\n        -webkit-mask-image: url(../../imgs/twitter.svg) ;\n        mask-image: url(../../imgs/twitter.svg) ;\n    \n      }\n    }\n    a {\n      text-decoration: none;\n      color: $font-title-bg-color;\n    }\n\n    .gitHub{\n        background: transparent;\n        background-color: $font-title-bg-color;\n        -webkit-mask-image: url(../../imgs/github.svg) ;\n        mask-image: url(../../imgs/github.svg) ;\n        -webkit-mask-repeat: no-repeat;\n        mask-repeat: no-repeat;\n        cursor: pointer;\n        width: 4vh;\n        height: 4vh;\n      }\n    \n    \n  }\n  \n}"],sourceRoot:""}]);const g=u},17:(n,e,t)=>{t.d(e,{Z:()=>v});var a=t(537),i=t.n(a),r=t(645),o=t.n(r),A=t(667),s=t.n(A),d=new URL(t(867),t.b),l=new URL(t(96),t.b),c=new URL(t(155),t.b),u=new URL(t(649),t.b),p=new URL(t(251),t.b),C=o()(i());C.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap);"]);var m=s()(d),g=s()(l),h=s()(c),b=s()(u),f=s()(p);C.push([n.id,'*,*::after,*::before{margin:0;padding:0;box-sizing:border-box}body,h1,h2,h3,h4 p,figure,picture{margin:0}h1,h2,h3,h4,h5{text-transform:capitalize;font-weight:400}a,li{text-decoration:none;list-style:none}body{line-height:1.5;min-height:100vh;font-family:"Roboto",sans-serif;grid-template-rows:-webkit-min-content 1fr;grid-template-rows:min-content 1fr;overflow-x:hidden}img,picture{max-width:100%;display:block}input,button,textarea,select{font:inherit;-webkit-appearance:none;appearance:none}input:focus{outline:none;appearance:none}@media(prefers-reduced-motion: reduce){*,*::before,*::after{-webkit-animation-duration:.01ms !important;animation-duration:.01ms !important;-webkit-animation-iteration-count:1 !important;animation-iteration-count:1 !important;transition-duration:.01sms !important;scroll-behavior:auto !important}}.hidden{display:none}.inline{display:inline-block}.flex{display:flex;gap:var(--gap, 1rem)}.grid{display:grid;gap:var(--gap, 1rem)}.d-block{display:block}.container{padding-inline:0rem;margin-inline:auto;max-width:inherit}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border:0}@media screen and (min-width: 0px){.container-hero{background-color:#f3d2c1;background-image:url('+m+");background-repeat:no-repeat;background-size:cover;height:90vh;display:grid;place-items:center}.blur-document{filter:blur(20px)}}@media screen and (min-width: 0px){.mobile-toggle{display:block;background-color:rgba(0,23,88,.9);-webkit-mask-image:url("+g+");mask-image:url("+g+");-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;position:absolute;width:2rem;height:2rem;left:1rem;margin-top:1rem;border:0;z-index:1000;cursor:pointer}.mobile-toggle[aria-expanded=true]{background-color:#f96961;-webkit-mask-image:url("+h+");mask-image:url("+h+")}.categories-navigation{position:fixed;flex-direction:column;align-content:center;inset:0 20% 0 0;z-index:999;padding-top:8vh;padding-left:8vh;background-color:rgba(0,23,88,.9);transform:translateX(-100%);transition:.4s ease-in-out;backdrop-filter:blur(8px);color:#f5eddc;max-height:90vh}.categories-navigation .categories-title{display:grid;align-items:center;grid-template-columns:1fr 1fr;gap:.5rem}.categories-navigation .categories-title .add-categories{background-color:#f582ae;-webkit-mask-image:url("+b+");mask-image:url("+b+");-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;width:1.5rem;height:1.5rem;border:0;z-index:1000;cursor:pointer}.categories-navigation .category:hover{cursor:pointer}.categories-navigation .category .category--title{text-transform:capitalize}.categories-navigation .category div{display:grid;gap:.4em;grid-template-columns:1fr 1fr;align-items:center}.categories-navigation .category div .delete-category{width:1rem;height:1rem;background-color:#f96961;-webkit-mask-image:url("+f+");mask-image:url("+f+");-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;border:0;cursor:pointer}.categories-navigation[data-visible=true]{transform:translateX(0%)}.add-project-popUp{display:none;box-shadow:-1px 0px 3px 4px rgba(0,0,0,.36);background-color:#f3d2c1;max-width:40vh;text-align:center;border-radius:10px;padding-top:2rem;padding-inline:2rem;position:absolute;top:20%;left:50%;z-index:1005;transform:translate(-50%, 20%);color:#27355c;letter-spacing:.01em}.add-project-popUp input,.add-project-popUp button{border-radius:10px;border:none}.add-project-popUp input{padding-inline:1rem;margin-inline:auto;width:30vh}.add-project-popUp .btns-popUp{margin-top:1rem;margin-bottom:.5rem;display:flex;justify-content:space-around}.add-project-popUp .btns-popUp *{background:rgba(0,0,0,0)}.add-project-popUp .btns-popUp .add-project-btn{color:rgba(0,23,88,.9);letter-spacing:.01em;cursor:pointer}.add-project-popUp .btns-popUp .cancel-project-btn{color:#f96961;text-shadow:1px .4px rgba(0,23,88,.9);letter-spacing:.01em;cursor:pointer}.add-project-popUp[project-pop-visible=true]{display:grid}}@media screen and (min-width: 900px){.categories-navigation{transform:translateX(0%);inset:0 70% 0 0;box-shadow:11px 3px 3px -8px rgba(0,0,0,.5)}.mobile-toggle{display:none}}@media screen and (min-width: 1200px){.categories-navigation{inset:0 75% 0 0}}@media screen and (min-width: 1600px){.categories-navigation{inset:0 80% 0 0}}@media screen and (max-height: 596px){.add-project-popUp{max-width:90vh}}","",{version:3,sources:["webpack://./src/styles/_custom.scss","webpack://./src/styles/sassModules/_home.scss"],names:[],mappings:"AA8BA,qBAGE,QAAA,CACA,SAAA,CACA,qBAAA,CAGF,kCAOE,QAAA,CAGF,eAKE,yBAAA,CACA,eAAA,CAGF,KAEE,oBAAA,CACA,eAAA,CAGF,KACE,eAAA,CACA,gBAAA,CACA,+BAAA,CAEA,0CAAA,CACA,kCAAA,CACA,iBAAA,CAIF,YAEE,cAAA,CACA,aAAA,CAIF,6BAIE,YAAA,CACA,uBAAA,CACA,eAAA,CAGF,YACE,YAAA,CACA,eAAA,CAKF,uCAEE,qBAGE,2CAAA,CACA,mCAAA,CACA,8CAAA,CACA,sCAAA,CACA,qCAAA,CACA,+BAAA,CAAA,CAOJ,QACE,YAAA,CAGF,QACE,oBAAA,CAGF,MACE,YAAA,CACA,oBAAA,CAGF,MACE,YAAA,CACA,oBAAA,CAGF,SACE,aAAA,CASF,WACE,mBAAA,CACA,kBAAA,CACA,iBAAA,CAIF,SACE,iBAAA,CACA,SAAA,CACA,UAAA,CACA,SAAA,CACA,WAAA,CACA,eAAA,CACA,qBAAA,CACA,kBAAA,CAEA,QAAA,CC1JF,mCACE,gBACE,wBDNiB,CCOjB,wDAAA,CACA,2BAAA,CACA,qBAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CAGF,eACE,iBAAA,CAAA,CAMJ,mCACE,eACE,aAAA,CAEA,iCDlBkB,CCmBlB,0DAAA,CACA,kDAAA,CACA,6BAAA,CACA,qBAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,SAAA,CACA,eAAA,CACA,QAAA,CACA,YAAA,CACA,cAAA,CAEA,mCACE,wBD3BA,CC4BA,0DAAA,CACA,kDAAA,CAIJ,uBACE,cAAA,CACA,qBAAA,CACA,oBAAA,CACA,eAAA,CACA,WAAA,CACA,eAAA,CACA,gBAAA,CACA,iCD/CkB,CCgDlB,2BAAA,CACA,0BAAA,CAEA,yBAAA,CACA,aDlDwB,CCmDxB,eAAA,CAGA,yCACE,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,SAAA,CAEA,yDACE,wBD1DS,CC2DT,0DAAA,CACA,kDAAA,CACA,6BAAA,CACA,qBAAA,CACA,YAAA,CACA,aAAA,CACA,QAAA,CACA,YAAA,CACA,cAAA,CAKF,uCACE,cAAA,CAGF,kDACE,yBAAA,CAEF,qCACE,YAAA,CACA,QAAA,CACA,6BAAA,CACA,kBAAA,CAEA,sDACE,UAAA,CACA,WAAA,CACA,wBDvFJ,CCwFI,0DAAA,CACA,kDAAA,CACA,6BAAA,CACA,qBAAA,CACA,QAAA,CACA,cAAA,CAQN,0CACE,wBAAA,CAOJ,mBACE,YAAA,CACA,2CAAA,CACA,wBD9HiB,CC+HjB,cAAA,CACA,iBAAA,CACA,kBAAA,CACA,gBAAA,CACA,mBAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,YAAA,CACA,8BAAA,CAEA,aDpIW,CCqIX,oBD3Ha,CC6Hb,mDACE,kBAAA,CACA,WAAA,CAEF,yBACE,mBAAA,CACA,kBAAA,CACA,UAAA,CAGF,+BACE,eAAA,CACA,mBAAA,CACA,YAAA,CACA,4BAAA,CACA,iCACE,wBAAA,CAEF,gDACE,sBDxJc,CCyJd,oBDjJS,CCkJT,cAAA,CAEF,mDACE,aDvJF,CCwJE,qCAAA,CACA,oBDvJS,CCwJT,cAAA,CAKJ,6CACE,YAAA,CAAA,CAMN,qCACE,uBACE,wBAAA,CACA,eAAA,CACA,2CAAA,CAGF,eACE,YAAA,CAAA,CAKJ,sCACE,uBACE,eAAA,CAAA,CAGJ,sCACE,uBACE,eAAA,CAAA,CAGJ,sCACE,mBACE,cAAA,CAAA",sourcesContent:['// Variables\n$primary-background: #f3d2c1;\n$primary-background-opacity: rgba(243, 210, 193, 0.9);\n$primary-background-light: #FFE6D9;\n$primary-background-light-opacity: rgba(255, 230, 217, 0.9);\n$font-title-color: #001858;\n$font-title-grey: #343F5E;\n$font-p-color: #27355C;\n$font-p-color-light: #e6dfd0;\n$font-title-bg-color: rgba(0, 23, 88, 0.9);\n$secondary-background: #fef6e4;\n$secondary-background-dark: #F5EDDC;\n$secondary-background-dark-opacity: rgba(245, 237, 220, 0.9);\n\n$high-ligh-icon: #f582ae;\n$red: #F96961;\n\n$letter-spacing: 0.01em;\n\n\n\n\n/* FONT FAMILY */\n@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap");\n/*\n=============== \nGlobal Styles/ Reset\n===============\n*/\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody,\nh1,\nh2,\nh3,\nh4 p,\nfigure,\npicture {\n  margin: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  text-transform: capitalize;\n  font-weight: 400;\n}\n\na,\nli {\n  text-decoration: none;\n  list-style: none;\n}\n\nbody {\n  line-height: 1.5;\n  min-height: 100vh;\n  font-family: "Roboto", sans-serif;\n\n  grid-template-rows: -webkit-min-content 1fr;\n  grid-template-rows: min-content 1fr;\n  overflow-x: hidden;\n}\n\n/* imgs easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* form elements easier to work with */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n  -webkit-appearance: none;\n  appearance: none;\n  \n}\ninput:focus{\n  outline: none;\n  appearance: none;\n}\n\n\n/* remove animation for people who turned them off */\n@media (prefers-reduced-motion: reduce) {\n\n  *,\n  *::before,\n  *::after {\n    -webkit-animation-duration: 0.01ms !important;\n    animation-duration: 0.01ms !important;\n    -webkit-animation-iteration-count: 1 !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01sms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n/* =========\nutility clases \n=========== */\n.hidden {\n  display: none;\n}\n\n.inline {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n  gap: var(--gap, 1rem);\n}\n\n.grid {\n  display: grid;\n  gap: var(--gap, 1rem);\n}\n\n.d-block {\n  display: block;\n}\n\n\n/* SPACING .flow */\n/* Seclect all the elements of a divider except the first Child */\n/* It is use to make the top and botton line heights and borders the same */\n/* Where is a way to group things, is lower on specificy so we dont overwrite things*/\n\n.container {\n  padding-inline: 0rem;\n  margin-inline: auto;\n  max-width: inherit;\n}\n\n/* for the visually impaired -Hide Contten- */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  /* added line */\n  border: 0;\n}\n\n','@use \'../custom\' as *;\n\n/* -------------\nTODO Hero/home\n-------------- */\n@media screen and (min-width: 0px) {\n  .container-hero{\n    background-color: $primary-background;\n    background-image: url(../../imgs/bg-desktop-pink.jpg);\n    background-repeat: no-repeat;\n    background-size: cover;\n    height: 90vh;\n    display: grid;\n    place-items: center;\n  }\n  /* BLUR */\n  .blur-document{\n    filter: blur(20px);\n  }\n}\n\n\n\n@media screen and (min-width: 0px) {\n  .mobile-toggle{\n    display: block;\n    /* Change Icon color */\n    background-color: $font-title-bg-color;\n    -webkit-mask-image: url(../../imgs/hamMenu.svg) ;\n    mask-image: url(../../imgs/hamMenu.svg) ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    position: absolute;\n    width: 2rem;\n    height: 2rem;\n    left: 1rem;\n    margin-top: 1rem;\n    border: 0;\n    z-index: 1000;\n    cursor: pointer;\n    \n    &[aria-expanded="true"]{\n      background-color: $red;\n      -webkit-mask-image: url(../../imgs/closeMenu.svg) ;\n      mask-image: url(../../imgs/closeMenu.svg) ;\n    }\n  }\n  \n  .categories-navigation{\n    position: fixed;\n    flex-direction: column;\n    align-content: center;\n    inset: 0 20% 0 0;\n    z-index: 999;\n    padding-top: 8vh;\n    padding-left: min(8vh, 10vh);\n    background-color: $font-title-bg-color;\n    transform: translateX(-100%);\n    transition: 0.4s ease-in-out;\n    /*BLUR bg  */\n    backdrop-filter: blur(8px);\n    color: $secondary-background-dark;\n    max-height: 90vh;\n    \n    // CATEGORIES TITLE \n    .categories-title{\n      display: grid;\n      align-items: center;\n      grid-template-columns: 1fr 1fr;\n      gap: 0.5rem;\n      \n      .add-categories{\n        background-color: $high-ligh-icon;\n        -webkit-mask-image: url(../../imgs/plus.svg) ;\n        mask-image: url(../../imgs/plus.svg) ;\n        -webkit-mask-repeat: no-repeat;\n        mask-repeat: no-repeat;\n        width: 1.5rem;\n        height: 1.5rem;\n        border: 0;\n        z-index: 1000;\n        cursor: pointer;\n      }\n    }\n    \n    .category{\n      &:hover{\n        cursor: pointer;\n      }\n      /* SINGLE CATEGORY */\n      .category--title{\n        text-transform: capitalize;\n      }\n      div {\n        display: grid;\n        gap: .4em;\n        grid-template-columns: 1fr 1fr;\n        align-items: center;\n        \n        .delete-category{\n          width: 1rem;\n          height: 1rem;\n          background-color: $red;\n          -webkit-mask-image: url(../../imgs/minusDelete.svg) ;\n          mask-image: url(../../imgs/minusDelete.svg) ;\n          -webkit-mask-repeat: no-repeat;\n          mask-repeat: no-repeat;\n          border: 0;\n          cursor: pointer;\n          \n        }\n      }\n      \n    }\n    // When Toggle is pressed\n    \n    &[data-visible="true"]{\n      transform: translateX(0%);\n      \n    }\n  }\n  /*-----------\n  POP UP\n  -------------*/ \n  .add-project-popUp{\n    display: none;\n    box-shadow: -1px 0px 3px 4px rgba(0, 0, 0, 0.36);\n    background-color: $primary-background;\n    max-width: 40vh;\n    text-align: center;\n    border-radius: 10px;\n    padding-top: 2rem;\n    padding-inline: 2rem;\n    position: absolute;\n    top: 20%;\n    left: 50%;\n    z-index: 1005;\n    transform: translate(-50%, 20%);\n    // text color\n    color: $font-p-color;\n    letter-spacing: $letter-spacing;\n    \n    input, button{\n      border-radius: 10px;\n      border: none;\n    }\n    input{\n      padding-inline: 1rem;\n      margin-inline: auto;\n      width: 30vh;\n    }\n    /* Buttons */\n    .btns-popUp{\n      margin-top: 1rem;\n      margin-bottom: .5rem;\n      display: flex;\n      justify-content: space-around;\n      *{\n        background: transparent;\n      }\n      .add-project-btn{\n        color: $font-title-bg-color;\n        letter-spacing: $letter-spacing;\n        cursor: pointer;\n      }\n      .cancel-project-btn{\n        color: $red;\n        text-shadow: 1px 0.4px $font-title-bg-color;\n        letter-spacing: $letter-spacing;\n        cursor: pointer;\n      }\n      \n    }\n    \n    &[project-pop-visible="true"]{\n      display: grid;\n    }\n  }\n  \n}\n\n@media screen and (min-width: 900px) {\n  .categories-navigation{\n    transform: translateX(0%);\n    inset: 0 70% 0 0;\n    box-shadow: 11px 3px 3px -8px rgba(0,0,0,0.5);\n    \n  }\n  .mobile-toggle{\n    display: none;\n  }\n  \n}\n\n@media screen and (min-width: 1200px) {\n  .categories-navigation{\n    inset: 0 75% 0 0;\n  }\n}\n@media screen and (min-width: 1600px) {\n  .categories-navigation{\n    inset: 0 80% 0 0;\n  }\n}\n@media screen and (max-height: 596px) {\n  .add-project-popUp{\n    max-width: 90vh;\n  }\n\n}\n'],sourceRoot:""}]);const v=C},859:(n,e,t)=>{t.d(e,{Z:()=>C});var a=t(537),i=t.n(a),r=t(645),o=t.n(r),A=t(667),s=t.n(A),d=new URL(t(309),t.b),l=new URL(t(649),t.b),c=o()(i());c.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap);"]);var u=s()(d),p=s()(l);c.push([n.id,'*,*::after,*::before{margin:0;padding:0;box-sizing:border-box}body,h1,h2,h3,h4 p,figure,picture{margin:0}h1,h2,h3,h4,h5{text-transform:capitalize;font-weight:400}a,li{text-decoration:none;list-style:none}body{line-height:1.5;min-height:100vh;font-family:"Roboto",sans-serif;grid-template-rows:-webkit-min-content 1fr;grid-template-rows:min-content 1fr;overflow-x:hidden}img,picture{max-width:100%;display:block}input,button,textarea,select{font:inherit;-webkit-appearance:none;appearance:none}input:focus{outline:none;appearance:none}@media(prefers-reduced-motion: reduce){*,*::before,*::after{-webkit-animation-duration:.01ms !important;animation-duration:.01ms !important;-webkit-animation-iteration-count:1 !important;animation-iteration-count:1 !important;transition-duration:.01sms !important;scroll-behavior:auto !important}}.hidden{display:none}.inline{display:inline-block}.flex{display:flex;gap:var(--gap, 1rem)}.grid{display:grid;gap:var(--gap, 1rem)}.d-block{display:block}.container{padding-inline:0rem;margin-inline:auto;max-width:inherit}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border:0}@media screen and (min-width: 0px){.taskDescPanel{position:absolute;top:14%;left:50%;transform:translate(-50%, 14%);min-height:50vh;padding:1em;width:35vh;display:flex;flex-direction:column;justify-content:space-around;background-color:#f3d2c1;border-radius:10px;color:#27355c;overflow:auto}.taskDescPanel .hide-desc-panel{background:rgba(0,0,0,0);border:none;width:4vh;height:4vh;background-color:#c40000;-webkit-mask-image:url('+u+");mask-image:url("+u+");-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;position:absolute;top:1vh;right:1.6vh;cursor:pointer}.taskDescPanel .title--task h1{font-size:1.4em}.taskDescPanel .set-date{position:relative;display:grid;place-items:center;padding:.2em;border:1px solid rgba(0,23,88,.9);border-radius:10px;grid-template-columns:1fr 4vh}.taskDescPanel .set-date .add-date-label{position:absolute;left:6.5vh;z-index:-1}.taskDescPanel .set-date input{color:rgba(0,0,0,0);background:rgba(0,0,0,0);border:none}.taskDescPanel .set-date .due-Date-btn{background:rgba(0,0,0,0);background-color:rgba(0,23,88,.9);-webkit-mask-image:url("+p+");mask-image:url("+p+');-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;width:4vh;height:4vh;border:0;cursor:pointer}.notes-panel{position:relative;margin-top:1rem;min-height:5vh;padding:.3em;border:1px solid rgba(0,23,88,.9);border-radius:10px}.notes-panel .textarea{display:block;min-height:4.8vh;width:100%}.notes-panel .textarea:empty::before{content:"Add notes";color:gray}.notes-panel .textarea:focus{outline:none}}@media screen and (min-width: 800px){.taskDescPanel .hide-desc-panel{top:1vh;right:1vh}.taskDescPanel .set-date .due-Date-btn{width:3vh;height:3vh}}@media screen and (max-height: 596px){.taskDescPanel{top:14%;left:50%;transform:translate(-50%, 14%);min-height:50vh;padding:1em;width:100%;color:#27355c;overflow:auto}}',"",{version:3,sources:["webpack://./src/styles/_custom.scss","webpack://./src/styles/sassModules/_taskPanel.scss"],names:[],mappings:"AA8BA,qBAGE,QAAA,CACA,SAAA,CACA,qBAAA,CAGF,kCAOE,QAAA,CAGF,eAKE,yBAAA,CACA,eAAA,CAGF,KAEE,oBAAA,CACA,eAAA,CAGF,KACE,eAAA,CACA,gBAAA,CACA,+BAAA,CAEA,0CAAA,CACA,kCAAA,CACA,iBAAA,CAIF,YAEE,cAAA,CACA,aAAA,CAIF,6BAIE,YAAA,CACA,uBAAA,CACA,eAAA,CAGF,YACE,YAAA,CACA,eAAA,CAKF,uCAEE,qBAGE,2CAAA,CACA,mCAAA,CACA,8CAAA,CACA,sCAAA,CACA,qCAAA,CACA,+BAAA,CAAA,CAOJ,QACE,YAAA,CAGF,QACE,oBAAA,CAGF,MACE,YAAA,CACA,oBAAA,CAGF,MACE,YAAA,CACA,oBAAA,CAGF,SACE,aAAA,CASF,WACE,mBAAA,CACA,kBAAA,CACA,iBAAA,CAIF,SACE,iBAAA,CACA,SAAA,CACA,UAAA,CACA,SAAA,CACA,WAAA,CACA,eAAA,CACA,qBAAA,CACA,kBAAA,CAEA,QAAA,CC7JF,mCACE,eACE,iBAAA,CACA,OAAA,CACA,QAAA,CACA,8BAAA,CACA,eAAA,CACA,WAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CACA,4BAAA,CACA,wBDbiB,CCcjB,kBAAA,CACA,aDTW,CCUX,aAAA,CAGA,gCACE,wBAAA,CACA,WAAA,CACA,SAAA,CACA,UAAA,CAEA,wBAAA,CACA,0DAAA,CACA,kDAAA,CACA,6BAAA,CACA,qBAAA,CACA,iBAAA,CACA,OAAA,CACA,WAAA,CACA,cAAA,CAIA,+BACE,eAAA,CAGJ,yBACE,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,YAAA,CACA,iCAAA,CACA,kBAAA,CACA,6BAAA,CACA,yCACE,iBAAA,CACA,UAAA,CACA,UAAA,CAEF,+BACE,mBAAA,CACA,wBAAA,CACA,WAAA,CAGF,uCACE,wBAAA,CACA,iCDtDc,CCuDd,0DAAA,CACA,kDAAA,CACA,6BAAA,CACA,qBAAA,CACA,SAAA,CACA,UAAA,CACA,QAAA,CACA,cAAA,CAKN,aACE,iBAAA,CACA,eAAA,CACA,cAAA,CACA,YAAA,CACA,iCAAA,CACA,kBAAA,CACA,uBACE,aAAA,CACA,gBAAA,CACA,UAAA,CAEA,qCACE,mBAAA,CACA,UAAA,CAEF,6BACE,YAAA,CAAA,CAKR,qCAGI,gCACE,OAAA,CACA,SAAA,CAIA,uCACE,SAAA,CACA,UAAA,CAAA,CAKR,sCACE,eACE,OAAA,CACA,QAAA,CACA,8BAAA,CACA,eAAA,CACA,WAAA,CACA,UAAA,CACA,aDnHW,CCoHX,aAAA,CAAA",sourcesContent:['// Variables\n$primary-background: #f3d2c1;\n$primary-background-opacity: rgba(243, 210, 193, 0.9);\n$primary-background-light: #FFE6D9;\n$primary-background-light-opacity: rgba(255, 230, 217, 0.9);\n$font-title-color: #001858;\n$font-title-grey: #343F5E;\n$font-p-color: #27355C;\n$font-p-color-light: #e6dfd0;\n$font-title-bg-color: rgba(0, 23, 88, 0.9);\n$secondary-background: #fef6e4;\n$secondary-background-dark: #F5EDDC;\n$secondary-background-dark-opacity: rgba(245, 237, 220, 0.9);\n\n$high-ligh-icon: #f582ae;\n$red: #F96961;\n\n$letter-spacing: 0.01em;\n\n\n\n\n/* FONT FAMILY */\n@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap");\n/*\n=============== \nGlobal Styles/ Reset\n===============\n*/\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody,\nh1,\nh2,\nh3,\nh4 p,\nfigure,\npicture {\n  margin: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  text-transform: capitalize;\n  font-weight: 400;\n}\n\na,\nli {\n  text-decoration: none;\n  list-style: none;\n}\n\nbody {\n  line-height: 1.5;\n  min-height: 100vh;\n  font-family: "Roboto", sans-serif;\n\n  grid-template-rows: -webkit-min-content 1fr;\n  grid-template-rows: min-content 1fr;\n  overflow-x: hidden;\n}\n\n/* imgs easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* form elements easier to work with */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n  -webkit-appearance: none;\n  appearance: none;\n  \n}\ninput:focus{\n  outline: none;\n  appearance: none;\n}\n\n\n/* remove animation for people who turned them off */\n@media (prefers-reduced-motion: reduce) {\n\n  *,\n  *::before,\n  *::after {\n    -webkit-animation-duration: 0.01ms !important;\n    animation-duration: 0.01ms !important;\n    -webkit-animation-iteration-count: 1 !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01sms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n/* =========\nutility clases \n=========== */\n.hidden {\n  display: none;\n}\n\n.inline {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n  gap: var(--gap, 1rem);\n}\n\n.grid {\n  display: grid;\n  gap: var(--gap, 1rem);\n}\n\n.d-block {\n  display: block;\n}\n\n\n/* SPACING .flow */\n/* Seclect all the elements of a divider except the first Child */\n/* It is use to make the top and botton line heights and borders the same */\n/* Where is a way to group things, is lower on specificy so we dont overwrite things*/\n\n.container {\n  padding-inline: 0rem;\n  margin-inline: auto;\n  max-width: inherit;\n}\n\n/* for the visually impaired -Hide Contten- */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  /* added line */\n  border: 0;\n}\n\n',"@use \"../custom\" as *;\n\n@media screen and (min-width: 0px){\n  .taskDescPanel{\n    position: absolute;\n    top: 14%;\n    left: 50%;\n    transform: translate(-50%, 14%);\n    min-height: 50vh;\n    padding: 1em;\n    width: 35vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    background-color: $primary-background;\n    border-radius: 10px;\n    color: $font-p-color;\n    overflow: auto;\n\n    // Hide Panel btn\n    .hide-desc-panel{\n      background: transparent;\n      border: none;\n      width: 4vh;\n      height: 4vh;\n      /* Change Icon color */\n      background-color: rgb(196, 0, 0);\n      -webkit-mask-image: url(../../imgs/Close.svg) ;\n      mask-image: url(../../imgs/Close.svg) ;\n      -webkit-mask-repeat: no-repeat;\n      mask-repeat: no-repeat;\n      position: absolute;\n      top: 1vh;\n      right: 1.6vh;\n      cursor: pointer;\n    }\n\n    .title--task{\n      h1{\n        font-size: 1.4em;\n      }\n    }\n    .set-date{\n      position: relative;\n      display: grid;\n      place-items: center;\n      padding: .2em;\n      border: 1px solid $font-title-bg-color;\n      border-radius: 10px;\n      grid-template-columns: 1fr 4vh;\n      .add-date-label{\n        position: absolute;\n        left: 6.5vh;\n        z-index: -1;\n      }\n      input{\n        color: transparent;\n        background: transparent;\n        border: none;\n      }\n\n      .due-Date-btn{\n        background: transparent;\n        background-color: $font-title-bg-color;\n        -webkit-mask-image: url(../../imgs/plus.svg) ;\n        mask-image: url(../../imgs/plus.svg) ;\n        -webkit-mask-repeat: no-repeat;\n        mask-repeat: no-repeat;\n        width: 4vh;\n        height: 4vh;\n        border: 0;\n        cursor: pointer;\n      }\n    }\n  }\n  /* PANEL FOR NOTES */\n  .notes-panel{\n    position: relative;\n    margin-top: 1rem;\n    min-height: 5vh;\n    padding: .3em;\n    border: 1px solid $font-title-bg-color;\n    border-radius: 10px;\n    .textarea{\n      display: block;\n      min-height: 4.8vh;\n      width: 100%;\n      // IF text area empty show a place Holder\n      &:empty::before{\n        content: 'Add notes';\n        color: grey;\n      }\n      &:focus{\n        outline: none;\n      }\n    }\n  }\n}\n@media screen and (min-width: 800px) {\n  .taskDescPanel{\n    // Hide Panel btn\n    .hide-desc-panel{\n      top: 1vh;\n      right: 1vh;\n\n    }\n    .set-date{\n      .due-Date-btn{\n        width: 3vh;\n        height: 3vh;\n      }\n    }\n  }\n}\n@media screen and (max-height: 596px) {\n  .taskDescPanel{\n    top: 14%;\n    left: 50%;\n    transform: translate(-50%, 14%);\n    min-height: 50vh;\n    padding: 1em;\n    width: 100%;\n    color: $font-p-color;\n    overflow: auto;\n  }\n}"],sourceRoot:""}]);const C=c},626:(n,e,t)=>{t.d(e,{Z:()=>b});var a=t(537),i=t.n(a),r=t(645),o=t.n(r),A=t(667),s=t.n(A),d=new URL(t(115),t.b),l=new URL(t(251),t.b),c=new URL(t(179),t.b),u=new URL(t(743),t.b),p=o()(i());p.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap);"]);var C=s()(d),m=s()(l),g=s()(c),h=s()(u);p.push([n.id,'*,*::after,*::before{margin:0;padding:0;box-sizing:border-box}body,h1,h2,h3,h4 p,figure,picture{margin:0}h1,h2,h3,h4,h5{text-transform:capitalize;font-weight:400}a,li{text-decoration:none;list-style:none}body{line-height:1.5;min-height:100vh;font-family:"Roboto",sans-serif;grid-template-rows:-webkit-min-content 1fr;grid-template-rows:min-content 1fr;overflow-x:hidden}img,picture{max-width:100%;display:block}input,button,textarea,select{font:inherit;-webkit-appearance:none;appearance:none}input:focus{outline:none;appearance:none}@media(prefers-reduced-motion: reduce){*,*::before,*::after{-webkit-animation-duration:.01ms !important;animation-duration:.01ms !important;-webkit-animation-iteration-count:1 !important;animation-iteration-count:1 !important;transition-duration:.01sms !important;scroll-behavior:auto !important}}.hidden{display:none}.inline{display:inline-block}.flex{display:flex;gap:var(--gap, 1rem)}.grid{display:grid;gap:var(--gap, 1rem)}.d-block{display:block}.container{padding-inline:0rem;margin-inline:auto;max-width:inherit}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border:0}@media screen and (min-width: 0px){.todo-panel{position:relative;padding:1em;border-radius:10px;min-height:45vh;max-height:60vh;width:35vh;background-color:rgba(0,23,88,.9);color:#f5eddc;overflow:auto}.todo-panel .title{margin-bottom:1.5vh;border-bottom:1px solid #fff}.todo-panel .tasks{max-height:40vh;overflow:auto;margin-bottom:3vh}.todo-panel .tasks .task{padding:.8vh;grid-template-columns:2vh 1fr 2vh}.todo-panel .tasks .task .task-category{color:#f582ae;font-size:.9em}.todo-panel .tasks .task .task-title{cursor:pointer;z-index:2}.todo-panel .tasks .task .TaskItemCheckbox{place-self:center;border-radius:50%;border:none;color:#f582ae;background-color:#f582ae;-webkit-mask-image:url('+C+");mask-image:url("+C+");-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;width:2.4vh;height:2.4vh;cursor:pointer}.todo-panel .tasks .task .TaskItemDelete{background:rgba(0,0,0,0);border:none;text-align:center;place-self:center;width:2.4vh;height:2.4vh;background-color:#f96961;-webkit-mask-image:url("+m+");mask-image:url("+m+");-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;cursor:pointer}.todo-panel .tasks .task[aria-disabled=true]{color:#686868;text-decoration:line-through}.todo-panel .tasks .task[aria-disabled=true] .TaskItemCheckbox{background-color:#a0a0a0;-webkit-mask-image:url("+g+");mask-image:url("+g+");-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat}.todo-panel .tasks .task[aria-disabled=true] .task-category{display:none}.todo-panel .add-task-container{position:absolute;display:flex;gap:.5vh;border-radius:10px;align-items:center;bottom:.3vh;left:3vh;width:30vh;height:5vh}.todo-panel .add-task-container #add-task-text{width:25vh;border-radius:10px}.todo-panel .add-task-container label{display:block;position:absolute;top:1vh;left:2vh;opacity:.4;font-size:12px;color:#000}.todo-panel .add-task-container input{padding-left:1em;outline:none;border:none;display:block;line-height:1.5em;height:2.2em;font-size:.8em}.todo-panel .add-task-container input:focus+label{opacity:0}.todo-panel .add-task-container .add-task-btn{background:rgba(0,0,0,0);border:none;width:5vh;height:5vh;color:#f582ae;background-color:#f582ae;-webkit-mask-image:url("+h+");mask-image:url("+h+");-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;cursor:pointer}}@media screen and (min-width: 500px){.todo-panel .tasks .task .TaskItemCheckbox{width:2vh;height:2vh}.todo-panel .tasks .task .TaskItemDelete{width:2vh;height:2vh}.todo-panel .add-task-container{bottom:.05em;left:3vh}.todo-panel .add-task-container label{top:1.6vh;left:2vh}.todo-panel .add-task-container .add-task-btn{width:3vh;height:3vh}}@media screen and (min-width: 800px){.todo-panel .add-task-container input{height:1.8em;font-size:1em}}@media screen and (max-height: 596px){.todo-panel{position:relative;padding:1em;border-radius:10px;min-height:45vh;max-height:85%;width:80%;background-color:rgba(0,23,88,.9);color:#f5eddc;overflow:auto}.todo-panel .add-task-container{gap:1vh;bottom:1vh;left:8vh;width:80%;height:3vh;padding-bottom:4vh}.todo-panel .add-task-container label{top:.01vh}.todo-panel .add-task-container #add-task-text{width:80%}.todo-panel .add-task-container .add-task-btn{width:6vh;height:6vh}}","",{version:3,sources:["webpack://./src/styles/_custom.scss","webpack://./src/styles/sassModules/_todoPanel.scss"],names:[],mappings:"AA8BA,qBAGE,QAAA,CACA,SAAA,CACA,qBAAA,CAGF,kCAOE,QAAA,CAGF,eAKE,yBAAA,CACA,eAAA,CAGF,KAEE,oBAAA,CACA,eAAA,CAGF,KACE,eAAA,CACA,gBAAA,CACA,+BAAA,CAEA,0CAAA,CACA,kCAAA,CACA,iBAAA,CAIF,YAEE,cAAA,CACA,aAAA,CAIF,6BAIE,YAAA,CACA,uBAAA,CACA,eAAA,CAGF,YACE,YAAA,CACA,eAAA,CAKF,uCAEE,qBAGE,2CAAA,CACA,mCAAA,CACA,8CAAA,CACA,sCAAA,CACA,qCAAA,CACA,+BAAA,CAAA,CAOJ,QACE,YAAA,CAGF,QACE,oBAAA,CAGF,MACE,YAAA,CACA,oBAAA,CAGF,MACE,YAAA,CACA,oBAAA,CAGF,SACE,aAAA,CASF,WACE,mBAAA,CACA,kBAAA,CACA,iBAAA,CAIF,SACE,iBAAA,CACA,SAAA,CACA,UAAA,CACA,SAAA,CACA,WAAA,CACA,eAAA,CACA,qBAAA,CACA,kBAAA,CAEA,QAAA,CC9JF,mCACE,YACE,iBAAA,CACA,WAAA,CACA,kBAAA,CACA,eAAA,CACA,eAAA,CACA,UAAA,CACA,iCAAA,CACA,aDCwB,CAAA,aAAA,CCExB,mBACE,mBAAA,CACA,4BAAA,CAGF,mBACE,eAAA,CACA,aAAA,CACA,iBAAA,CAEA,yBACE,YAAA,CACA,iCAAA,CACA,wCACE,aDbO,CCcP,cAAA,CAEF,qCACE,cAAA,CACA,SAAA,CAEF,2CACE,iBAAA,CACA,iBAAA,CACA,WAAA,CACA,aDxBO,CCyBP,wBDzBO,CC0BP,0DAAA,CACA,kDAAA,CACA,6BAAA,CACA,qBAAA,CACA,WAAA,CACA,YAAA,CACA,cAAA,CAGF,yCACE,wBAAA,CACA,WAAA,CACA,iBAAA,CACA,iBAAA,CACA,WAAA,CACA,YAAA,CAEA,wBD1CJ,CC2CI,0DAAA,CACA,kDAAA,CACA,6BAAA,CACA,qBAAA,CACA,cAAA,CAIF,6CACE,aAAA,CACA,4BAAA,CACA,+DAEE,wBAAA,CACA,0DAAA,CACA,kDAAA,CACA,6BAAA,CACA,qBAAA,CAEF,4DACE,YAAA,CAMR,gCACE,iBAAA,CACA,YAAA,CACA,QAAA,CACA,kBAAA,CACA,kBAAA,CACA,WAAA,CACA,QAAA,CACA,UAAA,CACA,UAAA,CAEA,+CACE,UAAA,CACA,kBAAA,CAEF,sCACE,aAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,UAAA,CACA,cAAA,CACA,UAAA,CAEF,sCACE,gBAAA,CACA,YAAA,CACA,WAAA,CACA,aAAA,CACA,iBAAA,CACA,YAAA,CACA,cAAA,CAIE,kDACE,SAAA,CAIN,8CACE,wBAAA,CACA,WAAA,CACA,SAAA,CACA,UAAA,CACA,aDnHS,CCqHT,wBDrHS,CCsHT,0DAAA,CACA,kDAAA,CACA,6BAAA,CACA,qBAAA,CACA,cAAA,CAAA,CAKR,qCAIQ,2CACE,SAAA,CACA,UAAA,CAEF,yCACE,SAAA,CACA,UAAA,CAKN,gCACE,YAAA,CACA,QAAA,CAEA,sCACE,SAAA,CACA,QAAA,CAGF,8CACE,SAAA,CACA,UAAA,CAAA,CAKN,qCAEI,sCAEI,YAAA,CACA,aAAA,CAAA,CAKR,sCACE,YACE,iBAAA,CACA,WAAA,CACA,kBAAA,CACA,eAAA,CACA,cAAA,CACA,SAAA,CACA,iCDrLgB,CCsLhB,aDpLsB,CCqLtB,aAAA,CAEA,gCACE,OAAA,CACA,UAAA,CACA,QAAA,CACA,SAAA,CACA,UAAA,CACA,kBAAA,CACA,sCACE,SAAA,CAEF,+CACE,SAAA,CAEF,8CACE,SAAA,CACA,UAAA,CAAA",sourcesContent:['// Variables\n$primary-background: #f3d2c1;\n$primary-background-opacity: rgba(243, 210, 193, 0.9);\n$primary-background-light: #FFE6D9;\n$primary-background-light-opacity: rgba(255, 230, 217, 0.9);\n$font-title-color: #001858;\n$font-title-grey: #343F5E;\n$font-p-color: #27355C;\n$font-p-color-light: #e6dfd0;\n$font-title-bg-color: rgba(0, 23, 88, 0.9);\n$secondary-background: #fef6e4;\n$secondary-background-dark: #F5EDDC;\n$secondary-background-dark-opacity: rgba(245, 237, 220, 0.9);\n\n$high-ligh-icon: #f582ae;\n$red: #F96961;\n\n$letter-spacing: 0.01em;\n\n\n\n\n/* FONT FAMILY */\n@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap");\n/*\n=============== \nGlobal Styles/ Reset\n===============\n*/\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody,\nh1,\nh2,\nh3,\nh4 p,\nfigure,\npicture {\n  margin: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  text-transform: capitalize;\n  font-weight: 400;\n}\n\na,\nli {\n  text-decoration: none;\n  list-style: none;\n}\n\nbody {\n  line-height: 1.5;\n  min-height: 100vh;\n  font-family: "Roboto", sans-serif;\n\n  grid-template-rows: -webkit-min-content 1fr;\n  grid-template-rows: min-content 1fr;\n  overflow-x: hidden;\n}\n\n/* imgs easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* form elements easier to work with */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n  -webkit-appearance: none;\n  appearance: none;\n  \n}\ninput:focus{\n  outline: none;\n  appearance: none;\n}\n\n\n/* remove animation for people who turned them off */\n@media (prefers-reduced-motion: reduce) {\n\n  *,\n  *::before,\n  *::after {\n    -webkit-animation-duration: 0.01ms !important;\n    animation-duration: 0.01ms !important;\n    -webkit-animation-iteration-count: 1 !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01sms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n/* =========\nutility clases \n=========== */\n.hidden {\n  display: none;\n}\n\n.inline {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n  gap: var(--gap, 1rem);\n}\n\n.grid {\n  display: grid;\n  gap: var(--gap, 1rem);\n}\n\n.d-block {\n  display: block;\n}\n\n\n/* SPACING .flow */\n/* Seclect all the elements of a divider except the first Child */\n/* It is use to make the top and botton line heights and borders the same */\n/* Where is a way to group things, is lower on specificy so we dont overwrite things*/\n\n.container {\n  padding-inline: 0rem;\n  margin-inline: auto;\n  max-width: inherit;\n}\n\n/* for the visually impaired -Hide Contten- */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  /* added line */\n  border: 0;\n}\n\n',"@use '../custom' as *;\n@media screen and (min-width: 0px) {\n  .todo-panel{\n    position: relative;\n    padding: 1em;\n    border-radius: 10px;\n    min-height: 45vh;\n    max-height: 60vh;\n    width: 35vh;\n    background-color: $font-title-bg-color;\n    color: $secondary-background-dark;\n    overflow: auto;\n    \n    .title{\n      margin-bottom: 1.5vh;\n      border-bottom: 1px solid white;\n    }\n    /* Make tasks scrollable */\n    .tasks{\n      max-height: 40vh;\n      overflow: auto;\n      margin-bottom: 3vh;\n\n      .task{\n        padding: .8vh;\n        grid-template-columns: 2vh 1fr 2vh;\n        .task-category{\n          color: $high-ligh-icon;\n          font-size: .9em;\n        }\n        .task-title{\n          cursor: pointer;\n          z-index: 2;\n        }\n        .TaskItemCheckbox{\n          place-self: center;\n          border-radius: 50%;\n          border: none;\n          color: $high-ligh-icon;\n          background-color: $high-ligh-icon;\n          -webkit-mask-image: url(../../imgs/uncheck.svg) ;\n          mask-image: url(../../imgs/uncheck.svg) ;\n          -webkit-mask-repeat: no-repeat;\n          mask-repeat: no-repeat;\n          width: 2.4vh;\n          height: 2.4vh;\n          cursor: pointer;\n          \n        }\n        .TaskItemDelete{\n          background: transparent;\n          border: none;\n          text-align: center;\n          place-self: center;\n          width: 2.4vh;\n          height: 2.4vh;\n          /* Change Icon color */\n          background-color: $red;\n          -webkit-mask-image: url(../../imgs/minusDelete.svg) ;\n          mask-image: url(../../imgs/minusDelete.svg) ;\n          -webkit-mask-repeat: no-repeat;\n          mask-repeat: no-repeat;\n          cursor: pointer;\n        }\n\n        // When task is done\n        &[aria-disabled=\"true\"]{\n          color: rgb(104, 104, 104);\n          text-decoration: line-through;\n          .TaskItemCheckbox {\n            /* Change Icon color */\n            background-color: #a0a0a0;\n            -webkit-mask-image: url(../../imgs/check.svg) ;\n            mask-image: url(../../imgs/check.svg) ;\n            -webkit-mask-repeat: no-repeat;\n            mask-repeat: no-repeat;  \n          }\n          .task-category {\n            display: none;\n          }\n        }\n      }\n    }\n    /* INPUT TASK FIELD */\n    .add-task-container{\n      position: absolute;\n      display: flex;\n      gap: .5vh;\n      border-radius: 10px;\n      align-items: center;\n      bottom: .3vh;\n      left: 3vh;\n      width: 30vh;\n      height: 5vh;\n\n      #add-task-text{\n        width: 25vh;\n        border-radius: 10px;\n      }\n      label{\n        display: block;\n        position: absolute;\n        top: 1vh;\n        left: 2vh;\n        opacity: .4;\n        font-size: 12px;\n        color: black;\n      }\n      input{\n        padding-left: 1em;\n        outline: none;\n        border: none;\n        display:block;\n        line-height: 1.5em;\n        height: 2.2em;\n        font-size: .8em;\n\n        // label disappear on focus\n        &:focus{\n          & + label{\n            opacity: 0;\n          }\n        }\n      }\n      .add-task-btn{\n        background: transparent;\n        border: none;\n        width: 5vh;\n        height: 5vh;\n        color: $high-ligh-icon;\n        /* Change Icon color */\n        background-color: $high-ligh-icon;\n        -webkit-mask-image: url(../../imgs/arrowUp.svg) ;\n        mask-image: url(../../imgs/arrowUp.svg) ;\n        -webkit-mask-repeat: no-repeat;\n        mask-repeat: no-repeat;\n        cursor: pointer;\n      }\n    }\n  }\n}\n@media screen and (min-width: 500px) {\n  .todo-panel{\n    .tasks{\n      .task{\n        .TaskItemCheckbox{\n          width: 2vh;\n          height: 2vh;\n        }\n        .TaskItemDelete{\n          width: 2vh;\n          height: 2vh;\n        }\n      }\n    } \n    /* INPUT TASK FIELD */\n    .add-task-container{\n      bottom: .05em;\n      left: 3vh;\n      \n      label{\n        top: 1.6vh;\n        left: 2vh;\n      }\n      \n      .add-task-btn{\n        width: 3vh;\n        height: 3vh;\n      }\n    }\n  }\n  }\n  @media screen and (min-width: 800px) {\n    .todo-panel{\n      .add-task-container \n        input{\n          height: 1.8em;\n          font-size: 1em;\n        \n      }\n    }\n  }\n  @media screen and (max-height: 596px) {\n    .todo-panel{\n      position: relative;\n      padding: 1em;\n      border-radius: 10px;\n      min-height: 45vh;\n      max-height: 85%;\n      width: 80%;\n      background-color: $font-title-bg-color;\n      color: $secondary-background-dark;\n      overflow: auto;\n          /* INPUT TASK FIELD */\n      .add-task-container{\n        gap: 1vh;\n        bottom: 1vh;\n        left: 8vh;\n        width: 80%;\n        height: 3vh;\n        padding-bottom: 4vh;\n        label{\n          top: .01vh;\n        }\n        #add-task-text{\n          width: 80%;\n        }\n        .add-task-btn{\n          width: 6vh;\n          height: 6vh;\n        }\n      }\n  }\n}\n  \n  \n"],sourceRoot:""}]);const b=p},315:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(537),i=t.n(a),r=t(645),o=t.n(r)()(i());o.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap);"]),o.push([n.id,'*,*::after,*::before{margin:0;padding:0;box-sizing:border-box}body,h1,h2,h3,h4 p,figure,picture{margin:0}h1,h2,h3,h4,h5{text-transform:capitalize;font-weight:400}a,li{text-decoration:none;list-style:none}body{line-height:1.5;min-height:100vh;font-family:"Roboto",sans-serif;grid-template-rows:-webkit-min-content 1fr;grid-template-rows:min-content 1fr;overflow-x:hidden}img,picture{max-width:100%;display:block}input,button,textarea,select{font:inherit;-webkit-appearance:none;appearance:none}input:focus{outline:none;appearance:none}@media(prefers-reduced-motion: reduce){*,*::before,*::after{-webkit-animation-duration:.01ms !important;animation-duration:.01ms !important;-webkit-animation-iteration-count:1 !important;animation-iteration-count:1 !important;transition-duration:.01sms !important;scroll-behavior:auto !important}}.hidden{display:none}.inline{display:inline-block}.flex{display:flex;gap:var(--gap, 1rem)}.grid{display:grid;gap:var(--gap, 1rem)}.d-block{display:block}.container{padding-inline:0rem;margin-inline:auto;max-width:inherit}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border:0}',"",{version:3,sources:["webpack://./src/styles/_custom.scss"],names:[],mappings:"AA8BA,qBAGE,QAAA,CACA,SAAA,CACA,qBAAA,CAGF,kCAOE,QAAA,CAGF,eAKE,yBAAA,CACA,eAAA,CAGF,KAEE,oBAAA,CACA,eAAA,CAGF,KACE,eAAA,CACA,gBAAA,CACA,+BAAA,CAEA,0CAAA,CACA,kCAAA,CACA,iBAAA,CAIF,YAEE,cAAA,CACA,aAAA,CAIF,6BAIE,YAAA,CACA,uBAAA,CACA,eAAA,CAGF,YACE,YAAA,CACA,eAAA,CAKF,uCAEE,qBAGE,2CAAA,CACA,mCAAA,CACA,8CAAA,CACA,sCAAA,CACA,qCAAA,CACA,+BAAA,CAAA,CAOJ,QACE,YAAA,CAGF,QACE,oBAAA,CAGF,MACE,YAAA,CACA,oBAAA,CAGF,MACE,YAAA,CACA,oBAAA,CAGF,SACE,aAAA,CASF,WACE,mBAAA,CACA,kBAAA,CACA,iBAAA,CAIF,SACE,iBAAA,CACA,SAAA,CACA,UAAA,CACA,SAAA,CACA,WAAA,CACA,eAAA,CACA,qBAAA,CACA,kBAAA,CAEA,QAAA",sourcesContent:['// Variables\n$primary-background: #f3d2c1;\n$primary-background-opacity: rgba(243, 210, 193, 0.9);\n$primary-background-light: #FFE6D9;\n$primary-background-light-opacity: rgba(255, 230, 217, 0.9);\n$font-title-color: #001858;\n$font-title-grey: #343F5E;\n$font-p-color: #27355C;\n$font-p-color-light: #e6dfd0;\n$font-title-bg-color: rgba(0, 23, 88, 0.9);\n$secondary-background: #fef6e4;\n$secondary-background-dark: #F5EDDC;\n$secondary-background-dark-opacity: rgba(245, 237, 220, 0.9);\n\n$high-ligh-icon: #f582ae;\n$red: #F96961;\n\n$letter-spacing: 0.01em;\n\n\n\n\n/* FONT FAMILY */\n@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap");\n/*\n=============== \nGlobal Styles/ Reset\n===============\n*/\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody,\nh1,\nh2,\nh3,\nh4 p,\nfigure,\npicture {\n  margin: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  text-transform: capitalize;\n  font-weight: 400;\n}\n\na,\nli {\n  text-decoration: none;\n  list-style: none;\n}\n\nbody {\n  line-height: 1.5;\n  min-height: 100vh;\n  font-family: "Roboto", sans-serif;\n\n  grid-template-rows: -webkit-min-content 1fr;\n  grid-template-rows: min-content 1fr;\n  overflow-x: hidden;\n}\n\n/* imgs easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* form elements easier to work with */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n  -webkit-appearance: none;\n  appearance: none;\n  \n}\ninput:focus{\n  outline: none;\n  appearance: none;\n}\n\n\n/* remove animation for people who turned them off */\n@media (prefers-reduced-motion: reduce) {\n\n  *,\n  *::before,\n  *::after {\n    -webkit-animation-duration: 0.01ms !important;\n    animation-duration: 0.01ms !important;\n    -webkit-animation-iteration-count: 1 !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01sms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n/* =========\nutility clases \n=========== */\n.hidden {\n  display: none;\n}\n\n.inline {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n  gap: var(--gap, 1rem);\n}\n\n.grid {\n  display: grid;\n  gap: var(--gap, 1rem);\n}\n\n.d-block {\n  display: block;\n}\n\n\n/* SPACING .flow */\n/* Seclect all the elements of a divider except the first Child */\n/* It is use to make the top and botton line heights and borders the same */\n/* Where is a way to group things, is lower on specificy so we dont overwrite things*/\n\n.container {\n  padding-inline: 0rem;\n  margin-inline: auto;\n  max-width: inherit;\n}\n\n/* for the visually impaired -Hide Contten- */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  /* added line */\n  border: 0;\n}\n\n'],sourceRoot:""}]);const A=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(a)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(o[s]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);a&&o[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(i," */"),o=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(o).concat([r]).join("\n")}return[e].join("\n")}},695:(n,e,t)=>{function a(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function i(n){return a(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function r(n){a(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(n){if(a(1,arguments),!i(n)&&"number"!=typeof n)return!1;var e=r(n);return!isNaN(Number(e))}function A(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function s(n,e){a(2,arguments);var t=r(n).getTime(),i=A(e);return new Date(t+i)}function d(n,e){a(2,arguments);var t=A(e);return s(n,-t)}t.d(e,{Z:()=>on});var l=864e5;function c(n){a(1,arguments);var e=1,t=r(n),i=t.getUTCDay(),o=(i<e?7:0)+i-e;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function u(n){a(1,arguments);var e=r(n),t=e.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(t+1,0,4),i.setUTCHours(0,0,0,0);var o=c(i),A=new Date(0);A.setUTCFullYear(t,0,4),A.setUTCHours(0,0,0,0);var s=c(A);return e.getTime()>=o.getTime()?t+1:e.getTime()>=s.getTime()?t:t-1}function p(n){a(1,arguments);var e=u(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var i=c(t);return i}var C=6048e5,m={};function g(){return m}function h(n,e){var t,i,o,s,d,l,c,u;a(1,arguments);var p=g(),C=A(null!==(t=null!==(i=null!==(o=null!==(s=null==e?void 0:e.weekStartsOn)&&void 0!==s?s:null==e||null===(d=e.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==o?o:p.weekStartsOn)&&void 0!==i?i:null===(c=p.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==t?t:0);if(!(C>=0&&C<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=r(n),h=m.getUTCDay(),b=(h<C?7:0)+h-C;return m.setUTCDate(m.getUTCDate()-b),m.setUTCHours(0,0,0,0),m}function b(n,e){var t,i,o,s,d,l,c,u;a(1,arguments);var p=r(n),C=p.getUTCFullYear(),m=g(),b=A(null!==(t=null!==(i=null!==(o=null!==(s=null==e?void 0:e.firstWeekContainsDate)&&void 0!==s?s:null==e||null===(d=e.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==o?o:m.firstWeekContainsDate)&&void 0!==i?i:null===(c=m.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==t?t:1);if(!(b>=1&&b<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(C+1,0,b),f.setUTCHours(0,0,0,0);var v=h(f,e),k=new Date(0);k.setUTCFullYear(C,0,b),k.setUTCHours(0,0,0,0);var w=h(k,e);return p.getTime()>=v.getTime()?C+1:p.getTime()>=w.getTime()?C:C-1}function f(n,e){var t,i,r,o,s,d,l,c;a(1,arguments);var u=g(),p=A(null!==(t=null!==(i=null!==(r=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(s=e.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==i?i:null===(l=u.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),C=b(n,e),m=new Date(0);m.setUTCFullYear(C,0,p),m.setUTCHours(0,0,0,0);var f=h(m,e);return f}var v=6048e5;function k(n,e){for(var t=n<0?"-":"",a=Math.abs(n).toString();a.length<e;)a="0"+a;return t+a}const w=function(n,e){var t=n.getUTCFullYear(),a=t>0?t:1-t;return k("yy"===e?a%100:a,e.length)},y=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):k(t+1,2)},x=function(n,e){return k(n.getUTCDate(),e.length)},E=function(n,e){return k(n.getUTCHours()%12||12,e.length)},B=function(n,e){return k(n.getUTCHours(),e.length)},D=function(n,e){return k(n.getUTCMinutes(),e.length)},T=function(n,e){return k(n.getUTCSeconds(),e.length)},S=function(n,e){var t=e.length,a=n.getUTCMilliseconds();return k(Math.floor(a*Math.pow(10,t-3)),e.length)};function F(n,e){var t=n>0?"-":"+",a=Math.abs(n),i=Math.floor(a/60),r=a%60;if(0===r)return t+String(i);var o=e||"";return t+String(i)+o+k(r,2)}function U(n,e){return n%60==0?(n>0?"-":"+")+k(Math.abs(n)/60,2):M(n,e)}function M(n,e){var t=e||"",a=n>0?"-":"+",i=Math.abs(n);return a+k(Math.floor(i/60),2)+t+k(i%60,2)}const $={G:function(n,e,t){var a=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(a,{width:"abbreviated"});case"GGGGG":return t.era(a,{width:"narrow"});default:return t.era(a,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var a=n.getUTCFullYear(),i=a>0?a:1-a;return t.ordinalNumber(i,{unit:"year"})}return w(n,e)},Y:function(n,e,t,a){var i=b(n,a),r=i>0?i:1-i;return"YY"===e?k(r%100,2):"Yo"===e?t.ordinalNumber(r,{unit:"year"}):k(r,e.length)},R:function(n,e){return k(u(n),e.length)},u:function(n,e){return k(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return k(a,2);case"Qo":return t.ordinalNumber(a,{unit:"quarter"});case"QQQ":return t.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(a,{width:"narrow",context:"formatting"});default:return t.quarter(a,{width:"wide",context:"formatting"})}},q:function(n,e,t){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return k(a,2);case"qo":return t.ordinalNumber(a,{unit:"quarter"});case"qqq":return t.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(a,{width:"narrow",context:"standalone"});default:return t.quarter(a,{width:"wide",context:"standalone"})}},M:function(n,e,t){var a=n.getUTCMonth();switch(e){case"M":case"MM":return y(n,e);case"Mo":return t.ordinalNumber(a+1,{unit:"month"});case"MMM":return t.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(a,{width:"narrow",context:"formatting"});default:return t.month(a,{width:"wide",context:"formatting"})}},L:function(n,e,t){var a=n.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return k(a+1,2);case"Lo":return t.ordinalNumber(a+1,{unit:"month"});case"LLL":return t.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(a,{width:"narrow",context:"standalone"});default:return t.month(a,{width:"wide",context:"standalone"})}},w:function(n,e,t,i){var o=function(n,e){a(1,arguments);var t=r(n),i=h(t,e).getTime()-f(t,e).getTime();return Math.round(i/v)+1}(n,i);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):k(o,e.length)},I:function(n,e,t){var i=function(n){a(1,arguments);var e=r(n),t=c(e).getTime()-p(e).getTime();return Math.round(t/C)+1}(n);return"Io"===e?t.ordinalNumber(i,{unit:"week"}):k(i,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):x(n,e)},D:function(n,e,t){var i=function(n){a(1,arguments);var e=r(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var i=e.getTime(),o=t-i;return Math.floor(o/l)+1}(n);return"Do"===e?t.ordinalNumber(i,{unit:"dayOfYear"}):k(i,e.length)},E:function(n,e,t){var a=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},e:function(n,e,t,a){var i=n.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(r);case"ee":return k(r,2);case"eo":return t.ordinalNumber(r,{unit:"day"});case"eee":return t.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(i,{width:"short",context:"formatting"});default:return t.day(i,{width:"wide",context:"formatting"})}},c:function(n,e,t,a){var i=n.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(r);case"cc":return k(r,e.length);case"co":return t.ordinalNumber(r,{unit:"day"});case"ccc":return t.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(i,{width:"narrow",context:"standalone"});case"cccccc":return t.day(i,{width:"short",context:"standalone"});default:return t.day(i,{width:"wide",context:"standalone"})}},i:function(n,e,t){var a=n.getUTCDay(),i=0===a?7:a;switch(e){case"i":return String(i);case"ii":return k(i,e.length);case"io":return t.ordinalNumber(i,{unit:"day"});case"iii":return t.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},a:function(n,e,t){var a=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(n,e,t){var a,i=n.getUTCHours();switch(a=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(n,e,t){var a,i=n.getUTCHours();switch(a=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var a=n.getUTCHours()%12;return 0===a&&(a=12),t.ordinalNumber(a,{unit:"hour"})}return E(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):B(n,e)},K:function(n,e,t){var a=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(a,{unit:"hour"}):k(a,e.length)},k:function(n,e,t){var a=n.getUTCHours();return 0===a&&(a=24),"ko"===e?t.ordinalNumber(a,{unit:"hour"}):k(a,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):D(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):T(n,e)},S:function(n,e){return S(n,e)},X:function(n,e,t,a){var i=(a._originalDate||n).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return U(i);case"XXXX":case"XX":return M(i);default:return M(i,":")}},x:function(n,e,t,a){var i=(a._originalDate||n).getTimezoneOffset();switch(e){case"x":return U(i);case"xxxx":case"xx":return M(i);default:return M(i,":")}},O:function(n,e,t,a){var i=(a._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+F(i,":");default:return"GMT"+M(i,":")}},z:function(n,e,t,a){var i=(a._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+F(i,":");default:return"GMT"+M(i,":")}},t:function(n,e,t,a){var i=a._originalDate||n;return k(Math.floor(i.getTime()/1e3),e.length)},T:function(n,e,t,a){return k((a._originalDate||n).getTime(),e.length)}};var P=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},I=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},L={p:I,P:function(n,e){var t,a=n.match(/(P+)(p+)?/)||[],i=a[1],r=a[2];if(!r)return P(n,e);switch(i){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",P(i,e)).replace("{{time}}",I(r,e))}};const Y=L;function q(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var G=["D","DD"],W=["YY","YYYY"];function O(n){return-1!==G.indexOf(n)}function N(n){return-1!==W.indexOf(n)}function j(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var R={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function z(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,a=n.formats[t]||n.formats[n.defaultWidth];return a}}var H,Q={date:z({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:z({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:z({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},J={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Z(n){return function(e,t){var a;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,r=null!=t&&t.width?String(t.width):i;a=n.formattingValues[r]||n.formattingValues[i]}else{var o=n.defaultWidth,A=null!=t&&t.width?String(t.width):n.defaultWidth;a=n.values[A]||n.values[o]}return a[n.argumentCallback?n.argumentCallback(e):e]}}function K(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.width,i=a&&n.matchPatterns[a]||n.matchPatterns[n.defaultMatchWidth],r=e.match(i);if(!r)return null;var o,A=r[0],s=a&&n.parsePatterns[a]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(s)?_(s,(function(n){return n.test(A)})):X(s,(function(n){return n.test(A)}));o=n.valueCallback?n.valueCallback(d):d,o=t.valueCallback?t.valueCallback(o):o;var l=e.slice(A.length);return{value:o,rest:l}}}function X(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function _(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}const V={code:"en-US",formatDistance:function(n,e,t){var a,i=R[n];return a="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+a:a+" ago":a},formatLong:Q,formatRelative:function(n,e,t,a){return J[n]},localize:{ordinalNumber:function(n,e){var t=Number(n),a=t%100;if(a>20||a<10)switch(a%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:Z({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Z({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:Z({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Z({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Z({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(H={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(H.matchPattern);if(!t)return null;var a=t[0],i=n.match(H.parsePattern);if(!i)return null;var r=H.valueCallback?H.valueCallback(i[0]):i[0];r=e.valueCallback?e.valueCallback(r):r;var o=n.slice(a.length);return{value:r,rest:o}}),era:K({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:K({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:K({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:K({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:K({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var nn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,en=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,tn=/^'([^]*?)'?$/,an=/''/g,rn=/[a-zA-Z]/;function on(n,e,t){var i,s,l,c,u,p,C,m,h,b,f,v,k,w,y,x,E,B;a(2,arguments);var D=String(e),T=g(),S=null!==(i=null!==(s=null==t?void 0:t.locale)&&void 0!==s?s:T.locale)&&void 0!==i?i:V,F=A(null!==(l=null!==(c=null!==(u=null!==(p=null==t?void 0:t.firstWeekContainsDate)&&void 0!==p?p:null==t||null===(C=t.locale)||void 0===C||null===(m=C.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==u?u:T.firstWeekContainsDate)&&void 0!==c?c:null===(h=T.locale)||void 0===h||null===(b=h.options)||void 0===b?void 0:b.firstWeekContainsDate)&&void 0!==l?l:1);if(!(F>=1&&F<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var U=A(null!==(f=null!==(v=null!==(k=null!==(w=null==t?void 0:t.weekStartsOn)&&void 0!==w?w:null==t||null===(y=t.locale)||void 0===y||null===(x=y.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==k?k:T.weekStartsOn)&&void 0!==v?v:null===(E=T.locale)||void 0===E||null===(B=E.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==f?f:0);if(!(U>=0&&U<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var M=r(n);if(!o(M))throw new RangeError("Invalid time value");var P=q(M),I=d(M,P),L={firstWeekContainsDate:F,weekStartsOn:U,locale:S,_originalDate:M},G=D.match(en).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,Y[e])(n,S.formatLong):n})).join("").match(nn).map((function(a){if("''"===a)return"'";var i=a[0];if("'"===i)return An(a);var r=$[i];if(r)return null!=t&&t.useAdditionalWeekYearTokens||!N(a)||j(a,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!O(a)||j(a,e,String(n)),r(I,a,S.localize,L);if(i.match(rn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return a})).join("");return G}function An(n){var e=n.match(tn);return e?e[1].replace(an,"'"):n}},379:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var r={},o=[],A=0;A<n.length;A++){var s=n[A],d=a.base?s[0]+a.base:s[0],l=r[d]||0,c="".concat(d," ").concat(l);r[d]=l+1;var u=t(c),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var C=i(p,a);a.byIndex=A,e.splice(A,0,{identifier:c,updater:C,references:1})}o.push(c)}return o}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var r=a(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<r.length;o++){var A=t(r[o]);e[A].references--}for(var s=a(n,i),d=0;d<r.length;d++){var l=t(r[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}r=s}}},569:n=>{var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,i&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},182:(n,e,t)=>{t.d(e,{h:()=>a});class a{static getTasks=()=>{let n;return n=null===localStorage.getItem("tasks")?[]:JSON.parse(localStorage.getItem("tasks")),n};static getSingleTask=n=>{let e;return this.getTasks().forEach((t=>{t.title==n&&(e=t)})),e};static saveTask(n){localStorage.setItem("tasks",JSON.stringify(n))}static addTaskToLS(n){let e=a.getTasks();e.push(n),this.saveTask(e)}static addDate(n,e){let t=this.getTasks(),a=t.findIndex((e=>e.title==n));t[a].dueDate=e,this.saveTask(t)}static LSremoveTask(n){if(n.target.classList.contains("TaskItemDelete")){let e=n.target.previousElementSibling.firstElementChild.innerHTML,t=a.getTasks();t.forEach(((n,a)=>{n.title==e&&t.splice(a,1),this.saveTask(t)}))}}static changeDoneState(n){if(n.target.classList.contains("TaskItemCheckbox")){let e=n.target.nextElementSibling.firstElementChild.innerHTML,t=a.getTasks(),i=t.findIndex((n=>n.title==e));t[i].done?(t[i].done=!1,console.log("chang",t[i].done)):t[i].done=!0,this.saveTask(t)}}static storeCategory(n){let e=a.getCategories();e.push(n),localStorage.setItem("categories",JSON.stringify(e))}static getCategories(){let n;return n=null===localStorage.getItem("categories")?[]:JSON.parse(localStorage.getItem("categories")),n}static deleteTasksFromCategory(n,e){n=n.filter((n=>n.tag!==e)),this.saveTask(n)}static LSdeleteCategory(n){let e=n.target.previousElementSibling.innerHTML,t=a.getCategories(),i=a.getTasks();t.map(((n,r)=>{n==e&&t.splice(r,1),localStorage.setItem("categories",JSON.stringify(t)),a.deleteTasksFromCategory(i,e)}))}static SaveNotes(n,e){let t=this.getTasks(),a=t.findIndex((e=>e.title==n));t[a].notes=e,this.saveTask(t)}}},133:(n,e,t)=>{t.d(e,{i:()=>i});var a=t(182);class i{constructor(n,e,t){this.title=n,this.category=e,this.done=!1,this.dueDate=null,this.dateCreated=t,this.notes=void 0}static addTaskPanel(n){const e=document.querySelector(".tasks");let t=document.createElement("div");t.classList.add("task","grid"),n.done?t.setAttribute("aria-disabled",!0):t.setAttribute("aria-disabled",!1),t.innerHTML=`\n    <button type="radio" role="checkbox" aria-checked="false" class="TaskItemCheckbox"></button>\n    <div class="task-content">\n      <p class="task-title">${n.title}</p>\n      <p class="task-category">${n.category}</p>\n    </div>\n    <button class="TaskItemDelete"></button>\n    `,e.appendChild(t)}static takeInputEvent(n){const e=n=>{const e=document.querySelector("#add-task-text").value;if(e.length>0){const t=new Date;let r=new i(e,n,t);i.addTaskPanel(r),a.h.addTaskToLS(r)}else alert("Please enter at least one character");i.clearInputField("#add-task-text")},t=document.querySelector(".add-task-container"),r=document.querySelector(".add-task-btn");t.addEventListener("keypress",(t=>{"Enter"===t.key&&e(n)})),r.addEventListener("mouseup",(()=>{e(n)}))}static clearInputField(n){document.querySelector(n).value=""}static taskDone(n){if(n.target.classList.contains("TaskItemCheckbox")){const e=n.target.parentElement;let t=n.target.nextElementSibling.firstElementChild.innerHTML;const i=a.h.getTasks();let r=i.findIndex((n=>n.title==t));i[r].done?e.setAttribute("aria-disabled",!1):e.setAttribute("aria-disabled",!0)}}static deleteTask(n){n.target.classList.contains("TaskItemDelete")&&n.target.parentElement.remove()}static displayTasks=()=>{a.h.getTasks().forEach((n=>{i.addTaskPanel(n)}))};static displayTasksCategorically=n=>{a.h.getTasks().map((e=>{e.category==n&&i.addTaskPanel(e)}))}}},747:(n,e,t)=>{t.d(e,{Z:()=>h});var a=t(379),i=t.n(a),r=t(795),o=t.n(r),A=t(569),s=t.n(A),d=t(565),l=t.n(d),c=t(216),u=t.n(c),p=t(589),C=t.n(p),m=t(626),g={};g.styleTagTransform=C(),g.setAttributes=l(),g.insert=s().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=u(),i()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;const h=n=>{const e=document.createElement("div");return e.classList.add("todo-panel"),e.innerHTML=`\n    <div class="title">\n      <h1>${n}</h1>\n    </div>\n    <div class="tasks">\n      \x3c!-- task 1 --\x3e\n      \n\n    </div>\n    <div class="add-task-container">\n      <input type="text" id="add-task-text" name="add-task-text">\n      <label class="add-task-label" for="add-task-text">Add new task</label>\n      <button class="add-task-btn btn"><span class="sr-only">add task btn</span></button>\n    </div>\n  `,e}},516:(n,e,t)=>{t.d(e,{L:()=>f});var a=t(379),i=t.n(a),r=t(795),o=t.n(r),A=t(569),s=t.n(A),d=t(565),l=t.n(d),c=t(216),u=t.n(c),p=t(589),C=t.n(p),m=t(17),g={};g.styleTagTransform=C(),g.setAttributes=l(),g.insert=s().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=u(),i()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;var h=t(747),b=t(426);class f{static header(){const n=document.createElement("header");return n.classList.add("primary-header"),n.innerHTML='\n    <button aria-expanded="false" class="mobile-toggle" aria-controls="categories-navigation"></button>\n    <div class="side-panel"> \n    \n    <ul id="categories-navigation" class="categories-navigation flex" data-visible="false">\n\n        <div class="categories-title">\n          <h2>Categories</h2>\n          <span class="add-categories" id="add-categories"></span>\n        </div>    \n        <li class="category">\n          <div>\n            <p class="category--title">All Tasks</p>\n            \n          </div> \n        </li>\n        <li class="category">\n          <div>\n            <p class="category--title">Work</p>\n            \n          </div> \n        </li>\n      </ul>\n    </div>\n    ',n}static hero(){const n=document.createElement("div");return n.classList.add("container","container-hero"),n.appendChild((0,h.Z)("All Tasks")),b.Z.displayCategories(),n}static clearHero(){document.querySelector(".todo-panel").textContent=""}static clearDescPanel(){document.querySelector(".taskDescPanel").remove()}static blurElements(){document.querySelector("main").classList.add("blur-document")}static deBlurElements(){document.querySelector("main").classList.remove("blur-document")}}},426:(n,e,t)=>{t.d(e,{Z:()=>o});var a=t(182),i=t(133),r=t(516);class o{static toggle(){const n=document.querySelector(".mobile-toggle"),e=document.querySelector(".categories-navigation");n.addEventListener("click",(()=>{"false"===e.getAttribute("data-visible")?(e.setAttribute("data-visible",!0),n.setAttribute("aria-expanded",!0)):(e.setAttribute("data-visible",!1),n.setAttribute("aria-expanded",!1))}))}static CategoryPopUpPanel(){const n=document.createElement("div");return n.classList.add("add-project-popUp"),n.setAttribute("project-pop-visible",!1),n.innerHTML='\n    <label for="add-project-text">Project name:</label>\n    <input type="text" id="add-project-text" name="add-project-text">\n    <div class="btns-popUp">\n      <button class="cancel-project-btn">Cancel</button>\n      <button class="add-project-btn">Add</button>\n    </div>\n    ',n}static showAddCategoryPanel(n){const e=document.querySelector(".add-project-popUp");"add-categories"==n.target.id&&(r.L.blurElements(),e.setAttribute("project-pop-visible",!0),o.cancelPopUpBtn())}static cancelPopUpBtn(){const n=document.querySelector(".add-project-popUp");document.querySelector(".cancel-project-btn").addEventListener("click",(()=>{n.setAttribute("project-pop-visible",!1),r.L.deBlurElements()}))}static addNewCategoryBtn(){const n=document.querySelector(".add-project-popUp"),e=()=>{let e=document.querySelector("#add-project-text").value;e=e.toLowerCase(),e.length<1?alert("Please enter at least one character"):(o.addCategory(e),a.h.storeCategory(e),r.L.deBlurElements()),i.i.clearInputField("#add-project-text"),n.setAttribute("project-pop-visible",!1)},t=document.querySelector(".add-project-btn");n.addEventListener("keypress",(n=>{"Enter"===n.key&&e()})),t.addEventListener("mouseup",(()=>{e()})),t.addEventListener("touchend",(()=>{e()}))}static addCategory(n){const e=document.createElement("li"),t=document.querySelector("#categories-navigation"),a=`<p class="category--title">${n}</p>`;e.classList.add("category"),e.innerHTML=`\n    <div>\n      ${a}\n      <button class="delete-category"></button>\n    </div>`,t.appendChild(e)}static displayCategories(){a.h.getCategories().map((n=>{o.addCategory(n)}))}static categoryPressed(n){n.target.classList.contains("category--title")&&o.newToDoPanel(n.target.innerHTML)}static newToDoPanel(n){const e=document.querySelector(".todo-panel"),t=document.querySelector(".categories-navigation"),a=document.querySelector(".mobile-toggle");r.L.clearHero(),t.setAttribute("data-visible",!1),a.setAttribute("aria-expanded",!1),e.innerHTML=`\n    <div class="title">\n    <h1>${n}</h1>\n    </div>\n    <div class="tasks">\n    \x3c!-- task 1 --\x3e\n\n      </div>\n    <div class="add-task-container">\n      <input type="text" id="add-task-text" name="add-task-text">\n      <label class="add-task-label" for="add-task-text">Add new task</label>\n      <button class="add-task-btn btn">Add</button>\n    </div>\n    `,"All Tasks"==n?(i.i.displayTasks(),i.i.takeInputEvent("general")):i.i.displayTasksCategorically(n),i.i.takeInputEvent(n)}static deleteCategory(n){n.target.classList.contains("delete-category")&&(n.target.parentElement.parentElement.remove(),a.h.LSdeleteCategory(n))}}},920:(n,e,t)=>{t.d(e,{Z:()=>v});var a=t(182),i=t(379),r=t.n(i),o=t(795),A=t.n(o),s=t(569),d=t.n(s),l=t(565),c=t.n(l),u=t(216),p=t.n(u),C=t(589),m=t.n(C),g=t(859),h={};h.styleTagTransform=m(),h.setAttributes=c(),h.insert=d().bind(null,"head"),h.domAPI=A(),h.insertStyleElement=p(),r()(g.Z,h),g.Z&&g.Z.locals&&g.Z.locals;var b=t(695),f=t(516);class v{static panel(n){const e=document.createElement("div");e.classList.add("taskDescPanel");const t=null===n.dueDate?"No Due date added":this.onScreenDateFormat(n.dueDate),a=void 0===n.notes?"":n.notes;return e.innerHTML=`\n    <button class="hide-desc-panel"></button>\n    <div class="title title--task">\n      <h1>${n.title}</h1>\n    </div>\n    <div class="set-date">\n      <label class="add-date-label" for="due-Date">Add due date</label>\n      <input type="date" id="due-Date" name="due-Date">\n      <button class="due-Date-btn"></button>\n    </div>\n    <div class="notes-panel">\n        <span class="textarea" role="textbox" contenteditable="true">${a}</span>\n    </div>\n    <div>\n      <p class="deadline">Deadline: ${t}</span></p>\n      <p>Date Created: ${this.onScreenDateFormat(n.dateCreated)}</p>\n    </div>\n    `,document.querySelector(".container-hero").appendChild(e),this.updateNotesOnIput(),e}static showPanel(n){if(n.target.parentElement.classList.contains("task-content")){const e=document.body,t=n.target.parentElement.firstElementChild.textContent,i=a.h.getSingleTask(t);e.appendChild(this.panel(i))}}static removePanel(n){n.target.classList.contains("hide-desc-panel")&&f.L.clearDescPanel()}static onScreenDateFormat(n){let e=new Date(n).toJSON().slice(0,10);return(0,b.Z)(new Date(e.replace(/-/g,"/")),"MM/dd/yyyy")}static getDate(n){if(n.target.classList.contains("due-Date-btn")){let e=document.querySelector("#due-Date").value;console.log(e),e=new Date(e);const t=n.target.parentElement.previousElementSibling.firstElementChild.textContent;a.h.addDate(t,e),this.updateDate(t)}}static updateDate(n){const e=document.querySelector(".deadline"),t=a.h.getSingleTask(n);e.innerHTML=`Deadline: ${this.onScreenDateFormat(t.dueDate)}`}static updateNotesOnIput(){const n=document.querySelector(".textarea"),e=n.parentElement.parentElement;n.addEventListener("keyup",(()=>{const n=document.querySelector(".textarea").innerHTML,t=e.getElementsByTagName("h1")[0].textContent;a.h.SaveNotes(t,n)}))}static updateNotes(n){if(n.target.classList.contains("add-task-note")){const e=document.querySelector(".textarea").innerHTML,t=n.target.parentElement.parentElement.firstElementChild.firstElementChild.textContent;console.log(t),console.log(e),a.h.SaveNotes(t,e),alert("notes saved")}}}},309:(n,e,t)=>{n.exports=t.p+"8cfb88b46484f4b9ee16.svg"},743:(n,e,t)=>{n.exports=t.p+"dd513233d599b3cefb96.svg"},867:(n,e,t)=>{n.exports=t.p+"ea8e03d2e76d86f43507.jpg"},179:(n,e,t)=>{n.exports=t.p+"34132d14dfa6bc3dfab4.svg"},155:(n,e,t)=>{n.exports=t.p+"2a6dcf09223357a4829d.svg"},818:(n,e,t)=>{n.exports=t.p+"28023af8943bbf29ac4f.svg"},96:(n,e,t)=>{n.exports=t.p+"af11555927ec5fef641b.svg"},935:(n,e,t)=>{n.exports=t.p+"6ed2cb5264b2240800b4.svg"},251:(n,e,t)=>{n.exports=t.p+"fd4f814d80e2e23ecb48.svg"},649:(n,e,t)=>{n.exports=t.p+"11a0880f45bca649f6a4.svg"},921:(n,e,t)=>{n.exports=t.p+"ca6dab938465408e4613.svg"},115:(n,e,t)=>{n.exports=t.p+"b9d42bb4d9163d6e719c.svg"}},e={};function t(a){var i=e[a];if(void 0!==i)return i.exports;var r=e[a]={id:a,exports:{}};return n[a](r,r.exports,t),r.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var a=e.getElementsByTagName("script");a.length&&(n=a[a.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(133),e=t(379),a=t.n(e),i=t(795),r=t.n(i),o=t(569),A=t.n(o),s=t(565),d=t.n(s),l=t(216),c=t.n(l),u=t(589),p=t.n(u),C=t(315),m={};m.styleTagTransform=p(),m.setAttributes=d(),m.insert=A().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=c(),a()(C.Z,m),C.Z&&C.Z.locals&&C.Z.locals;var g=t(182),h=t(516),b=t(426),f=t(920),v=t(2),k={};k.styleTagTransform=p(),k.setAttributes=d(),k.insert=A().bind(null,"head"),k.domAPI=r(),k.insertStyleElement=c(),a()(v.Z,k),v.Z&&v.Z.locals&&v.Z.locals;const w=document.body,y=document.createElement("main");w.appendChild(b.Z.CategoryPopUpPanel()),w.appendChild(h.L.header()),b.Z.toggle(),w.appendChild(y),y.appendChild(h.L.hero()),w.appendChild((()=>{const n=document.createElement("footer");return n.classList.add("footer"),n.innerHTML='\n  <div class="container container--footer">\n  <div class="socials">\n    <p>Follow Us</p>\n    <div class="social-icons" >\n      <a class="instagram" target="_blank" href="https://www.instagram.com/"></a>\n      </a>\n      <a class="twitter" target="_blank" href="https://twitter.com/home">\n      </a>\n    </div>\n  </div>\n  <a class="contribute" target="_blank" href="https://github.com/Parzivalcen/TodoAppModular">\nContribute</a>\n\n  <a class="gitHub" target="_blank" href="https://github.com/Parzivalcen"></a>\n\n  </div>',n})()),document.addEventListener("DOMContentLoaded",n.i.displayTasks()),document.addEventListener("click",(e=>{n.i.deleteTask(e),n.i.taskDone(e),g.h.LSremoveTask(e),g.h.changeDoneState(e),b.Z.categoryPressed(e),b.Z.showAddCategoryPanel(e),b.Z.deleteCategory(e),f.Z.showPanel(e),f.Z.getDate(e),f.Z.updateNotes(e),f.Z.removePanel(e)})),n.i.takeInputEvent("general"),b.Z.addNewCategoryBtn()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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c0UsRUFBQSx3QkFFakJrQixFQUFLeEYsWUFBWW1FLEVBQUEsWUFFakJHLEVBQUEsV0FFQWtCLEVBQUt4RixZQUFZeUgsR0FFakJBLEVBQUt6SCxZQUFZbUUsRUFBQSxVQUVqQnFCLEVBQUt4RixZQ3JCVSxNQUNiLE1BQU0wSCxFQUFTakksU0FBU1MsY0FBYyxVQW1CdEMsT0FsQkF3SCxFQUFPeEYsVUFBVXFCLElBQUksVUFDckJtRSxFQUFPcEYsVUFBWSx5aEJBaUJab0YsQ0FBTSxFRENFLElBRWpCakksU0FBU3NFLGlCQUFpQixtQkFBb0Isb0JBRzlDdEUsU0FBU3NFLGlCQUFpQixTQUFVblIsSUFDbEMsZUFBZ0JBLEdBQ2hCLGFBQWNBLEdBQ2RzTyxFQUFBLGVBQW1CdE8sR0FDbkJzTyxFQUFBLGtCQUFzQnRPLEdBQ3RCMFIsRUFBQSxrQkFBd0IxUixHQUN4QjBSLEVBQUEsdUJBQTZCMVIsR0FDN0IwUixFQUFBLGlCQUF1QjFSLEdBQ3ZCLGNBQXdCQSxHQUN4QixZQUFzQkEsR0FDdEIsZ0JBQTBCQSxHQUMxQixnQkFBMEJBLEVBQUUsSUFNOUIsbUJBQW9CLFdBQ3BCMFIsRUFBQSxxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG9hcHAvLi9zcmMvc3R5bGVzL3Nhc3NNb2R1bGVzL19mb290ZXIuc2NzcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL3N0eWxlcy9zYXNzTW9kdWxlcy9faG9tZS5zY3NzIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvc3R5bGVzL3Nhc3NNb2R1bGVzL190YXNrUGFuZWwuc2NzcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL3N0eWxlcy9zYXNzTW9kdWxlcy9fdG9kb1BhbmVsLnNjc3MiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9zdHlsZXMvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNEYXRlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2RlZmF1bHRMb2NhbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9TdG9yZVRhc2svc3RvcmUuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL2FkZFRhc2suanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9zdHlsZXMvc2Fzc01vZHVsZXMvX3RvZG9QYW5lbC5zY3NzPzMxYTYiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL2FkZFRvRG8uanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9zdHlsZXMvc2Fzc01vZHVsZXMvX2hvbWUuc2Nzcz9mZmY3Iiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvbW9kdWxlcy9ob21lLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvbW9kdWxlcy9zaWRlQmFyLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvc3R5bGVzL3Nhc3NNb2R1bGVzL190YXNrUGFuZWwuc2Nzcz9mMTJjIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvbW9kdWxlcy90YXNrUGFuZWwuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b2RvYXBwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG9hcHAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG9hcHAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly90b2RvYXBwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kb2FwcC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly90b2RvYXBwL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3RvZG9hcHAvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvc3R5bGVzL3N0eWxlLnNjc3M/ZTVkOCIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL3N0eWxlcy9zYXNzTW9kdWxlcy9fZm9vdGVyLnNjc3M/NTY1MiIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvbW9kdWxlcy9mb290ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uLy4uL2ltZ3MvaW5zdGFncmFtLnN2Z1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4uLy4uL2ltZ3MvdHdpdHRlci5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyA9IG5ldyBVUkwoXCIuLi8uLi9pbWdzL2dpdGh1Yi5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJvYm90bzp3Z2h0QDMwMDs1MDA7OTAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiosKjo6YWZ0ZXIsKjo6YmVmb3Jle21hcmdpbjowO3BhZGRpbmc6MDtib3gtc2l6aW5nOmJvcmRlci1ib3h9Ym9keSxoMSxoMixoMyxoNCBwLGZpZ3VyZSxwaWN0dXJle21hcmdpbjowfWgxLGgyLGgzLGg0LGg1e3RleHQtdHJhbnNmb3JtOmNhcGl0YWxpemU7Zm9udC13ZWlnaHQ6NDAwfWEsbGl7dGV4dC1kZWNvcmF0aW9uOm5vbmU7bGlzdC1zdHlsZTpub25lfWJvZHl7bGluZS1oZWlnaHQ6MS41O21pbi1oZWlnaHQ6MTAwdmg7Zm9udC1mYW1pbHk6XFxcIlJvYm90b1xcXCIsc2Fucy1zZXJpZjtncmlkLXRlbXBsYXRlLXJvd3M6LXdlYmtpdC1taW4tY29udGVudCAxZnI7Z3JpZC10ZW1wbGF0ZS1yb3dzOm1pbi1jb250ZW50IDFmcjtvdmVyZmxvdy14OmhpZGRlbn1pbWcscGljdHVyZXttYXgtd2lkdGg6MTAwJTtkaXNwbGF5OmJsb2NrfWlucHV0LGJ1dHRvbix0ZXh0YXJlYSxzZWxlY3R7Zm9udDppbmhlcml0Oy13ZWJraXQtYXBwZWFyYW5jZTpub25lO2FwcGVhcmFuY2U6bm9uZX1pbnB1dDpmb2N1c3tvdXRsaW5lOm5vbmU7YXBwZWFyYW5jZTpub25lfUBtZWRpYShwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpeyosKjo6YmVmb3JlLCo6OmFmdGVyey13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi4wMW1zICFpbXBvcnRhbnQ7YW5pbWF0aW9uLWR1cmF0aW9uOi4wMW1zICFpbXBvcnRhbnQ7LXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OjEgIWltcG9ydGFudDthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OjEgIWltcG9ydGFudDt0cmFuc2l0aW9uLWR1cmF0aW9uOi4wMXNtcyAhaW1wb3J0YW50O3Njcm9sbC1iZWhhdmlvcjphdXRvICFpbXBvcnRhbnR9fS5oaWRkZW57ZGlzcGxheTpub25lfS5pbmxpbmV7ZGlzcGxheTppbmxpbmUtYmxvY2t9LmZsZXh7ZGlzcGxheTpmbGV4O2dhcDp2YXIoLS1nYXAsIDFyZW0pfS5ncmlke2Rpc3BsYXk6Z3JpZDtnYXA6dmFyKC0tZ2FwLCAxcmVtKX0uZC1ibG9ja3tkaXNwbGF5OmJsb2NrfS5jb250YWluZXJ7cGFkZGluZy1pbmxpbmU6MHJlbTttYXJnaW4taW5saW5lOmF1dG87bWF4LXdpZHRoOmluaGVyaXR9LnNyLW9ubHl7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MXB4O2hlaWdodDoxcHg7cGFkZGluZzowO21hcmdpbjotMXB4O292ZXJmbG93OmhpZGRlbjtjbGlwOnJlY3QoMCwgMCwgMCwgMCk7d2hpdGUtc3BhY2U6bm93cmFwO2JvcmRlcjowfUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDBweCl7LmNvbnRhaW5lci0tZm9vdGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2FsaWduLWl0ZW1zOmNlbnRlcjttaW4taGVpZ2h0OjEwdmg7YmFja2dyb3VuZC1jb2xvcjojZjNkMmMxO2NvbG9yOiMyNzM1NWM7Ym9yZGVyLXRvcDoxcHggc29saWQgI2Y1ODJhZTtib3gtc2hhZG93OjBweCAtOHB4IDEwcHggLThweCByZ2JhKDc4LDUxLDc1LC4zKX0uY29udGFpbmVyLS1mb290ZXIgLnNvY2lhbC1pY29uc3tkaXNwbGF5OmZsZXh9LmNvbnRhaW5lci0tZm9vdGVyIC5zb2NpYWwtaWNvbnMgLmluc3RhZ3JhbSwuY29udGFpbmVyLS1mb290ZXIgLnNvY2lhbC1pY29ucyAudHdpdHRlcntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCk7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMjMsODgsLjkpOy13ZWJraXQtbWFzay1yZXBlYXQ6bm8tcmVwZWF0O21hc2stcmVwZWF0Om5vLXJlcGVhdDtjdXJzb3I6cG9pbnRlcjt3aWR0aDo1dmg7aGVpZ2h0OjV2aH0uY29udGFpbmVyLS1mb290ZXIgLnNvY2lhbC1pY29ucyAuaW5zdGFncmFtey13ZWJraXQtbWFzay1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO21hc2staW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKX0uY29udGFpbmVyLS1mb290ZXIgLnNvY2lhbC1pY29ucyAudHdpdHRlcnstd2Via2l0LW1hc2staW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKTttYXNrLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIil9LmNvbnRhaW5lci0tZm9vdGVyIGF7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Y29sb3I6cmdiYSgwLDIzLDg4LC45KX0uY29udGFpbmVyLS1mb290ZXIgLmdpdEh1YntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCk7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMjMsODgsLjkpOy13ZWJraXQtbWFzay1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fICsgXCIpO21hc2staW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKTstd2Via2l0LW1hc2stcmVwZWF0Om5vLXJlcGVhdDttYXNrLXJlcGVhdDpuby1yZXBlYXQ7Y3Vyc29yOnBvaW50ZXI7d2lkdGg6NHZoO2hlaWdodDo0dmh9fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvX2N1c3RvbS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3Nhc3NNb2R1bGVzL19mb290ZXIuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUE4QkEscUJBR0UsUUFBQSxDQUNBLFNBQUEsQ0FDQSxxQkFBQSxDQUdGLGtDQU9FLFFBQUEsQ0FHRixlQUtFLHlCQUFBLENBQ0EsZUFBQSxDQUdGLEtBRUUsb0JBQUEsQ0FDQSxlQUFBLENBR0YsS0FDRSxlQUFBLENBQ0EsZ0JBQUEsQ0FDQSwrQkFBQSxDQUVBLDBDQUFBLENBQ0Esa0NBQUEsQ0FDQSxpQkFBQSxDQUlGLFlBRUUsY0FBQSxDQUNBLGFBQUEsQ0FJRiw2QkFJRSxZQUFBLENBQ0EsdUJBQUEsQ0FDQSxlQUFBLENBR0YsWUFDRSxZQUFBLENBQ0EsZUFBQSxDQUtGLHVDQUVFLHFCQUdFLDJDQUFBLENBQ0EsbUNBQUEsQ0FDQSw4Q0FBQSxDQUNBLHNDQUFBLENBQ0EscUNBQUEsQ0FDQSwrQkFBQSxDQUFBLENBT0osUUFDRSxZQUFBLENBR0YsUUFDRSxvQkFBQSxDQUdGLE1BQ0UsWUFBQSxDQUNBLG9CQUFBLENBR0YsTUFDRSxZQUFBLENBQ0Esb0JBQUEsQ0FHRixTQUNFLGFBQUEsQ0FTRixXQUNFLG1CQUFBLENBQ0Esa0JBQUEsQ0FDQSxpQkFBQSxDQUlGLFNBQ0UsaUJBQUEsQ0FDQSxTQUFBLENBQ0EsVUFBQSxDQUNBLFNBQUEsQ0FDQSxXQUFBLENBQ0EsZUFBQSxDQUNBLHFCQUFBLENBQ0Esa0JBQUEsQ0FFQSxRQUFBLENDOUpGLG1DQUNFLG1CQUNFLFlBQUEsQ0FDQSw0QkFBQSxDQUNBLGtCQUFBLENBQ0EsZUFBQSxDQUNBLHdCRE5pQixDQ09qQixhRERXLENDRVgsNEJBQUEsQ0FDQSwrQ0FBQSxDQUdBLGlDQUNFLFlBQUEsQ0FDQSxzRkFDRSx3QkFBQSxDQUNBLGlDRFJjLENDU2QsNkJBQUEsQ0FDQSxxQkFBQSxDQUNBLGNBQUEsQ0FDQSxTQUFBLENBQ0EsVUFBQSxDQUdGLDRDQUNFLDBEQUFBLENBQ0Esa0RBQUEsQ0FFRiwwQ0FDRSwwREFBQSxDQUNBLGtEQUFBLENBSUoscUJBQ0Usb0JBQUEsQ0FDQSxzQkQ1QmdCLENDK0JsQiwyQkFDSSx3QkFBQSxDQUNBLGlDRGpDYyxDQ2tDZCwwREFBQSxDQUNBLGtEQUFBLENBQ0EsNkJBQUEsQ0FDQSxxQkFBQSxDQUNBLGNBQUEsQ0FDQSxTQUFBLENBQ0EsVUFBQSxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8vIFZhcmlhYmxlc1xcbiRwcmltYXJ5LWJhY2tncm91bmQ6ICNmM2QyYzE7XFxuJHByaW1hcnktYmFja2dyb3VuZC1vcGFjaXR5OiByZ2JhKDI0MywgMjEwLCAxOTMsIDAuOSk7XFxuJHByaW1hcnktYmFja2dyb3VuZC1saWdodDogI0ZGRTZEOTtcXG4kcHJpbWFyeS1iYWNrZ3JvdW5kLWxpZ2h0LW9wYWNpdHk6IHJnYmEoMjU1LCAyMzAsIDIxNywgMC45KTtcXG4kZm9udC10aXRsZS1jb2xvcjogIzAwMTg1ODtcXG4kZm9udC10aXRsZS1ncmV5OiAjMzQzRjVFO1xcbiRmb250LXAtY29sb3I6ICMyNzM1NUM7XFxuJGZvbnQtcC1jb2xvci1saWdodDogI2U2ZGZkMDtcXG4kZm9udC10aXRsZS1iZy1jb2xvcjogcmdiYSgwLCAyMywgODgsIDAuOSk7XFxuJHNlY29uZGFyeS1iYWNrZ3JvdW5kOiAjZmVmNmU0O1xcbiRzZWNvbmRhcnktYmFja2dyb3VuZC1kYXJrOiAjRjVFRERDO1xcbiRzZWNvbmRhcnktYmFja2dyb3VuZC1kYXJrLW9wYWNpdHk6IHJnYmEoMjQ1LCAyMzcsIDIyMCwgMC45KTtcXG5cXG4kaGlnaC1saWdoLWljb246ICNmNTgyYWU7XFxuJHJlZDogI0Y5Njk2MTtcXG5cXG4kbGV0dGVyLXNwYWNpbmc6IDAuMDFlbTtcXG5cXG5cXG5cXG5cXG4vKiBGT05UIEZBTUlMWSAqL1xcbkBpbXBvcnQgdXJsKFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJvYm90bzp3Z2h0QDMwMDs1MDA7OTAwJmRpc3BsYXk9c3dhcFxcXCIpO1xcbi8qXFxuPT09PT09PT09PT09PT09IFxcbkdsb2JhbCBTdHlsZXMvIFJlc2V0XFxuPT09PT09PT09PT09PT09XFxuKi9cXG5cXG4qLFxcbio6OmFmdGVyLFxcbio6OmJlZm9yZSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuYm9keSxcXG5oMSxcXG5oMixcXG5oMyxcXG5oNCBwLFxcbmZpZ3VyZSxcXG5waWN0dXJlIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuaDEsXFxuaDIsXFxuaDMsXFxuaDQsXFxuaDUge1xcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG5hLFxcbmxpIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmJvZHkge1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG9cXFwiLCBzYW5zLXNlcmlmO1xcblxcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAtd2Via2l0LW1pbi1jb250ZW50IDFmcjtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogbWluLWNvbnRlbnQgMWZyO1xcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xcbn1cXG5cXG4vKiBpbWdzIGVhc2llciB0byB3b3JrIHdpdGggKi9cXG5pbWcsXFxucGljdHVyZSB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLyogZm9ybSBlbGVtZW50cyBlYXNpZXIgdG8gd29yayB3aXRoICovXFxuaW5wdXQsXFxuYnV0dG9uLFxcbnRleHRhcmVhLFxcbnNlbGVjdCB7XFxuICBmb250OiBpbmhlcml0O1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgYXBwZWFyYW5jZTogbm9uZTtcXG4gIFxcbn1cXG5pbnB1dDpmb2N1c3tcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbn1cXG5cXG5cXG4vKiByZW1vdmUgYW5pbWF0aW9uIGZvciBwZW9wbGUgd2hvIHR1cm5lZCB0aGVtIG9mZiAqL1xcbkBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKSB7XFxuXFxuICAqLFxcbiAgKjo6YmVmb3JlLFxcbiAgKjo6YWZ0ZXIge1xcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMC4wMW1zICFpbXBvcnRhbnQ7XFxuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC4wMW1zICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMSAhaW1wb3J0YW50O1xcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAxICFpbXBvcnRhbnQ7XFxuICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuMDFzbXMgIWltcG9ydGFudDtcXG4gICAgc2Nyb2xsLWJlaGF2aW9yOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbi8qID09PT09PT09PVxcbnV0aWxpdHkgY2xhc2VzIFxcbj09PT09PT09PT09ICovXFxuLmhpZGRlbiB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uaW5saW5lIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLmZsZXgge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogdmFyKC0tZ2FwLCAxcmVtKTtcXG59XFxuXFxuLmdyaWQge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdhcDogdmFyKC0tZ2FwLCAxcmVtKTtcXG59XFxuXFxuLmQtYmxvY2sge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcblxcbi8qIFNQQUNJTkcgLmZsb3cgKi9cXG4vKiBTZWNsZWN0IGFsbCB0aGUgZWxlbWVudHMgb2YgYSBkaXZpZGVyIGV4Y2VwdCB0aGUgZmlyc3QgQ2hpbGQgKi9cXG4vKiBJdCBpcyB1c2UgdG8gbWFrZSB0aGUgdG9wIGFuZCBib3R0b24gbGluZSBoZWlnaHRzIGFuZCBib3JkZXJzIHRoZSBzYW1lICovXFxuLyogV2hlcmUgaXMgYSB3YXkgdG8gZ3JvdXAgdGhpbmdzLCBpcyBsb3dlciBvbiBzcGVjaWZpY3kgc28gd2UgZG9udCBvdmVyd3JpdGUgdGhpbmdzKi9cXG5cXG4uY29udGFpbmVyIHtcXG4gIHBhZGRpbmctaW5saW5lOiAwcmVtO1xcbiAgbWFyZ2luLWlubGluZTogYXV0bztcXG4gIG1heC13aWR0aDogaW5oZXJpdDtcXG59XFxuXFxuLyogZm9yIHRoZSB2aXN1YWxseSBpbXBhaXJlZCAtSGlkZSBDb250dGVuLSAqL1xcbi5zci1vbmx5IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxcHg7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IC0xcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgY2xpcDogcmVjdCgwLCAwLCAwLCAwKTtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAvKiBhZGRlZCBsaW5lICovXFxuICBib3JkZXI6IDA7XFxufVxcblxcblwiLFwiQHVzZSAnLi4vY3VzdG9tJyBhcyAqO1xcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDBweCkge1xcbiAgLmNvbnRhaW5lci0tZm9vdGVye1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgbWluLWhlaWdodDogMTB2aDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnktYmFja2dyb3VuZDtcXG4gICAgY29sb3I6ICRmb250LXAtY29sb3I7XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAkaGlnaC1saWdoLWljb247XFxuICAgIGJveC1zaGFkb3c6IDBweCAtOHB4IDEwcHggLThweCByZ2JhKDc4LCA1MSwgNzUsIDAuMyk7XFxuXFxuICAgIC8qU09DSUFMIElDT05TKi8gXFxuICAgIC5zb2NpYWwtaWNvbnN7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAuaW5zdGFncmFtLCAudHdpdHRlcntcXG4gICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGZvbnQtdGl0bGUtYmctY29sb3I7XFxuICAgICAgICAtd2Via2l0LW1hc2stcmVwZWF0OiBuby1yZXBlYXQ7XFxuICAgICAgICBtYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgd2lkdGg6IDV2aDtcXG4gICAgICAgIGhlaWdodDogNXZoO1xcbiAgICAgXFxuICAgICAgfVxcbiAgICAgIC5pbnN0YWdyYW17XFxuICAgICAgICAtd2Via2l0LW1hc2staW1hZ2U6IHVybCguLi8uLi9pbWdzL2luc3RhZ3JhbS5zdmcpIDtcXG4gICAgICAgIG1hc2staW1hZ2U6IHVybCguLi8uLi9pbWdzL2luc3RhZ3JhbS5zdmcpIDtcXG4gICAgICB9XFxuICAgICAgLnR3aXR0ZXJ7XFxuICAgICAgICAtd2Via2l0LW1hc2staW1hZ2U6IHVybCguLi8uLi9pbWdzL3R3aXR0ZXIuc3ZnKSA7XFxuICAgICAgICBtYXNrLWltYWdlOiB1cmwoLi4vLi4vaW1ncy90d2l0dGVyLnN2ZykgO1xcbiAgICBcXG4gICAgICB9XFxuICAgIH1cXG4gICAgYSB7XFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgICAgIGNvbG9yOiAkZm9udC10aXRsZS1iZy1jb2xvcjtcXG4gICAgfVxcblxcbiAgICAuZ2l0SHVie1xcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZm9udC10aXRsZS1iZy1jb2xvcjtcXG4gICAgICAgIC13ZWJraXQtbWFzay1pbWFnZTogdXJsKC4uLy4uL2ltZ3MvZ2l0aHViLnN2ZykgO1xcbiAgICAgICAgbWFzay1pbWFnZTogdXJsKC4uLy4uL2ltZ3MvZ2l0aHViLnN2ZykgO1xcbiAgICAgICAgLXdlYmtpdC1tYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICAgICAgbWFzay1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICAgIHdpZHRoOiA0dmg7XFxuICAgICAgICBoZWlnaHQ6IDR2aDtcXG4gICAgICB9XFxuICAgIFxcbiAgICBcXG4gIH1cXG4gIFxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uLy4uL2ltZ3MvYmctZGVza3RvcC1waW5rLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4uLy4uL2ltZ3MvaGFtTWVudS5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyA9IG5ldyBVUkwoXCIuLi8uLi9pbWdzL2Nsb3NlTWVudS5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyA9IG5ldyBVUkwoXCIuLi8uLi9pbWdzL3BsdXMuc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18gPSBuZXcgVVJMKFwiLi4vLi4vaW1ncy9taW51c0RlbGV0ZS5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJvYm90bzp3Z2h0QDMwMDs1MDA7OTAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKiwqOjphZnRlciwqOjpiZWZvcmV7bWFyZ2luOjA7cGFkZGluZzowO2JveC1zaXppbmc6Ym9yZGVyLWJveH1ib2R5LGgxLGgyLGgzLGg0IHAsZmlndXJlLHBpY3R1cmV7bWFyZ2luOjB9aDEsaDIsaDMsaDQsaDV7dGV4dC10cmFuc2Zvcm06Y2FwaXRhbGl6ZTtmb250LXdlaWdodDo0MDB9YSxsaXt0ZXh0LWRlY29yYXRpb246bm9uZTtsaXN0LXN0eWxlOm5vbmV9Ym9keXtsaW5lLWhlaWdodDoxLjU7bWluLWhlaWdodDoxMDB2aDtmb250LWZhbWlseTpcXFwiUm9ib3RvXFxcIixzYW5zLXNlcmlmO2dyaWQtdGVtcGxhdGUtcm93czotd2Via2l0LW1pbi1jb250ZW50IDFmcjtncmlkLXRlbXBsYXRlLXJvd3M6bWluLWNvbnRlbnQgMWZyO292ZXJmbG93LXg6aGlkZGVufWltZyxwaWN0dXJle21heC13aWR0aDoxMDAlO2Rpc3BsYXk6YmxvY2t9aW5wdXQsYnV0dG9uLHRleHRhcmVhLHNlbGVjdHtmb250OmluaGVyaXQ7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lfWlucHV0OmZvY3Vze291dGxpbmU6bm9uZTthcHBlYXJhbmNlOm5vbmV9QG1lZGlhKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSl7KiwqOjpiZWZvcmUsKjo6YWZ0ZXJ7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246LjAxbXMgIWltcG9ydGFudDthbmltYXRpb24tZHVyYXRpb246LjAxbXMgIWltcG9ydGFudDstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MSAhaW1wb3J0YW50O2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MSAhaW1wb3J0YW50O3RyYW5zaXRpb24tZHVyYXRpb246LjAxc21zICFpbXBvcnRhbnQ7c2Nyb2xsLWJlaGF2aW9yOmF1dG8gIWltcG9ydGFudH19LmhpZGRlbntkaXNwbGF5Om5vbmV9LmlubGluZXtkaXNwbGF5OmlubGluZS1ibG9ja30uZmxleHtkaXNwbGF5OmZsZXg7Z2FwOnZhcigtLWdhcCwgMXJlbSl9LmdyaWR7ZGlzcGxheTpncmlkO2dhcDp2YXIoLS1nYXAsIDFyZW0pfS5kLWJsb2Nre2Rpc3BsYXk6YmxvY2t9LmNvbnRhaW5lcntwYWRkaW5nLWlubGluZTowcmVtO21hcmdpbi1pbmxpbmU6YXV0bzttYXgtd2lkdGg6aW5oZXJpdH0uc3Itb25seXtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxcHg7aGVpZ2h0OjFweDtwYWRkaW5nOjA7bWFyZ2luOi0xcHg7b3ZlcmZsb3c6aGlkZGVuO2NsaXA6cmVjdCgwLCAwLCAwLCAwKTt3aGl0ZS1zcGFjZTpub3dyYXA7Ym9yZGVyOjB9QG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMHB4KXsuY29udGFpbmVyLWhlcm97YmFja2dyb3VuZC1jb2xvcjojZjNkMmMxO2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1zaXplOmNvdmVyO2hlaWdodDo5MHZoO2Rpc3BsYXk6Z3JpZDtwbGFjZS1pdGVtczpjZW50ZXJ9LmJsdXItZG9jdW1lbnR7ZmlsdGVyOmJsdXIoMjBweCl9fUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDBweCl7Lm1vYmlsZS10b2dnbGV7ZGlzcGxheTpibG9jaztiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwyMyw4OCwuOSk7LXdlYmtpdC1tYXNrLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIik7bWFzay1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpOy13ZWJraXQtbWFzay1yZXBlYXQ6bm8tcmVwZWF0O21hc2stcmVwZWF0Om5vLXJlcGVhdDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoycmVtO2hlaWdodDoycmVtO2xlZnQ6MXJlbTttYXJnaW4tdG9wOjFyZW07Ym9yZGVyOjA7ei1pbmRleDoxMDAwO2N1cnNvcjpwb2ludGVyfS5tb2JpbGUtdG9nZ2xlW2FyaWEtZXhwYW5kZWQ9dHJ1ZV17YmFja2dyb3VuZC1jb2xvcjojZjk2OTYxOy13ZWJraXQtbWFzay1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fICsgXCIpO21hc2staW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKX0uY2F0ZWdvcmllcy1uYXZpZ2F0aW9ue3Bvc2l0aW9uOmZpeGVkO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1jb250ZW50OmNlbnRlcjtpbnNldDowIDIwJSAwIDA7ei1pbmRleDo5OTk7cGFkZGluZy10b3A6OHZoO3BhZGRpbmctbGVmdDo4dmg7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMjMsODgsLjkpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKTt0cmFuc2l0aW9uOi40cyBlYXNlLWluLW91dDtiYWNrZHJvcC1maWx0ZXI6Ymx1cig4cHgpO2NvbG9yOiNmNWVkZGM7bWF4LWhlaWdodDo5MHZofS5jYXRlZ29yaWVzLW5hdmlnYXRpb24gLmNhdGVnb3JpZXMtdGl0bGV7ZGlzcGxheTpncmlkO2FsaWduLWl0ZW1zOmNlbnRlcjtncmlkLXRlbXBsYXRlLWNvbHVtbnM6MWZyIDFmcjtnYXA6LjVyZW19LmNhdGVnb3JpZXMtbmF2aWdhdGlvbiAuY2F0ZWdvcmllcy10aXRsZSAuYWRkLWNhdGVnb3JpZXN7YmFja2dyb3VuZC1jb2xvcjojZjU4MmFlOy13ZWJraXQtbWFzay1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fICsgXCIpO21hc2staW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyArIFwiKTstd2Via2l0LW1hc2stcmVwZWF0Om5vLXJlcGVhdDttYXNrLXJlcGVhdDpuby1yZXBlYXQ7d2lkdGg6MS41cmVtO2hlaWdodDoxLjVyZW07Ym9yZGVyOjA7ei1pbmRleDoxMDAwO2N1cnNvcjpwb2ludGVyfS5jYXRlZ29yaWVzLW5hdmlnYXRpb24gLmNhdGVnb3J5OmhvdmVye2N1cnNvcjpwb2ludGVyfS5jYXRlZ29yaWVzLW5hdmlnYXRpb24gLmNhdGVnb3J5IC5jYXRlZ29yeS0tdGl0bGV7dGV4dC10cmFuc2Zvcm06Y2FwaXRhbGl6ZX0uY2F0ZWdvcmllcy1uYXZpZ2F0aW9uIC5jYXRlZ29yeSBkaXZ7ZGlzcGxheTpncmlkO2dhcDouNGVtO2dyaWQtdGVtcGxhdGUtY29sdW1uczoxZnIgMWZyO2FsaWduLWl0ZW1zOmNlbnRlcn0uY2F0ZWdvcmllcy1uYXZpZ2F0aW9uIC5jYXRlZ29yeSBkaXYgLmRlbGV0ZS1jYXRlZ29yeXt3aWR0aDoxcmVtO2hlaWdodDoxcmVtO2JhY2tncm91bmQtY29sb3I6I2Y5Njk2MTstd2Via2l0LW1hc2staW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyArIFwiKTttYXNrLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18gKyBcIik7LXdlYmtpdC1tYXNrLXJlcGVhdDpuby1yZXBlYXQ7bWFzay1yZXBlYXQ6bm8tcmVwZWF0O2JvcmRlcjowO2N1cnNvcjpwb2ludGVyfS5jYXRlZ29yaWVzLW5hdmlnYXRpb25bZGF0YS12aXNpYmxlPXRydWVde3RyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKX0uYWRkLXByb2plY3QtcG9wVXB7ZGlzcGxheTpub25lO2JveC1zaGFkb3c6LTFweCAwcHggM3B4IDRweCByZ2JhKDAsMCwwLC4zNik7YmFja2dyb3VuZC1jb2xvcjojZjNkMmMxO21heC13aWR0aDo0MHZoO3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1yYWRpdXM6MTBweDtwYWRkaW5nLXRvcDoycmVtO3BhZGRpbmctaW5saW5lOjJyZW07cG9zaXRpb246YWJzb2x1dGU7dG9wOjIwJTtsZWZ0OjUwJTt6LWluZGV4OjEwMDU7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAyMCUpO2NvbG9yOiMyNzM1NWM7bGV0dGVyLXNwYWNpbmc6LjAxZW19LmFkZC1wcm9qZWN0LXBvcFVwIGlucHV0LC5hZGQtcHJvamVjdC1wb3BVcCBidXR0b257Ym9yZGVyLXJhZGl1czoxMHB4O2JvcmRlcjpub25lfS5hZGQtcHJvamVjdC1wb3BVcCBpbnB1dHtwYWRkaW5nLWlubGluZToxcmVtO21hcmdpbi1pbmxpbmU6YXV0bzt3aWR0aDozMHZofS5hZGQtcHJvamVjdC1wb3BVcCAuYnRucy1wb3BVcHttYXJnaW4tdG9wOjFyZW07bWFyZ2luLWJvdHRvbTouNXJlbTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZH0uYWRkLXByb2plY3QtcG9wVXAgLmJ0bnMtcG9wVXAgKntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCl9LmFkZC1wcm9qZWN0LXBvcFVwIC5idG5zLXBvcFVwIC5hZGQtcHJvamVjdC1idG57Y29sb3I6cmdiYSgwLDIzLDg4LC45KTtsZXR0ZXItc3BhY2luZzouMDFlbTtjdXJzb3I6cG9pbnRlcn0uYWRkLXByb2plY3QtcG9wVXAgLmJ0bnMtcG9wVXAgLmNhbmNlbC1wcm9qZWN0LWJ0bntjb2xvcjojZjk2OTYxO3RleHQtc2hhZG93OjFweCAuNHB4IHJnYmEoMCwyMyw4OCwuOSk7bGV0dGVyLXNwYWNpbmc6LjAxZW07Y3Vyc29yOnBvaW50ZXJ9LmFkZC1wcm9qZWN0LXBvcFVwW3Byb2plY3QtcG9wLXZpc2libGU9dHJ1ZV17ZGlzcGxheTpncmlkfX1AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5MDBweCl7LmNhdGVnb3JpZXMtbmF2aWdhdGlvbnt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7aW5zZXQ6MCA3MCUgMCAwO2JveC1zaGFkb3c6MTFweCAzcHggM3B4IC04cHggcmdiYSgwLDAsMCwuNSl9Lm1vYmlsZS10b2dnbGV7ZGlzcGxheTpub25lfX1AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjAwcHgpey5jYXRlZ29yaWVzLW5hdmlnYXRpb257aW5zZXQ6MCA3NSUgMCAwfX1AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNjAwcHgpey5jYXRlZ29yaWVzLW5hdmlnYXRpb257aW5zZXQ6MCA4MCUgMCAwfX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LWhlaWdodDogNTk2cHgpey5hZGQtcHJvamVjdC1wb3BVcHttYXgtd2lkdGg6OTB2aH19XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9fY3VzdG9tLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvc2Fzc01vZHVsZXMvX2hvbWUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUE4QkEscUJBR0UsUUFBQSxDQUNBLFNBQUEsQ0FDQSxxQkFBQSxDQUdGLGtDQU9FLFFBQUEsQ0FHRixlQUtFLHlCQUFBLENBQ0EsZUFBQSxDQUdGLEtBRUUsb0JBQUEsQ0FDQSxlQUFBLENBR0YsS0FDRSxlQUFBLENBQ0EsZ0JBQUEsQ0FDQSwrQkFBQSxDQUVBLDBDQUFBLENBQ0Esa0NBQUEsQ0FDQSxpQkFBQSxDQUlGLFlBRUUsY0FBQSxDQUNBLGFBQUEsQ0FJRiw2QkFJRSxZQUFBLENBQ0EsdUJBQUEsQ0FDQSxlQUFBLENBR0YsWUFDRSxZQUFBLENBQ0EsZUFBQSxDQUtGLHVDQUVFLHFCQUdFLDJDQUFBLENBQ0EsbUNBQUEsQ0FDQSw4Q0FBQSxDQUNBLHNDQUFBLENBQ0EscUNBQUEsQ0FDQSwrQkFBQSxDQUFBLENBT0osUUFDRSxZQUFBLENBR0YsUUFDRSxvQkFBQSxDQUdGLE1BQ0UsWUFBQSxDQUNBLG9CQUFBLENBR0YsTUFDRSxZQUFBLENBQ0Esb0JBQUEsQ0FHRixTQUNFLGFBQUEsQ0FTRixXQUNFLG1CQUFBLENBQ0Esa0JBQUEsQ0FDQSxpQkFBQSxDQUlGLFNBQ0UsaUJBQUEsQ0FDQSxTQUFBLENBQ0EsVUFBQSxDQUNBLFNBQUEsQ0FDQSxXQUFBLENBQ0EsZUFBQSxDQUNBLHFCQUFBLENBQ0Esa0JBQUEsQ0FFQSxRQUFBLENDMUpGLG1DQUNFLGdCQUNFLHdCRE5pQixDQ09qQix3REFBQSxDQUNBLDJCQUFBLENBQ0EscUJBQUEsQ0FDQSxXQUFBLENBQ0EsWUFBQSxDQUNBLGtCQUFBLENBR0YsZUFDRSxpQkFBQSxDQUFBLENBTUosbUNBQ0UsZUFDRSxhQUFBLENBRUEsaUNEbEJrQixDQ21CbEIsMERBQUEsQ0FDQSxrREFBQSxDQUNBLDZCQUFBLENBQ0EscUJBQUEsQ0FDQSxpQkFBQSxDQUNBLFVBQUEsQ0FDQSxXQUFBLENBQ0EsU0FBQSxDQUNBLGVBQUEsQ0FDQSxRQUFBLENBQ0EsWUFBQSxDQUNBLGNBQUEsQ0FFQSxtQ0FDRSx3QkQzQkEsQ0M0QkEsMERBQUEsQ0FDQSxrREFBQSxDQUlKLHVCQUNFLGNBQUEsQ0FDQSxxQkFBQSxDQUNBLG9CQUFBLENBQ0EsZUFBQSxDQUNBLFdBQUEsQ0FDQSxlQUFBLENBQ0EsZ0JBQUEsQ0FDQSxpQ0QvQ2tCLENDZ0RsQiwyQkFBQSxDQUNBLDBCQUFBLENBRUEseUJBQUEsQ0FDQSxhRGxEd0IsQ0NtRHhCLGVBQUEsQ0FHQSx5Q0FDRSxZQUFBLENBQ0Esa0JBQUEsQ0FDQSw2QkFBQSxDQUNBLFNBQUEsQ0FFQSx5REFDRSx3QkQxRFMsQ0MyRFQsMERBQUEsQ0FDQSxrREFBQSxDQUNBLDZCQUFBLENBQ0EscUJBQUEsQ0FDQSxZQUFBLENBQ0EsYUFBQSxDQUNBLFFBQUEsQ0FDQSxZQUFBLENBQ0EsY0FBQSxDQUtGLHVDQUNFLGNBQUEsQ0FHRixrREFDRSx5QkFBQSxDQUVGLHFDQUNFLFlBQUEsQ0FDQSxRQUFBLENBQ0EsNkJBQUEsQ0FDQSxrQkFBQSxDQUVBLHNEQUNFLFVBQUEsQ0FDQSxXQUFBLENBQ0Esd0JEdkZKLENDd0ZJLDBEQUFBLENBQ0Esa0RBQUEsQ0FDQSw2QkFBQSxDQUNBLHFCQUFBLENBQ0EsUUFBQSxDQUNBLGNBQUEsQ0FRTiwwQ0FDRSx3QkFBQSxDQU9KLG1CQUNFLFlBQUEsQ0FDQSwyQ0FBQSxDQUNBLHdCRDlIaUIsQ0MrSGpCLGNBQUEsQ0FDQSxpQkFBQSxDQUNBLGtCQUFBLENBQ0EsZ0JBQUEsQ0FDQSxtQkFBQSxDQUNBLGlCQUFBLENBQ0EsT0FBQSxDQUNBLFFBQUEsQ0FDQSxZQUFBLENBQ0EsOEJBQUEsQ0FFQSxhRHBJVyxDQ3FJWCxvQkQzSGEsQ0M2SGIsbURBQ0Usa0JBQUEsQ0FDQSxXQUFBLENBRUYseUJBQ0UsbUJBQUEsQ0FDQSxrQkFBQSxDQUNBLFVBQUEsQ0FHRiwrQkFDRSxlQUFBLENBQ0EsbUJBQUEsQ0FDQSxZQUFBLENBQ0EsNEJBQUEsQ0FDQSxpQ0FDRSx3QkFBQSxDQUVGLGdEQUNFLHNCRHhKYyxDQ3lKZCxvQkRqSlMsQ0NrSlQsY0FBQSxDQUVGLG1EQUNFLGFEdkpGLENDd0pFLHFDQUFBLENBQ0Esb0JEdkpTLENDd0pULGNBQUEsQ0FLSiw2Q0FDRSxZQUFBLENBQUEsQ0FNTixxQ0FDRSx1QkFDRSx3QkFBQSxDQUNBLGVBQUEsQ0FDQSwyQ0FBQSxDQUdGLGVBQ0UsWUFBQSxDQUFBLENBS0osc0NBQ0UsdUJBQ0UsZUFBQSxDQUFBLENBR0osc0NBQ0UsdUJBQ0UsZUFBQSxDQUFBLENBR0osc0NBQ0UsbUJBQ0UsY0FBQSxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8vIFZhcmlhYmxlc1xcbiRwcmltYXJ5LWJhY2tncm91bmQ6ICNmM2QyYzE7XFxuJHByaW1hcnktYmFja2dyb3VuZC1vcGFjaXR5OiByZ2JhKDI0MywgMjEwLCAxOTMsIDAuOSk7XFxuJHByaW1hcnktYmFja2dyb3VuZC1saWdodDogI0ZGRTZEOTtcXG4kcHJpbWFyeS1iYWNrZ3JvdW5kLWxpZ2h0LW9wYWNpdHk6IHJnYmEoMjU1LCAyMzAsIDIxNywgMC45KTtcXG4kZm9udC10aXRsZS1jb2xvcjogIzAwMTg1ODtcXG4kZm9udC10aXRsZS1ncmV5OiAjMzQzRjVFO1xcbiRmb250LXAtY29sb3I6ICMyNzM1NUM7XFxuJGZvbnQtcC1jb2xvci1saWdodDogI2U2ZGZkMDtcXG4kZm9udC10aXRsZS1iZy1jb2xvcjogcmdiYSgwLCAyMywgODgsIDAuOSk7XFxuJHNlY29uZGFyeS1iYWNrZ3JvdW5kOiAjZmVmNmU0O1xcbiRzZWNvbmRhcnktYmFja2dyb3VuZC1kYXJrOiAjRjVFRERDO1xcbiRzZWNvbmRhcnktYmFja2dyb3VuZC1kYXJrLW9wYWNpdHk6IHJnYmEoMjQ1LCAyMzcsIDIyMCwgMC45KTtcXG5cXG4kaGlnaC1saWdoLWljb246ICNmNTgyYWU7XFxuJHJlZDogI0Y5Njk2MTtcXG5cXG4kbGV0dGVyLXNwYWNpbmc6IDAuMDFlbTtcXG5cXG5cXG5cXG5cXG4vKiBGT05UIEZBTUlMWSAqL1xcbkBpbXBvcnQgdXJsKFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJvYm90bzp3Z2h0QDMwMDs1MDA7OTAwJmRpc3BsYXk9c3dhcFxcXCIpO1xcbi8qXFxuPT09PT09PT09PT09PT09IFxcbkdsb2JhbCBTdHlsZXMvIFJlc2V0XFxuPT09PT09PT09PT09PT09XFxuKi9cXG5cXG4qLFxcbio6OmFmdGVyLFxcbio6OmJlZm9yZSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuYm9keSxcXG5oMSxcXG5oMixcXG5oMyxcXG5oNCBwLFxcbmZpZ3VyZSxcXG5waWN0dXJlIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuaDEsXFxuaDIsXFxuaDMsXFxuaDQsXFxuaDUge1xcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG5hLFxcbmxpIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmJvZHkge1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG9cXFwiLCBzYW5zLXNlcmlmO1xcblxcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAtd2Via2l0LW1pbi1jb250ZW50IDFmcjtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogbWluLWNvbnRlbnQgMWZyO1xcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xcbn1cXG5cXG4vKiBpbWdzIGVhc2llciB0byB3b3JrIHdpdGggKi9cXG5pbWcsXFxucGljdHVyZSB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLyogZm9ybSBlbGVtZW50cyBlYXNpZXIgdG8gd29yayB3aXRoICovXFxuaW5wdXQsXFxuYnV0dG9uLFxcbnRleHRhcmVhLFxcbnNlbGVjdCB7XFxuICBmb250OiBpbmhlcml0O1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgYXBwZWFyYW5jZTogbm9uZTtcXG4gIFxcbn1cXG5pbnB1dDpmb2N1c3tcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbn1cXG5cXG5cXG4vKiByZW1vdmUgYW5pbWF0aW9uIGZvciBwZW9wbGUgd2hvIHR1cm5lZCB0aGVtIG9mZiAqL1xcbkBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKSB7XFxuXFxuICAqLFxcbiAgKjo6YmVmb3JlLFxcbiAgKjo6YWZ0ZXIge1xcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMC4wMW1zICFpbXBvcnRhbnQ7XFxuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC4wMW1zICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMSAhaW1wb3J0YW50O1xcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAxICFpbXBvcnRhbnQ7XFxuICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuMDFzbXMgIWltcG9ydGFudDtcXG4gICAgc2Nyb2xsLWJlaGF2aW9yOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbi8qID09PT09PT09PVxcbnV0aWxpdHkgY2xhc2VzIFxcbj09PT09PT09PT09ICovXFxuLmhpZGRlbiB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uaW5saW5lIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLmZsZXgge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogdmFyKC0tZ2FwLCAxcmVtKTtcXG59XFxuXFxuLmdyaWQge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdhcDogdmFyKC0tZ2FwLCAxcmVtKTtcXG59XFxuXFxuLmQtYmxvY2sge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcblxcbi8qIFNQQUNJTkcgLmZsb3cgKi9cXG4vKiBTZWNsZWN0IGFsbCB0aGUgZWxlbWVudHMgb2YgYSBkaXZpZGVyIGV4Y2VwdCB0aGUgZmlyc3QgQ2hpbGQgKi9cXG4vKiBJdCBpcyB1c2UgdG8gbWFrZSB0aGUgdG9wIGFuZCBib3R0b24gbGluZSBoZWlnaHRzIGFuZCBib3JkZXJzIHRoZSBzYW1lICovXFxuLyogV2hlcmUgaXMgYSB3YXkgdG8gZ3JvdXAgdGhpbmdzLCBpcyBsb3dlciBvbiBzcGVjaWZpY3kgc28gd2UgZG9udCBvdmVyd3JpdGUgdGhpbmdzKi9cXG5cXG4uY29udGFpbmVyIHtcXG4gIHBhZGRpbmctaW5saW5lOiAwcmVtO1xcbiAgbWFyZ2luLWlubGluZTogYXV0bztcXG4gIG1heC13aWR0aDogaW5oZXJpdDtcXG59XFxuXFxuLyogZm9yIHRoZSB2aXN1YWxseSBpbXBhaXJlZCAtSGlkZSBDb250dGVuLSAqL1xcbi5zci1vbmx5IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxcHg7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IC0xcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgY2xpcDogcmVjdCgwLCAwLCAwLCAwKTtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAvKiBhZGRlZCBsaW5lICovXFxuICBib3JkZXI6IDA7XFxufVxcblxcblwiLFwiQHVzZSAnLi4vY3VzdG9tJyBhcyAqO1xcblxcbi8qIC0tLS0tLS0tLS0tLS1cXG5UT0RPIEhlcm8vaG9tZVxcbi0tLS0tLS0tLS0tLS0tICovXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMHB4KSB7XFxuICAuY29udGFpbmVyLWhlcm97XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRwcmltYXJ5LWJhY2tncm91bmQ7XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi8uLi9pbWdzL2JnLWRlc2t0b3AtcGluay5qcGcpO1xcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgICBoZWlnaHQ6IDkwdmg7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIHBsYWNlLWl0ZW1zOiBjZW50ZXI7XFxuICB9XFxuICAvKiBCTFVSICovXFxuICAuYmx1ci1kb2N1bWVudHtcXG4gICAgZmlsdGVyOiBibHVyKDIwcHgpO1xcbiAgfVxcbn1cXG5cXG5cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAwcHgpIHtcXG4gIC5tb2JpbGUtdG9nZ2xle1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgLyogQ2hhbmdlIEljb24gY29sb3IgKi9cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGZvbnQtdGl0bGUtYmctY29sb3I7XFxuICAgIC13ZWJraXQtbWFzay1pbWFnZTogdXJsKC4uLy4uL2ltZ3MvaGFtTWVudS5zdmcpIDtcXG4gICAgbWFzay1pbWFnZTogdXJsKC4uLy4uL2ltZ3MvaGFtTWVudS5zdmcpIDtcXG4gICAgLXdlYmtpdC1tYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICBtYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHdpZHRoOiAycmVtO1xcbiAgICBoZWlnaHQ6IDJyZW07XFxuICAgIGxlZnQ6IDFyZW07XFxuICAgIG1hcmdpbi10b3A6IDFyZW07XFxuICAgIGJvcmRlcjogMDtcXG4gICAgei1pbmRleDogMTAwMDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBcXG4gICAgJlthcmlhLWV4cGFuZGVkPVxcXCJ0cnVlXFxcIl17XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHJlZDtcXG4gICAgICAtd2Via2l0LW1hc2staW1hZ2U6IHVybCguLi8uLi9pbWdzL2Nsb3NlTWVudS5zdmcpIDtcXG4gICAgICBtYXNrLWltYWdlOiB1cmwoLi4vLi4vaW1ncy9jbG9zZU1lbnUuc3ZnKSA7XFxuICAgIH1cXG4gIH1cXG4gIFxcbiAgLmNhdGVnb3JpZXMtbmF2aWdhdGlvbntcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxuICAgIGluc2V0OiAwIDIwJSAwIDA7XFxuICAgIHotaW5kZXg6IDk5OTtcXG4gICAgcGFkZGluZy10b3A6IDh2aDtcXG4gICAgcGFkZGluZy1sZWZ0OiBtaW4oOHZoLCAxMHZoKTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGZvbnQtdGl0bGUtYmctY29sb3I7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XFxuICAgIHRyYW5zaXRpb246IDAuNHMgZWFzZS1pbi1vdXQ7XFxuICAgIC8qQkxVUiBiZyAgKi9cXG4gICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDhweCk7XFxuICAgIGNvbG9yOiAkc2Vjb25kYXJ5LWJhY2tncm91bmQtZGFyaztcXG4gICAgbWF4LWhlaWdodDogOTB2aDtcXG4gICAgXFxuICAgIC8vIENBVEVHT1JJRVMgVElUTEUgXFxuICAgIC5jYXRlZ29yaWVzLXRpdGxle1xcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxuICAgICAgZ2FwOiAwLjVyZW07XFxuICAgICAgXFxuICAgICAgLmFkZC1jYXRlZ29yaWVze1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGhpZ2gtbGlnaC1pY29uO1xcbiAgICAgICAgLXdlYmtpdC1tYXNrLWltYWdlOiB1cmwoLi4vLi4vaW1ncy9wbHVzLnN2ZykgO1xcbiAgICAgICAgbWFzay1pbWFnZTogdXJsKC4uLy4uL2ltZ3MvcGx1cy5zdmcpIDtcXG4gICAgICAgIC13ZWJraXQtbWFzay1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gICAgICAgIG1hc2stcmVwZWF0OiBuby1yZXBlYXQ7XFxuICAgICAgICB3aWR0aDogMS41cmVtO1xcbiAgICAgICAgaGVpZ2h0OiAxLjVyZW07XFxuICAgICAgICBib3JkZXI6IDA7XFxuICAgICAgICB6LWluZGV4OiAxMDAwO1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICBcXG4gICAgLmNhdGVnb3J5e1xcbiAgICAgICY6aG92ZXJ7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgfVxcbiAgICAgIC8qIFNJTkdMRSBDQVRFR09SWSAqL1xcbiAgICAgIC5jYXRlZ29yeS0tdGl0bGV7XFxuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcXG4gICAgICB9XFxuICAgICAgZGl2IHtcXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgICAgICBnYXA6IC40ZW07XFxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgXFxuICAgICAgICAuZGVsZXRlLWNhdGVnb3J5e1xcbiAgICAgICAgICB3aWR0aDogMXJlbTtcXG4gICAgICAgICAgaGVpZ2h0OiAxcmVtO1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcmVkO1xcbiAgICAgICAgICAtd2Via2l0LW1hc2staW1hZ2U6IHVybCguLi8uLi9pbWdzL21pbnVzRGVsZXRlLnN2ZykgO1xcbiAgICAgICAgICBtYXNrLWltYWdlOiB1cmwoLi4vLi4vaW1ncy9taW51c0RlbGV0ZS5zdmcpIDtcXG4gICAgICAgICAgLXdlYmtpdC1tYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICAgICAgICBtYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICAgICAgICBib3JkZXI6IDA7XFxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICAgICAgXFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICAgIFxcbiAgICB9XFxuICAgIC8vIFdoZW4gVG9nZ2xlIGlzIHByZXNzZWRcXG4gICAgXFxuICAgICZbZGF0YS12aXNpYmxlPVxcXCJ0cnVlXFxcIl17XFxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDAlKTtcXG4gICAgICBcXG4gICAgfVxcbiAgfVxcbiAgLyotLS0tLS0tLS0tLVxcbiAgUE9QIFVQXFxuICAtLS0tLS0tLS0tLS0tKi8gXFxuICAuYWRkLXByb2plY3QtcG9wVXB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIGJveC1zaGFkb3c6IC0xcHggMHB4IDNweCA0cHggcmdiYSgwLCAwLCAwLCAwLjM2KTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnktYmFja2dyb3VuZDtcXG4gICAgbWF4LXdpZHRoOiA0MHZoO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIHBhZGRpbmctdG9wOiAycmVtO1xcbiAgICBwYWRkaW5nLWlubGluZTogMnJlbTtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDIwJTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICB6LWluZGV4OiAxMDA1O1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAyMCUpO1xcbiAgICAvLyB0ZXh0IGNvbG9yXFxuICAgIGNvbG9yOiAkZm9udC1wLWNvbG9yO1xcbiAgICBsZXR0ZXItc3BhY2luZzogJGxldHRlci1zcGFjaW5nO1xcbiAgICBcXG4gICAgaW5wdXQsIGJ1dHRvbntcXG4gICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgfVxcbiAgICBpbnB1dHtcXG4gICAgICBwYWRkaW5nLWlubGluZTogMXJlbTtcXG4gICAgICBtYXJnaW4taW5saW5lOiBhdXRvO1xcbiAgICAgIHdpZHRoOiAzMHZoO1xcbiAgICB9XFxuICAgIC8qIEJ1dHRvbnMgKi9cXG4gICAgLmJ0bnMtcG9wVXB7XFxuICAgICAgbWFyZ2luLXRvcDogMXJlbTtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAuNXJlbTtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbiAgICAgICp7XFxuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgICB9XFxuICAgICAgLmFkZC1wcm9qZWN0LWJ0bntcXG4gICAgICAgIGNvbG9yOiAkZm9udC10aXRsZS1iZy1jb2xvcjtcXG4gICAgICAgIGxldHRlci1zcGFjaW5nOiAkbGV0dGVyLXNwYWNpbmc7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgfVxcbiAgICAgIC5jYW5jZWwtcHJvamVjdC1idG57XFxuICAgICAgICBjb2xvcjogJHJlZDtcXG4gICAgICAgIHRleHQtc2hhZG93OiAxcHggMC40cHggJGZvbnQtdGl0bGUtYmctY29sb3I7XFxuICAgICAgICBsZXR0ZXItc3BhY2luZzogJGxldHRlci1zcGFjaW5nO1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgIH1cXG4gICAgICBcXG4gICAgfVxcbiAgICBcXG4gICAgJltwcm9qZWN0LXBvcC12aXNpYmxlPVxcXCJ0cnVlXFxcIl17XFxuICAgICAgZGlzcGxheTogZ3JpZDtcXG4gICAgfVxcbiAgfVxcbiAgXFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDkwMHB4KSB7XFxuICAuY2F0ZWdvcmllcy1uYXZpZ2F0aW9ue1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCUpO1xcbiAgICBpbnNldDogMCA3MCUgMCAwO1xcbiAgICBib3gtc2hhZG93OiAxMXB4IDNweCAzcHggLThweCByZ2JhKDAsMCwwLDAuNSk7XFxuICAgIFxcbiAgfVxcbiAgLm1vYmlsZS10b2dnbGV7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxuICBcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAuY2F0ZWdvcmllcy1uYXZpZ2F0aW9ue1xcbiAgICBpbnNldDogMCA3NSUgMCAwO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNjAwcHgpIHtcXG4gIC5jYXRlZ29yaWVzLW5hdmlnYXRpb257XFxuICAgIGluc2V0OiAwIDgwJSAwIDA7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtaGVpZ2h0OiA1OTZweCkge1xcbiAgLmFkZC1wcm9qZWN0LXBvcFVwe1xcbiAgICBtYXgtd2lkdGg6IDkwdmg7XFxuICB9XFxuXFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi4vLi4vaW1ncy9DbG9zZS5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IG5ldyBVUkwoXCIuLi8uLi9pbWdzL3BsdXMuc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEAzMDA7NTAwOzkwMCZkaXNwbGF5PXN3YXApO1wiXSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiosKjo6YWZ0ZXIsKjo6YmVmb3Jle21hcmdpbjowO3BhZGRpbmc6MDtib3gtc2l6aW5nOmJvcmRlci1ib3h9Ym9keSxoMSxoMixoMyxoNCBwLGZpZ3VyZSxwaWN0dXJle21hcmdpbjowfWgxLGgyLGgzLGg0LGg1e3RleHQtdHJhbnNmb3JtOmNhcGl0YWxpemU7Zm9udC13ZWlnaHQ6NDAwfWEsbGl7dGV4dC1kZWNvcmF0aW9uOm5vbmU7bGlzdC1zdHlsZTpub25lfWJvZHl7bGluZS1oZWlnaHQ6MS41O21pbi1oZWlnaHQ6MTAwdmg7Zm9udC1mYW1pbHk6XFxcIlJvYm90b1xcXCIsc2Fucy1zZXJpZjtncmlkLXRlbXBsYXRlLXJvd3M6LXdlYmtpdC1taW4tY29udGVudCAxZnI7Z3JpZC10ZW1wbGF0ZS1yb3dzOm1pbi1jb250ZW50IDFmcjtvdmVyZmxvdy14OmhpZGRlbn1pbWcscGljdHVyZXttYXgtd2lkdGg6MTAwJTtkaXNwbGF5OmJsb2NrfWlucHV0LGJ1dHRvbix0ZXh0YXJlYSxzZWxlY3R7Zm9udDppbmhlcml0Oy13ZWJraXQtYXBwZWFyYW5jZTpub25lO2FwcGVhcmFuY2U6bm9uZX1pbnB1dDpmb2N1c3tvdXRsaW5lOm5vbmU7YXBwZWFyYW5jZTpub25lfUBtZWRpYShwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpeyosKjo6YmVmb3JlLCo6OmFmdGVyey13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi4wMW1zICFpbXBvcnRhbnQ7YW5pbWF0aW9uLWR1cmF0aW9uOi4wMW1zICFpbXBvcnRhbnQ7LXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OjEgIWltcG9ydGFudDthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OjEgIWltcG9ydGFudDt0cmFuc2l0aW9uLWR1cmF0aW9uOi4wMXNtcyAhaW1wb3J0YW50O3Njcm9sbC1iZWhhdmlvcjphdXRvICFpbXBvcnRhbnR9fS5oaWRkZW57ZGlzcGxheTpub25lfS5pbmxpbmV7ZGlzcGxheTppbmxpbmUtYmxvY2t9LmZsZXh7ZGlzcGxheTpmbGV4O2dhcDp2YXIoLS1nYXAsIDFyZW0pfS5ncmlke2Rpc3BsYXk6Z3JpZDtnYXA6dmFyKC0tZ2FwLCAxcmVtKX0uZC1ibG9ja3tkaXNwbGF5OmJsb2NrfS5jb250YWluZXJ7cGFkZGluZy1pbmxpbmU6MHJlbTttYXJnaW4taW5saW5lOmF1dG87bWF4LXdpZHRoOmluaGVyaXR9LnNyLW9ubHl7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MXB4O2hlaWdodDoxcHg7cGFkZGluZzowO21hcmdpbjotMXB4O292ZXJmbG93OmhpZGRlbjtjbGlwOnJlY3QoMCwgMCwgMCwgMCk7d2hpdGUtc3BhY2U6bm93cmFwO2JvcmRlcjowfUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDBweCl7LnRhc2tEZXNjUGFuZWx7cG9zaXRpb246YWJzb2x1dGU7dG9wOjE0JTtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIDE0JSk7bWluLWhlaWdodDo1MHZoO3BhZGRpbmc6MWVtO3dpZHRoOjM1dmg7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2JhY2tncm91bmQtY29sb3I6I2YzZDJjMTtib3JkZXItcmFkaXVzOjEwcHg7Y29sb3I6IzI3MzU1YztvdmVyZmxvdzphdXRvfS50YXNrRGVzY1BhbmVsIC5oaWRlLWRlc2MtcGFuZWx7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApO2JvcmRlcjpub25lO3dpZHRoOjR2aDtoZWlnaHQ6NHZoO2JhY2tncm91bmQtY29sb3I6I2M0MDAwMDstd2Via2l0LW1hc2staW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTttYXNrLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7LXdlYmtpdC1tYXNrLXJlcGVhdDpuby1yZXBlYXQ7bWFzay1yZXBlYXQ6bm8tcmVwZWF0O3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxdmg7cmlnaHQ6MS42dmg7Y3Vyc29yOnBvaW50ZXJ9LnRhc2tEZXNjUGFuZWwgLnRpdGxlLS10YXNrIGgxe2ZvbnQtc2l6ZToxLjRlbX0udGFza0Rlc2NQYW5lbCAuc2V0LWRhdGV7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpncmlkO3BsYWNlLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOi4yZW07Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMjMsODgsLjkpO2JvcmRlci1yYWRpdXM6MTBweDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6MWZyIDR2aH0udGFza0Rlc2NQYW5lbCAuc2V0LWRhdGUgLmFkZC1kYXRlLWxhYmVse3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6Ni41dmg7ei1pbmRleDotMX0udGFza0Rlc2NQYW5lbCAuc2V0LWRhdGUgaW5wdXR7Y29sb3I6cmdiYSgwLDAsMCwwKTtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCk7Ym9yZGVyOm5vbmV9LnRhc2tEZXNjUGFuZWwgLnNldC1kYXRlIC5kdWUtRGF0ZS1idG57YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDIzLDg4LC45KTstd2Via2l0LW1hc2staW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKTttYXNrLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIik7LXdlYmtpdC1tYXNrLXJlcGVhdDpuby1yZXBlYXQ7bWFzay1yZXBlYXQ6bm8tcmVwZWF0O3dpZHRoOjR2aDtoZWlnaHQ6NHZoO2JvcmRlcjowO2N1cnNvcjpwb2ludGVyfS5ub3Rlcy1wYW5lbHtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tdG9wOjFyZW07bWluLWhlaWdodDo1dmg7cGFkZGluZzouM2VtO2JvcmRlcjoxcHggc29saWQgcmdiYSgwLDIzLDg4LC45KTtib3JkZXItcmFkaXVzOjEwcHh9Lm5vdGVzLXBhbmVsIC50ZXh0YXJlYXtkaXNwbGF5OmJsb2NrO21pbi1oZWlnaHQ6NC44dmg7d2lkdGg6MTAwJX0ubm90ZXMtcGFuZWwgLnRleHRhcmVhOmVtcHR5OjpiZWZvcmV7Y29udGVudDpcXFwiQWRkIG5vdGVzXFxcIjtjb2xvcjpncmF5fS5ub3Rlcy1wYW5lbCAudGV4dGFyZWE6Zm9jdXN7b3V0bGluZTpub25lfX1AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA4MDBweCl7LnRhc2tEZXNjUGFuZWwgLmhpZGUtZGVzYy1wYW5lbHt0b3A6MXZoO3JpZ2h0OjF2aH0udGFza0Rlc2NQYW5lbCAuc2V0LWRhdGUgLmR1ZS1EYXRlLWJ0bnt3aWR0aDozdmg7aGVpZ2h0OjN2aH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC1oZWlnaHQ6IDU5NnB4KXsudGFza0Rlc2NQYW5lbHt0b3A6MTQlO2xlZnQ6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgMTQlKTttaW4taGVpZ2h0OjUwdmg7cGFkZGluZzoxZW07d2lkdGg6MTAwJTtjb2xvcjojMjczNTVjO292ZXJmbG93OmF1dG99fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvX2N1c3RvbS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3Nhc3NNb2R1bGVzL190YXNrUGFuZWwuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUE4QkEscUJBR0UsUUFBQSxDQUNBLFNBQUEsQ0FDQSxxQkFBQSxDQUdGLGtDQU9FLFFBQUEsQ0FHRixlQUtFLHlCQUFBLENBQ0EsZUFBQSxDQUdGLEtBRUUsb0JBQUEsQ0FDQSxlQUFBLENBR0YsS0FDRSxlQUFBLENBQ0EsZ0JBQUEsQ0FDQSwrQkFBQSxDQUVBLDBDQUFBLENBQ0Esa0NBQUEsQ0FDQSxpQkFBQSxDQUlGLFlBRUUsY0FBQSxDQUNBLGFBQUEsQ0FJRiw2QkFJRSxZQUFBLENBQ0EsdUJBQUEsQ0FDQSxlQUFBLENBR0YsWUFDRSxZQUFBLENBQ0EsZUFBQSxDQUtGLHVDQUVFLHFCQUdFLDJDQUFBLENBQ0EsbUNBQUEsQ0FDQSw4Q0FBQSxDQUNBLHNDQUFBLENBQ0EscUNBQUEsQ0FDQSwrQkFBQSxDQUFBLENBT0osUUFDRSxZQUFBLENBR0YsUUFDRSxvQkFBQSxDQUdGLE1BQ0UsWUFBQSxDQUNBLG9CQUFBLENBR0YsTUFDRSxZQUFBLENBQ0Esb0JBQUEsQ0FHRixTQUNFLGFBQUEsQ0FTRixXQUNFLG1CQUFBLENBQ0Esa0JBQUEsQ0FDQSxpQkFBQSxDQUlGLFNBQ0UsaUJBQUEsQ0FDQSxTQUFBLENBQ0EsVUFBQSxDQUNBLFNBQUEsQ0FDQSxXQUFBLENBQ0EsZUFBQSxDQUNBLHFCQUFBLENBQ0Esa0JBQUEsQ0FFQSxRQUFBLENDN0pGLG1DQUNFLGVBQ0UsaUJBQUEsQ0FDQSxPQUFBLENBQ0EsUUFBQSxDQUNBLDhCQUFBLENBQ0EsZUFBQSxDQUNBLFdBQUEsQ0FDQSxVQUFBLENBQ0EsWUFBQSxDQUNBLHFCQUFBLENBQ0EsNEJBQUEsQ0FDQSx3QkRiaUIsQ0NjakIsa0JBQUEsQ0FDQSxhRFRXLENDVVgsYUFBQSxDQUdBLGdDQUNFLHdCQUFBLENBQ0EsV0FBQSxDQUNBLFNBQUEsQ0FDQSxVQUFBLENBRUEsd0JBQUEsQ0FDQSwwREFBQSxDQUNBLGtEQUFBLENBQ0EsNkJBQUEsQ0FDQSxxQkFBQSxDQUNBLGlCQUFBLENBQ0EsT0FBQSxDQUNBLFdBQUEsQ0FDQSxjQUFBLENBSUEsK0JBQ0UsZUFBQSxDQUdKLHlCQUNFLGlCQUFBLENBQ0EsWUFBQSxDQUNBLGtCQUFBLENBQ0EsWUFBQSxDQUNBLGlDQUFBLENBQ0Esa0JBQUEsQ0FDQSw2QkFBQSxDQUNBLHlDQUNFLGlCQUFBLENBQ0EsVUFBQSxDQUNBLFVBQUEsQ0FFRiwrQkFDRSxtQkFBQSxDQUNBLHdCQUFBLENBQ0EsV0FBQSxDQUdGLHVDQUNFLHdCQUFBLENBQ0EsaUNEdERjLENDdURkLDBEQUFBLENBQ0Esa0RBQUEsQ0FDQSw2QkFBQSxDQUNBLHFCQUFBLENBQ0EsU0FBQSxDQUNBLFVBQUEsQ0FDQSxRQUFBLENBQ0EsY0FBQSxDQUtOLGFBQ0UsaUJBQUEsQ0FDQSxlQUFBLENBQ0EsY0FBQSxDQUNBLFlBQUEsQ0FDQSxpQ0FBQSxDQUNBLGtCQUFBLENBQ0EsdUJBQ0UsYUFBQSxDQUNBLGdCQUFBLENBQ0EsVUFBQSxDQUVBLHFDQUNFLG1CQUFBLENBQ0EsVUFBQSxDQUVGLDZCQUNFLFlBQUEsQ0FBQSxDQUtSLHFDQUdJLGdDQUNFLE9BQUEsQ0FDQSxTQUFBLENBSUEsdUNBQ0UsU0FBQSxDQUNBLFVBQUEsQ0FBQSxDQUtSLHNDQUNFLGVBQ0UsT0FBQSxDQUNBLFFBQUEsQ0FDQSw4QkFBQSxDQUNBLGVBQUEsQ0FDQSxXQUFBLENBQ0EsVUFBQSxDQUNBLGFEbkhXLENDb0hYLGFBQUEsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvLyBWYXJpYWJsZXNcXG4kcHJpbWFyeS1iYWNrZ3JvdW5kOiAjZjNkMmMxO1xcbiRwcmltYXJ5LWJhY2tncm91bmQtb3BhY2l0eTogcmdiYSgyNDMsIDIxMCwgMTkzLCAwLjkpO1xcbiRwcmltYXJ5LWJhY2tncm91bmQtbGlnaHQ6ICNGRkU2RDk7XFxuJHByaW1hcnktYmFja2dyb3VuZC1saWdodC1vcGFjaXR5OiByZ2JhKDI1NSwgMjMwLCAyMTcsIDAuOSk7XFxuJGZvbnQtdGl0bGUtY29sb3I6ICMwMDE4NTg7XFxuJGZvbnQtdGl0bGUtZ3JleTogIzM0M0Y1RTtcXG4kZm9udC1wLWNvbG9yOiAjMjczNTVDO1xcbiRmb250LXAtY29sb3ItbGlnaHQ6ICNlNmRmZDA7XFxuJGZvbnQtdGl0bGUtYmctY29sb3I6IHJnYmEoMCwgMjMsIDg4LCAwLjkpO1xcbiRzZWNvbmRhcnktYmFja2dyb3VuZDogI2ZlZjZlNDtcXG4kc2Vjb25kYXJ5LWJhY2tncm91bmQtZGFyazogI0Y1RUREQztcXG4kc2Vjb25kYXJ5LWJhY2tncm91bmQtZGFyay1vcGFjaXR5OiByZ2JhKDI0NSwgMjM3LCAyMjAsIDAuOSk7XFxuXFxuJGhpZ2gtbGlnaC1pY29uOiAjZjU4MmFlO1xcbiRyZWQ6ICNGOTY5NjE7XFxuXFxuJGxldHRlci1zcGFjaW5nOiAwLjAxZW07XFxuXFxuXFxuXFxuXFxuLyogRk9OVCBGQU1JTFkgKi9cXG5AaW1wb3J0IHVybChcXFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEAzMDA7NTAwOzkwMCZkaXNwbGF5PXN3YXBcXFwiKTtcXG4vKlxcbj09PT09PT09PT09PT09PSBcXG5HbG9iYWwgU3R5bGVzLyBSZXNldFxcbj09PT09PT09PT09PT09PVxcbiovXFxuXFxuKixcXG4qOjphZnRlcixcXG4qOjpiZWZvcmUge1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbmJvZHksXFxuaDEsXFxuaDIsXFxuaDMsXFxuaDQgcCxcXG5maWd1cmUsXFxucGljdHVyZSB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbmgxLFxcbmgyLFxcbmgzLFxcbmg0LFxcbmg1IHtcXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuYSxcXG5saSB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvXFxcIiwgc2Fucy1zZXJpZjtcXG5cXG4gIGdyaWQtdGVtcGxhdGUtcm93czogLXdlYmtpdC1taW4tY29udGVudCAxZnI7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IG1pbi1jb250ZW50IDFmcjtcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXG59XFxuXFxuLyogaW1ncyBlYXNpZXIgdG8gd29yayB3aXRoICovXFxuaW1nLFxcbnBpY3R1cmUge1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi8qIGZvcm0gZWxlbWVudHMgZWFzaWVyIHRvIHdvcmsgd2l0aCAqL1xcbmlucHV0LFxcbmJ1dHRvbixcXG50ZXh0YXJlYSxcXG5zZWxlY3Qge1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICBcXG59XFxuaW5wdXQ6Zm9jdXN7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgYXBwZWFyYW5jZTogbm9uZTtcXG59XFxuXFxuXFxuLyogcmVtb3ZlIGFuaW1hdGlvbiBmb3IgcGVvcGxlIHdobyB0dXJuZWQgdGhlbSBvZmYgKi9cXG5AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xcblxcbiAgKixcXG4gICo6OmJlZm9yZSxcXG4gICo6OmFmdGVyIHtcXG4gICAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDAuMDFtcyAhaW1wb3J0YW50O1xcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDAuMDFtcyAhaW1wb3J0YW50O1xcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IDEgIWltcG9ydGFudDtcXG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMSAhaW1wb3J0YW50O1xcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjAxc21zICFpbXBvcnRhbnQ7XFxuICAgIHNjcm9sbC1iZWhhdmlvcjogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG4vKiA9PT09PT09PT1cXG51dGlsaXR5IGNsYXNlcyBcXG49PT09PT09PT09PSAqL1xcbi5oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmlubGluZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5mbGV4IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IHZhcigtLWdhcCwgMXJlbSk7XFxufVxcblxcbi5ncmlkIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBnYXA6IHZhcigtLWdhcCwgMXJlbSk7XFxufVxcblxcbi5kLWJsb2NrIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5cXG4vKiBTUEFDSU5HIC5mbG93ICovXFxuLyogU2VjbGVjdCBhbGwgdGhlIGVsZW1lbnRzIG9mIGEgZGl2aWRlciBleGNlcHQgdGhlIGZpcnN0IENoaWxkICovXFxuLyogSXQgaXMgdXNlIHRvIG1ha2UgdGhlIHRvcCBhbmQgYm90dG9uIGxpbmUgaGVpZ2h0cyBhbmQgYm9yZGVycyB0aGUgc2FtZSAqL1xcbi8qIFdoZXJlIGlzIGEgd2F5IHRvIGdyb3VwIHRoaW5ncywgaXMgbG93ZXIgb24gc3BlY2lmaWN5IHNvIHdlIGRvbnQgb3ZlcndyaXRlIHRoaW5ncyovXFxuXFxuLmNvbnRhaW5lciB7XFxuICBwYWRkaW5nLWlubGluZTogMHJlbTtcXG4gIG1hcmdpbi1pbmxpbmU6IGF1dG87XFxuICBtYXgtd2lkdGg6IGluaGVyaXQ7XFxufVxcblxcbi8qIGZvciB0aGUgdmlzdWFsbHkgaW1wYWlyZWQgLUhpZGUgQ29udHRlbi0gKi9cXG4uc3Itb25seSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMXB4O1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAtMXB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgLyogYWRkZWQgbGluZSAqL1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG5cIixcIkB1c2UgXFxcIi4uL2N1c3RvbVxcXCIgYXMgKjtcXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAwcHgpe1xcbiAgLnRhc2tEZXNjUGFuZWx7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAxNCU7XFxuICAgIGxlZnQ6IDUwJTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMTQlKTtcXG4gICAgbWluLWhlaWdodDogNTB2aDtcXG4gICAgcGFkZGluZzogMWVtO1xcbiAgICB3aWR0aDogMzV2aDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRwcmltYXJ5LWJhY2tncm91bmQ7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIGNvbG9yOiAkZm9udC1wLWNvbG9yO1xcbiAgICBvdmVyZmxvdzogYXV0bztcXG5cXG4gICAgLy8gSGlkZSBQYW5lbCBidG5cXG4gICAgLmhpZGUtZGVzYy1wYW5lbHtcXG4gICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgICBib3JkZXI6IG5vbmU7XFxuICAgICAgd2lkdGg6IDR2aDtcXG4gICAgICBoZWlnaHQ6IDR2aDtcXG4gICAgICAvKiBDaGFuZ2UgSWNvbiBjb2xvciAqL1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxOTYsIDAsIDApO1xcbiAgICAgIC13ZWJraXQtbWFzay1pbWFnZTogdXJsKC4uLy4uL2ltZ3MvQ2xvc2Uuc3ZnKSA7XFxuICAgICAgbWFzay1pbWFnZTogdXJsKC4uLy4uL2ltZ3MvQ2xvc2Uuc3ZnKSA7XFxuICAgICAgLXdlYmtpdC1tYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICAgIG1hc2stcmVwZWF0OiBuby1yZXBlYXQ7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIHRvcDogMXZoO1xcbiAgICAgIHJpZ2h0OiAxLjZ2aDtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIH1cXG5cXG4gICAgLnRpdGxlLS10YXNre1xcbiAgICAgIGgxe1xcbiAgICAgICAgZm9udC1zaXplOiAxLjRlbTtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgLnNldC1kYXRle1xcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICBkaXNwbGF5OiBncmlkO1xcbiAgICAgIHBsYWNlLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgcGFkZGluZzogLjJlbTtcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAkZm9udC10aXRsZS1iZy1jb2xvcjtcXG4gICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDR2aDtcXG4gICAgICAuYWRkLWRhdGUtbGFiZWx7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBsZWZ0OiA2LjV2aDtcXG4gICAgICAgIHotaW5kZXg6IC0xO1xcbiAgICAgIH1cXG4gICAgICBpbnB1dHtcXG4gICAgICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgIH1cXG5cXG4gICAgICAuZHVlLURhdGUtYnRue1xcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZm9udC10aXRsZS1iZy1jb2xvcjtcXG4gICAgICAgIC13ZWJraXQtbWFzay1pbWFnZTogdXJsKC4uLy4uL2ltZ3MvcGx1cy5zdmcpIDtcXG4gICAgICAgIG1hc2staW1hZ2U6IHVybCguLi8uLi9pbWdzL3BsdXMuc3ZnKSA7XFxuICAgICAgICAtd2Via2l0LW1hc2stcmVwZWF0OiBuby1yZXBlYXQ7XFxuICAgICAgICBtYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICAgICAgd2lkdGg6IDR2aDtcXG4gICAgICAgIGhlaWdodDogNHZoO1xcbiAgICAgICAgYm9yZGVyOiAwO1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbiAgLyogUEFORUwgRk9SIE5PVEVTICovXFxuICAubm90ZXMtcGFuZWx7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgbWFyZ2luLXRvcDogMXJlbTtcXG4gICAgbWluLWhlaWdodDogNXZoO1xcbiAgICBwYWRkaW5nOiAuM2VtO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkZm9udC10aXRsZS1iZy1jb2xvcjtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgLnRleHRhcmVhe1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIG1pbi1oZWlnaHQ6IDQuOHZoO1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIC8vIElGIHRleHQgYXJlYSBlbXB0eSBzaG93IGEgcGxhY2UgSG9sZGVyXFxuICAgICAgJjplbXB0eTo6YmVmb3Jle1xcbiAgICAgICAgY29udGVudDogJ0FkZCBub3Rlcyc7XFxuICAgICAgICBjb2xvcjogZ3JleTtcXG4gICAgICB9XFxuICAgICAgJjpmb2N1c3tcXG4gICAgICAgIG91dGxpbmU6IG5vbmU7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDgwMHB4KSB7XFxuICAudGFza0Rlc2NQYW5lbHtcXG4gICAgLy8gSGlkZSBQYW5lbCBidG5cXG4gICAgLmhpZGUtZGVzYy1wYW5lbHtcXG4gICAgICB0b3A6IDF2aDtcXG4gICAgICByaWdodDogMXZoO1xcblxcbiAgICB9XFxuICAgIC5zZXQtZGF0ZXtcXG4gICAgICAuZHVlLURhdGUtYnRue1xcbiAgICAgICAgd2lkdGg6IDN2aDtcXG4gICAgICAgIGhlaWdodDogM3ZoO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LWhlaWdodDogNTk2cHgpIHtcXG4gIC50YXNrRGVzY1BhbmVse1xcbiAgICB0b3A6IDE0JTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAxNCUpO1xcbiAgICBtaW4taGVpZ2h0OiA1MHZoO1xcbiAgICBwYWRkaW5nOiAxZW07XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBjb2xvcjogJGZvbnQtcC1jb2xvcjtcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxuICB9XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi4vLi4vaW1ncy91bmNoZWNrLnN2Z1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4uLy4uL2ltZ3MvbWludXNEZWxldGUuc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18gPSBuZXcgVVJMKFwiLi4vLi4vaW1ncy9jaGVjay5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyA9IG5ldyBVUkwoXCIuLi8uLi9pbWdzL2Fycm93VXAuc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEAzMDA7NTAwOzkwMCZkaXNwbGF5PXN3YXApO1wiXSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKiwqOjphZnRlciwqOjpiZWZvcmV7bWFyZ2luOjA7cGFkZGluZzowO2JveC1zaXppbmc6Ym9yZGVyLWJveH1ib2R5LGgxLGgyLGgzLGg0IHAsZmlndXJlLHBpY3R1cmV7bWFyZ2luOjB9aDEsaDIsaDMsaDQsaDV7dGV4dC10cmFuc2Zvcm06Y2FwaXRhbGl6ZTtmb250LXdlaWdodDo0MDB9YSxsaXt0ZXh0LWRlY29yYXRpb246bm9uZTtsaXN0LXN0eWxlOm5vbmV9Ym9keXtsaW5lLWhlaWdodDoxLjU7bWluLWhlaWdodDoxMDB2aDtmb250LWZhbWlseTpcXFwiUm9ib3RvXFxcIixzYW5zLXNlcmlmO2dyaWQtdGVtcGxhdGUtcm93czotd2Via2l0LW1pbi1jb250ZW50IDFmcjtncmlkLXRlbXBsYXRlLXJvd3M6bWluLWNvbnRlbnQgMWZyO292ZXJmbG93LXg6aGlkZGVufWltZyxwaWN0dXJle21heC13aWR0aDoxMDAlO2Rpc3BsYXk6YmxvY2t9aW5wdXQsYnV0dG9uLHRleHRhcmVhLHNlbGVjdHtmb250OmluaGVyaXQ7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lfWlucHV0OmZvY3Vze291dGxpbmU6bm9uZTthcHBlYXJhbmNlOm5vbmV9QG1lZGlhKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSl7KiwqOjpiZWZvcmUsKjo6YWZ0ZXJ7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246LjAxbXMgIWltcG9ydGFudDthbmltYXRpb24tZHVyYXRpb246LjAxbXMgIWltcG9ydGFudDstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MSAhaW1wb3J0YW50O2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MSAhaW1wb3J0YW50O3RyYW5zaXRpb24tZHVyYXRpb246LjAxc21zICFpbXBvcnRhbnQ7c2Nyb2xsLWJlaGF2aW9yOmF1dG8gIWltcG9ydGFudH19LmhpZGRlbntkaXNwbGF5Om5vbmV9LmlubGluZXtkaXNwbGF5OmlubGluZS1ibG9ja30uZmxleHtkaXNwbGF5OmZsZXg7Z2FwOnZhcigtLWdhcCwgMXJlbSl9LmdyaWR7ZGlzcGxheTpncmlkO2dhcDp2YXIoLS1nYXAsIDFyZW0pfS5kLWJsb2Nre2Rpc3BsYXk6YmxvY2t9LmNvbnRhaW5lcntwYWRkaW5nLWlubGluZTowcmVtO21hcmdpbi1pbmxpbmU6YXV0bzttYXgtd2lkdGg6aW5oZXJpdH0uc3Itb25seXtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxcHg7aGVpZ2h0OjFweDtwYWRkaW5nOjA7bWFyZ2luOi0xcHg7b3ZlcmZsb3c6aGlkZGVuO2NsaXA6cmVjdCgwLCAwLCAwLCAwKTt3aGl0ZS1zcGFjZTpub3dyYXA7Ym9yZGVyOjB9QG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMHB4KXsudG9kby1wYW5lbHtwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nOjFlbTtib3JkZXItcmFkaXVzOjEwcHg7bWluLWhlaWdodDo0NXZoO21heC1oZWlnaHQ6NjB2aDt3aWR0aDozNXZoO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDIzLDg4LC45KTtjb2xvcjojZjVlZGRjO292ZXJmbG93OmF1dG99LnRvZG8tcGFuZWwgLnRpdGxle21hcmdpbi1ib3R0b206MS41dmg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2ZmZn0udG9kby1wYW5lbCAudGFza3N7bWF4LWhlaWdodDo0MHZoO292ZXJmbG93OmF1dG87bWFyZ2luLWJvdHRvbTozdmh9LnRvZG8tcGFuZWwgLnRhc2tzIC50YXNre3BhZGRpbmc6Ljh2aDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6MnZoIDFmciAydmh9LnRvZG8tcGFuZWwgLnRhc2tzIC50YXNrIC50YXNrLWNhdGVnb3J5e2NvbG9yOiNmNTgyYWU7Zm9udC1zaXplOi45ZW19LnRvZG8tcGFuZWwgLnRhc2tzIC50YXNrIC50YXNrLXRpdGxle2N1cnNvcjpwb2ludGVyO3otaW5kZXg6Mn0udG9kby1wYW5lbCAudGFza3MgLnRhc2sgLlRhc2tJdGVtQ2hlY2tib3h7cGxhY2Utc2VsZjpjZW50ZXI7Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyOm5vbmU7Y29sb3I6I2Y1ODJhZTtiYWNrZ3JvdW5kLWNvbG9yOiNmNTgyYWU7LXdlYmtpdC1tYXNrLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7bWFzay1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpOy13ZWJraXQtbWFzay1yZXBlYXQ6bm8tcmVwZWF0O21hc2stcmVwZWF0Om5vLXJlcGVhdDt3aWR0aDoyLjR2aDtoZWlnaHQ6Mi40dmg7Y3Vyc29yOnBvaW50ZXJ9LnRvZG8tcGFuZWwgLnRhc2tzIC50YXNrIC5UYXNrSXRlbURlbGV0ZXtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCk7Ym9yZGVyOm5vbmU7dGV4dC1hbGlnbjpjZW50ZXI7cGxhY2Utc2VsZjpjZW50ZXI7d2lkdGg6Mi40dmg7aGVpZ2h0OjIuNHZoO2JhY2tncm91bmQtY29sb3I6I2Y5Njk2MTstd2Via2l0LW1hc2staW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKTttYXNrLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIik7LXdlYmtpdC1tYXNrLXJlcGVhdDpuby1yZXBlYXQ7bWFzay1yZXBlYXQ6bm8tcmVwZWF0O2N1cnNvcjpwb2ludGVyfS50b2RvLXBhbmVsIC50YXNrcyAudGFza1thcmlhLWRpc2FibGVkPXRydWVde2NvbG9yOiM2ODY4Njg7dGV4dC1kZWNvcmF0aW9uOmxpbmUtdGhyb3VnaH0udG9kby1wYW5lbCAudGFza3MgLnRhc2tbYXJpYS1kaXNhYmxlZD10cnVlXSAuVGFza0l0ZW1DaGVja2JveHtiYWNrZ3JvdW5kLWNvbG9yOiNhMGEwYTA7LXdlYmtpdC1tYXNrLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gKyBcIik7bWFzay1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fICsgXCIpOy13ZWJraXQtbWFzay1yZXBlYXQ6bm8tcmVwZWF0O21hc2stcmVwZWF0Om5vLXJlcGVhdH0udG9kby1wYW5lbCAudGFza3MgLnRhc2tbYXJpYS1kaXNhYmxlZD10cnVlXSAudGFzay1jYXRlZ29yeXtkaXNwbGF5Om5vbmV9LnRvZG8tcGFuZWwgLmFkZC10YXNrLWNvbnRhaW5lcntwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5OmZsZXg7Z2FwOi41dmg7Ym9yZGVyLXJhZGl1czoxMHB4O2FsaWduLWl0ZW1zOmNlbnRlcjtib3R0b206LjN2aDtsZWZ0OjN2aDt3aWR0aDozMHZoO2hlaWdodDo1dmh9LnRvZG8tcGFuZWwgLmFkZC10YXNrLWNvbnRhaW5lciAjYWRkLXRhc2stdGV4dHt3aWR0aDoyNXZoO2JvcmRlci1yYWRpdXM6MTBweH0udG9kby1wYW5lbCAuYWRkLXRhc2stY29udGFpbmVyIGxhYmVse2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7dG9wOjF2aDtsZWZ0OjJ2aDtvcGFjaXR5Oi40O2ZvbnQtc2l6ZToxMnB4O2NvbG9yOiMwMDB9LnRvZG8tcGFuZWwgLmFkZC10YXNrLWNvbnRhaW5lciBpbnB1dHtwYWRkaW5nLWxlZnQ6MWVtO291dGxpbmU6bm9uZTtib3JkZXI6bm9uZTtkaXNwbGF5OmJsb2NrO2xpbmUtaGVpZ2h0OjEuNWVtO2hlaWdodDoyLjJlbTtmb250LXNpemU6LjhlbX0udG9kby1wYW5lbCAuYWRkLXRhc2stY29udGFpbmVyIGlucHV0OmZvY3VzK2xhYmVse29wYWNpdHk6MH0udG9kby1wYW5lbCAuYWRkLXRhc2stY29udGFpbmVyIC5hZGQtdGFzay1idG57YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApO2JvcmRlcjpub25lO3dpZHRoOjV2aDtoZWlnaHQ6NXZoO2NvbG9yOiNmNTgyYWU7YmFja2dyb3VuZC1jb2xvcjojZjU4MmFlOy13ZWJraXQtbWFzay1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fICsgXCIpO21hc2staW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyArIFwiKTstd2Via2l0LW1hc2stcmVwZWF0Om5vLXJlcGVhdDttYXNrLXJlcGVhdDpuby1yZXBlYXQ7Y3Vyc29yOnBvaW50ZXJ9fUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDUwMHB4KXsudG9kby1wYW5lbCAudGFza3MgLnRhc2sgLlRhc2tJdGVtQ2hlY2tib3h7d2lkdGg6MnZoO2hlaWdodDoydmh9LnRvZG8tcGFuZWwgLnRhc2tzIC50YXNrIC5UYXNrSXRlbURlbGV0ZXt3aWR0aDoydmg7aGVpZ2h0OjJ2aH0udG9kby1wYW5lbCAuYWRkLXRhc2stY29udGFpbmVye2JvdHRvbTouMDVlbTtsZWZ0OjN2aH0udG9kby1wYW5lbCAuYWRkLXRhc2stY29udGFpbmVyIGxhYmVse3RvcDoxLjZ2aDtsZWZ0OjJ2aH0udG9kby1wYW5lbCAuYWRkLXRhc2stY29udGFpbmVyIC5hZGQtdGFzay1idG57d2lkdGg6M3ZoO2hlaWdodDozdmh9fUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDgwMHB4KXsudG9kby1wYW5lbCAuYWRkLXRhc2stY29udGFpbmVyIGlucHV0e2hlaWdodDoxLjhlbTtmb250LXNpemU6MWVtfX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LWhlaWdodDogNTk2cHgpey50b2RvLXBhbmVse3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6MWVtO2JvcmRlci1yYWRpdXM6MTBweDttaW4taGVpZ2h0OjQ1dmg7bWF4LWhlaWdodDo4NSU7d2lkdGg6ODAlO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDIzLDg4LC45KTtjb2xvcjojZjVlZGRjO292ZXJmbG93OmF1dG99LnRvZG8tcGFuZWwgLmFkZC10YXNrLWNvbnRhaW5lcntnYXA6MXZoO2JvdHRvbToxdmg7bGVmdDo4dmg7d2lkdGg6ODAlO2hlaWdodDozdmg7cGFkZGluZy1ib3R0b206NHZofS50b2RvLXBhbmVsIC5hZGQtdGFzay1jb250YWluZXIgbGFiZWx7dG9wOi4wMXZofS50b2RvLXBhbmVsIC5hZGQtdGFzay1jb250YWluZXIgI2FkZC10YXNrLXRleHR7d2lkdGg6ODAlfS50b2RvLXBhbmVsIC5hZGQtdGFzay1jb250YWluZXIgLmFkZC10YXNrLWJ0bnt3aWR0aDo2dmg7aGVpZ2h0OjZ2aH19XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9fY3VzdG9tLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvc2Fzc01vZHVsZXMvX3RvZG9QYW5lbC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQThCQSxxQkFHRSxRQUFBLENBQ0EsU0FBQSxDQUNBLHFCQUFBLENBR0Ysa0NBT0UsUUFBQSxDQUdGLGVBS0UseUJBQUEsQ0FDQSxlQUFBLENBR0YsS0FFRSxvQkFBQSxDQUNBLGVBQUEsQ0FHRixLQUNFLGVBQUEsQ0FDQSxnQkFBQSxDQUNBLCtCQUFBLENBRUEsMENBQUEsQ0FDQSxrQ0FBQSxDQUNBLGlCQUFBLENBSUYsWUFFRSxjQUFBLENBQ0EsYUFBQSxDQUlGLDZCQUlFLFlBQUEsQ0FDQSx1QkFBQSxDQUNBLGVBQUEsQ0FHRixZQUNFLFlBQUEsQ0FDQSxlQUFBLENBS0YsdUNBRUUscUJBR0UsMkNBQUEsQ0FDQSxtQ0FBQSxDQUNBLDhDQUFBLENBQ0Esc0NBQUEsQ0FDQSxxQ0FBQSxDQUNBLCtCQUFBLENBQUEsQ0FPSixRQUNFLFlBQUEsQ0FHRixRQUNFLG9CQUFBLENBR0YsTUFDRSxZQUFBLENBQ0Esb0JBQUEsQ0FHRixNQUNFLFlBQUEsQ0FDQSxvQkFBQSxDQUdGLFNBQ0UsYUFBQSxDQVNGLFdBQ0UsbUJBQUEsQ0FDQSxrQkFBQSxDQUNBLGlCQUFBLENBSUYsU0FDRSxpQkFBQSxDQUNBLFNBQUEsQ0FDQSxVQUFBLENBQ0EsU0FBQSxDQUNBLFdBQUEsQ0FDQSxlQUFBLENBQ0EscUJBQUEsQ0FDQSxrQkFBQSxDQUVBLFFBQUEsQ0M5SkYsbUNBQ0UsWUFDRSxpQkFBQSxDQUNBLFdBQUEsQ0FDQSxrQkFBQSxDQUNBLGVBQUEsQ0FDQSxlQUFBLENBQ0EsVUFBQSxDQUNBLGlDQUFBLENBQ0EsYURDd0IsQ0FBQSxhQUFBLENDRXhCLG1CQUNFLG1CQUFBLENBQ0EsNEJBQUEsQ0FHRixtQkFDRSxlQUFBLENBQ0EsYUFBQSxDQUNBLGlCQUFBLENBRUEseUJBQ0UsWUFBQSxDQUNBLGlDQUFBLENBQ0Esd0NBQ0UsYURiTyxDQ2NQLGNBQUEsQ0FFRixxQ0FDRSxjQUFBLENBQ0EsU0FBQSxDQUVGLDJDQUNFLGlCQUFBLENBQ0EsaUJBQUEsQ0FDQSxXQUFBLENBQ0EsYUR4Qk8sQ0N5QlAsd0JEekJPLENDMEJQLDBEQUFBLENBQ0Esa0RBQUEsQ0FDQSw2QkFBQSxDQUNBLHFCQUFBLENBQ0EsV0FBQSxDQUNBLFlBQUEsQ0FDQSxjQUFBLENBR0YseUNBQ0Usd0JBQUEsQ0FDQSxXQUFBLENBQ0EsaUJBQUEsQ0FDQSxpQkFBQSxDQUNBLFdBQUEsQ0FDQSxZQUFBLENBRUEsd0JEMUNKLENDMkNJLDBEQUFBLENBQ0Esa0RBQUEsQ0FDQSw2QkFBQSxDQUNBLHFCQUFBLENBQ0EsY0FBQSxDQUlGLDZDQUNFLGFBQUEsQ0FDQSw0QkFBQSxDQUNBLCtEQUVFLHdCQUFBLENBQ0EsMERBQUEsQ0FDQSxrREFBQSxDQUNBLDZCQUFBLENBQ0EscUJBQUEsQ0FFRiw0REFDRSxZQUFBLENBTVIsZ0NBQ0UsaUJBQUEsQ0FDQSxZQUFBLENBQ0EsUUFBQSxDQUNBLGtCQUFBLENBQ0Esa0JBQUEsQ0FDQSxXQUFBLENBQ0EsUUFBQSxDQUNBLFVBQUEsQ0FDQSxVQUFBLENBRUEsK0NBQ0UsVUFBQSxDQUNBLGtCQUFBLENBRUYsc0NBQ0UsYUFBQSxDQUNBLGlCQUFBLENBQ0EsT0FBQSxDQUNBLFFBQUEsQ0FDQSxVQUFBLENBQ0EsY0FBQSxDQUNBLFVBQUEsQ0FFRixzQ0FDRSxnQkFBQSxDQUNBLFlBQUEsQ0FDQSxXQUFBLENBQ0EsYUFBQSxDQUNBLGlCQUFBLENBQ0EsWUFBQSxDQUNBLGNBQUEsQ0FJRSxrREFDRSxTQUFBLENBSU4sOENBQ0Usd0JBQUEsQ0FDQSxXQUFBLENBQ0EsU0FBQSxDQUNBLFVBQUEsQ0FDQSxhRG5IUyxDQ3FIVCx3QkRySFMsQ0NzSFQsMERBQUEsQ0FDQSxrREFBQSxDQUNBLDZCQUFBLENBQ0EscUJBQUEsQ0FDQSxjQUFBLENBQUEsQ0FLUixxQ0FJUSwyQ0FDRSxTQUFBLENBQ0EsVUFBQSxDQUVGLHlDQUNFLFNBQUEsQ0FDQSxVQUFBLENBS04sZ0NBQ0UsWUFBQSxDQUNBLFFBQUEsQ0FFQSxzQ0FDRSxTQUFBLENBQ0EsUUFBQSxDQUdGLDhDQUNFLFNBQUEsQ0FDQSxVQUFBLENBQUEsQ0FLTixxQ0FFSSxzQ0FFSSxZQUFBLENBQ0EsYUFBQSxDQUFBLENBS1Isc0NBQ0UsWUFDRSxpQkFBQSxDQUNBLFdBQUEsQ0FDQSxrQkFBQSxDQUNBLGVBQUEsQ0FDQSxjQUFBLENBQ0EsU0FBQSxDQUNBLGlDRHJMZ0IsQ0NzTGhCLGFEcExzQixDQ3FMdEIsYUFBQSxDQUVBLGdDQUNFLE9BQUEsQ0FDQSxVQUFBLENBQ0EsUUFBQSxDQUNBLFNBQUEsQ0FDQSxVQUFBLENBQ0Esa0JBQUEsQ0FDQSxzQ0FDRSxTQUFBLENBRUYsK0NBQ0UsU0FBQSxDQUVGLDhDQUNFLFNBQUEsQ0FDQSxVQUFBLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLy8gVmFyaWFibGVzXFxuJHByaW1hcnktYmFja2dyb3VuZDogI2YzZDJjMTtcXG4kcHJpbWFyeS1iYWNrZ3JvdW5kLW9wYWNpdHk6IHJnYmEoMjQzLCAyMTAsIDE5MywgMC45KTtcXG4kcHJpbWFyeS1iYWNrZ3JvdW5kLWxpZ2h0OiAjRkZFNkQ5O1xcbiRwcmltYXJ5LWJhY2tncm91bmQtbGlnaHQtb3BhY2l0eTogcmdiYSgyNTUsIDIzMCwgMjE3LCAwLjkpO1xcbiRmb250LXRpdGxlLWNvbG9yOiAjMDAxODU4O1xcbiRmb250LXRpdGxlLWdyZXk6ICMzNDNGNUU7XFxuJGZvbnQtcC1jb2xvcjogIzI3MzU1QztcXG4kZm9udC1wLWNvbG9yLWxpZ2h0OiAjZTZkZmQwO1xcbiRmb250LXRpdGxlLWJnLWNvbG9yOiByZ2JhKDAsIDIzLCA4OCwgMC45KTtcXG4kc2Vjb25kYXJ5LWJhY2tncm91bmQ6ICNmZWY2ZTQ7XFxuJHNlY29uZGFyeS1iYWNrZ3JvdW5kLWRhcms6ICNGNUVEREM7XFxuJHNlY29uZGFyeS1iYWNrZ3JvdW5kLWRhcmstb3BhY2l0eTogcmdiYSgyNDUsIDIzNywgMjIwLCAwLjkpO1xcblxcbiRoaWdoLWxpZ2gtaWNvbjogI2Y1ODJhZTtcXG4kcmVkOiAjRjk2OTYxO1xcblxcbiRsZXR0ZXItc3BhY2luZzogMC4wMWVtO1xcblxcblxcblxcblxcbi8qIEZPTlQgRkFNSUxZICovXFxuQGltcG9ydCB1cmwoXFxcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvOndnaHRAMzAwOzUwMDs5MDAmZGlzcGxheT1zd2FwXFxcIik7XFxuLypcXG49PT09PT09PT09PT09PT0gXFxuR2xvYmFsIFN0eWxlcy8gUmVzZXRcXG49PT09PT09PT09PT09PT1cXG4qL1xcblxcbiosXFxuKjo6YWZ0ZXIsXFxuKjo6YmVmb3JlIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5ib2R5LFxcbmgxLFxcbmgyLFxcbmgzLFxcbmg0IHAsXFxuZmlndXJlLFxcbnBpY3R1cmUge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG5oMSxcXG5oMixcXG5oMyxcXG5oNCxcXG5oNSB7XFxuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbmEsXFxubGkge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuYm9keSB7XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCIsIHNhbnMtc2VyaWY7XFxuXFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IC13ZWJraXQtbWluLWNvbnRlbnQgMWZyO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtaW4tY29udGVudCAxZnI7XFxuICBvdmVyZmxvdy14OiBoaWRkZW47XFxufVxcblxcbi8qIGltZ3MgZWFzaWVyIHRvIHdvcmsgd2l0aCAqL1xcbmltZyxcXG5waWN0dXJlIHtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4vKiBmb3JtIGVsZW1lbnRzIGVhc2llciB0byB3b3JrIHdpdGggKi9cXG5pbnB1dCxcXG5idXR0b24sXFxudGV4dGFyZWEsXFxuc2VsZWN0IHtcXG4gIGZvbnQ6IGluaGVyaXQ7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgXFxufVxcbmlucHV0OmZvY3Vze1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcblxcbi8qIHJlbW92ZSBhbmltYXRpb24gZm9yIHBlb3BsZSB3aG8gdHVybmVkIHRoZW0gb2ZmICovXFxuQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG5cXG4gICosXFxuICAqOjpiZWZvcmUsXFxuICAqOjphZnRlciB7XFxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjAxbXMgIWltcG9ydGFudDtcXG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjAxbXMgIWltcG9ydGFudDtcXG4gICAgLXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAxICFpbXBvcnRhbnQ7XFxuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IDEgIWltcG9ydGFudDtcXG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4wMXNtcyAhaW1wb3J0YW50O1xcbiAgICBzY3JvbGwtYmVoYXZpb3I6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuLyogPT09PT09PT09XFxudXRpbGl0eSBjbGFzZXMgXFxuPT09PT09PT09PT0gKi9cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5pbmxpbmUge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4uZmxleCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZ2FwOiB2YXIoLS1nYXAsIDFyZW0pO1xcbn1cXG5cXG4uZ3JpZCB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ2FwOiB2YXIoLS1nYXAsIDFyZW0pO1xcbn1cXG5cXG4uZC1ibG9jayB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuXFxuLyogU1BBQ0lORyAuZmxvdyAqL1xcbi8qIFNlY2xlY3QgYWxsIHRoZSBlbGVtZW50cyBvZiBhIGRpdmlkZXIgZXhjZXB0IHRoZSBmaXJzdCBDaGlsZCAqL1xcbi8qIEl0IGlzIHVzZSB0byBtYWtlIHRoZSB0b3AgYW5kIGJvdHRvbiBsaW5lIGhlaWdodHMgYW5kIGJvcmRlcnMgdGhlIHNhbWUgKi9cXG4vKiBXaGVyZSBpcyBhIHdheSB0byBncm91cCB0aGluZ3MsIGlzIGxvd2VyIG9uIHNwZWNpZmljeSBzbyB3ZSBkb250IG92ZXJ3cml0ZSB0aGluZ3MqL1xcblxcbi5jb250YWluZXIge1xcbiAgcGFkZGluZy1pbmxpbmU6IDByZW07XFxuICBtYXJnaW4taW5saW5lOiBhdXRvO1xcbiAgbWF4LXdpZHRoOiBpbmhlcml0O1xcbn1cXG5cXG4vKiBmb3IgdGhlIHZpc3VhbGx5IGltcGFpcmVkIC1IaWRlIENvbnR0ZW4tICovXFxuLnNyLW9ubHkge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDFweDtcXG4gIGhlaWdodDogMXB4O1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogLTFweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIC8qIGFkZGVkIGxpbmUgKi9cXG4gIGJvcmRlcjogMDtcXG59XFxuXFxuXCIsXCJAdXNlICcuLi9jdXN0b20nIGFzICo7XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMHB4KSB7XFxuICAudG9kby1wYW5lbHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBwYWRkaW5nOiAxZW07XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIG1pbi1oZWlnaHQ6IDQ1dmg7XFxuICAgIG1heC1oZWlnaHQ6IDYwdmg7XFxuICAgIHdpZHRoOiAzNXZoO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZm9udC10aXRsZS1iZy1jb2xvcjtcXG4gICAgY29sb3I6ICRzZWNvbmRhcnktYmFja2dyb3VuZC1kYXJrO1xcbiAgICBvdmVyZmxvdzogYXV0bztcXG4gICAgXFxuICAgIC50aXRsZXtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAxLjV2aDtcXG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgd2hpdGU7XFxuICAgIH1cXG4gICAgLyogTWFrZSB0YXNrcyBzY3JvbGxhYmxlICovXFxuICAgIC50YXNrc3tcXG4gICAgICBtYXgtaGVpZ2h0OiA0MHZoO1xcbiAgICAgIG92ZXJmbG93OiBhdXRvO1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDN2aDtcXG5cXG4gICAgICAudGFza3tcXG4gICAgICAgIHBhZGRpbmc6IC44dmg7XFxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDJ2aCAxZnIgMnZoO1xcbiAgICAgICAgLnRhc2stY2F0ZWdvcnl7XFxuICAgICAgICAgIGNvbG9yOiAkaGlnaC1saWdoLWljb247XFxuICAgICAgICAgIGZvbnQtc2l6ZTogLjllbTtcXG4gICAgICAgIH1cXG4gICAgICAgIC50YXNrLXRpdGxle1xcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgIHotaW5kZXg6IDI7XFxuICAgICAgICB9XFxuICAgICAgICAuVGFza0l0ZW1DaGVja2JveHtcXG4gICAgICAgICAgcGxhY2Utc2VsZjogY2VudGVyO1xcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgICAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICAgICAgY29sb3I6ICRoaWdoLWxpZ2gtaWNvbjtcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGhpZ2gtbGlnaC1pY29uO1xcbiAgICAgICAgICAtd2Via2l0LW1hc2staW1hZ2U6IHVybCguLi8uLi9pbWdzL3VuY2hlY2suc3ZnKSA7XFxuICAgICAgICAgIG1hc2staW1hZ2U6IHVybCguLi8uLi9pbWdzL3VuY2hlY2suc3ZnKSA7XFxuICAgICAgICAgIC13ZWJraXQtbWFzay1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gICAgICAgICAgbWFzay1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gICAgICAgICAgd2lkdGg6IDIuNHZoO1xcbiAgICAgICAgICBoZWlnaHQ6IDIuNHZoO1xcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgIFxcbiAgICAgICAgfVxcbiAgICAgICAgLlRhc2tJdGVtRGVsZXRle1xcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIHBsYWNlLXNlbGY6IGNlbnRlcjtcXG4gICAgICAgICAgd2lkdGg6IDIuNHZoO1xcbiAgICAgICAgICBoZWlnaHQ6IDIuNHZoO1xcbiAgICAgICAgICAvKiBDaGFuZ2UgSWNvbiBjb2xvciAqL1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcmVkO1xcbiAgICAgICAgICAtd2Via2l0LW1hc2staW1hZ2U6IHVybCguLi8uLi9pbWdzL21pbnVzRGVsZXRlLnN2ZykgO1xcbiAgICAgICAgICBtYXNrLWltYWdlOiB1cmwoLi4vLi4vaW1ncy9taW51c0RlbGV0ZS5zdmcpIDtcXG4gICAgICAgICAgLXdlYmtpdC1tYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICAgICAgICBtYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAvLyBXaGVuIHRhc2sgaXMgZG9uZVxcbiAgICAgICAgJlthcmlhLWRpc2FibGVkPVxcXCJ0cnVlXFxcIl17XFxuICAgICAgICAgIGNvbG9yOiByZ2IoMTA0LCAxMDQsIDEwNCk7XFxuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xcbiAgICAgICAgICAuVGFza0l0ZW1DaGVja2JveCB7XFxuICAgICAgICAgICAgLyogQ2hhbmdlIEljb24gY29sb3IgKi9cXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTBhMGEwO1xcbiAgICAgICAgICAgIC13ZWJraXQtbWFzay1pbWFnZTogdXJsKC4uLy4uL2ltZ3MvY2hlY2suc3ZnKSA7XFxuICAgICAgICAgICAgbWFzay1pbWFnZTogdXJsKC4uLy4uL2ltZ3MvY2hlY2suc3ZnKSA7XFxuICAgICAgICAgICAgLXdlYmtpdC1tYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICAgICAgICAgIG1hc2stcmVwZWF0OiBuby1yZXBlYXQ7ICBcXG4gICAgICAgICAgfVxcbiAgICAgICAgICAudGFzay1jYXRlZ29yeSB7XFxuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKiBJTlBVVCBUQVNLIEZJRUxEICovXFxuICAgIC5hZGQtdGFzay1jb250YWluZXJ7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgZ2FwOiAuNXZoO1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICBib3R0b206IC4zdmg7XFxuICAgICAgbGVmdDogM3ZoO1xcbiAgICAgIHdpZHRoOiAzMHZoO1xcbiAgICAgIGhlaWdodDogNXZoO1xcblxcbiAgICAgICNhZGQtdGFzay10ZXh0e1xcbiAgICAgICAgd2lkdGg6IDI1dmg7XFxuICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgIH1cXG4gICAgICBsYWJlbHtcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgdG9wOiAxdmg7XFxuICAgICAgICBsZWZ0OiAydmg7XFxuICAgICAgICBvcGFjaXR5OiAuNDtcXG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgICAgIGNvbG9yOiBibGFjaztcXG4gICAgICB9XFxuICAgICAgaW5wdXR7XFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDFlbTtcXG4gICAgICAgIG91dGxpbmU6IG5vbmU7XFxuICAgICAgICBib3JkZXI6IG5vbmU7XFxuICAgICAgICBkaXNwbGF5OmJsb2NrO1xcbiAgICAgICAgbGluZS1oZWlnaHQ6IDEuNWVtO1xcbiAgICAgICAgaGVpZ2h0OiAyLjJlbTtcXG4gICAgICAgIGZvbnQtc2l6ZTogLjhlbTtcXG5cXG4gICAgICAgIC8vIGxhYmVsIGRpc2FwcGVhciBvbiBmb2N1c1xcbiAgICAgICAgJjpmb2N1c3tcXG4gICAgICAgICAgJiArIGxhYmVse1xcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgICAgLmFkZC10YXNrLWJ0bntcXG4gICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgICAgd2lkdGg6IDV2aDtcXG4gICAgICAgIGhlaWdodDogNXZoO1xcbiAgICAgICAgY29sb3I6ICRoaWdoLWxpZ2gtaWNvbjtcXG4gICAgICAgIC8qIENoYW5nZSBJY29uIGNvbG9yICovXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkaGlnaC1saWdoLWljb247XFxuICAgICAgICAtd2Via2l0LW1hc2staW1hZ2U6IHVybCguLi8uLi9pbWdzL2Fycm93VXAuc3ZnKSA7XFxuICAgICAgICBtYXNrLWltYWdlOiB1cmwoLi4vLi4vaW1ncy9hcnJvd1VwLnN2ZykgO1xcbiAgICAgICAgLXdlYmtpdC1tYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICAgICAgbWFzay1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNTAwcHgpIHtcXG4gIC50b2RvLXBhbmVse1xcbiAgICAudGFza3N7XFxuICAgICAgLnRhc2t7XFxuICAgICAgICAuVGFza0l0ZW1DaGVja2JveHtcXG4gICAgICAgICAgd2lkdGg6IDJ2aDtcXG4gICAgICAgICAgaGVpZ2h0OiAydmg7XFxuICAgICAgICB9XFxuICAgICAgICAuVGFza0l0ZW1EZWxldGV7XFxuICAgICAgICAgIHdpZHRoOiAydmg7XFxuICAgICAgICAgIGhlaWdodDogMnZoO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfSBcXG4gICAgLyogSU5QVVQgVEFTSyBGSUVMRCAqL1xcbiAgICAuYWRkLXRhc2stY29udGFpbmVye1xcbiAgICAgIGJvdHRvbTogLjA1ZW07XFxuICAgICAgbGVmdDogM3ZoO1xcbiAgICAgIFxcbiAgICAgIGxhYmVse1xcbiAgICAgICAgdG9wOiAxLjZ2aDtcXG4gICAgICAgIGxlZnQ6IDJ2aDtcXG4gICAgICB9XFxuICAgICAgXFxuICAgICAgLmFkZC10YXNrLWJ0bntcXG4gICAgICAgIHdpZHRoOiAzdmg7XFxuICAgICAgICBoZWlnaHQ6IDN2aDtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG4gIH1cXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDgwMHB4KSB7XFxuICAgIC50b2RvLXBhbmVse1xcbiAgICAgIC5hZGQtdGFzay1jb250YWluZXIgXFxuICAgICAgICBpbnB1dHtcXG4gICAgICAgICAgaGVpZ2h0OiAxLjhlbTtcXG4gICAgICAgICAgZm9udC1zaXplOiAxZW07XFxuICAgICAgICBcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtaGVpZ2h0OiA1OTZweCkge1xcbiAgICAudG9kby1wYW5lbHtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgcGFkZGluZzogMWVtO1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgbWluLWhlaWdodDogNDV2aDtcXG4gICAgICBtYXgtaGVpZ2h0OiA4NSU7XFxuICAgICAgd2lkdGg6IDgwJTtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZm9udC10aXRsZS1iZy1jb2xvcjtcXG4gICAgICBjb2xvcjogJHNlY29uZGFyeS1iYWNrZ3JvdW5kLWRhcms7XFxuICAgICAgb3ZlcmZsb3c6IGF1dG87XFxuICAgICAgICAgIC8qIElOUFVUIFRBU0sgRklFTEQgKi9cXG4gICAgICAuYWRkLXRhc2stY29udGFpbmVye1xcbiAgICAgICAgZ2FwOiAxdmg7XFxuICAgICAgICBib3R0b206IDF2aDtcXG4gICAgICAgIGxlZnQ6IDh2aDtcXG4gICAgICAgIHdpZHRoOiA4MCU7XFxuICAgICAgICBoZWlnaHQ6IDN2aDtcXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiA0dmg7XFxuICAgICAgICBsYWJlbHtcXG4gICAgICAgICAgdG9wOiAuMDF2aDtcXG4gICAgICAgIH1cXG4gICAgICAgICNhZGQtdGFzay10ZXh0e1xcbiAgICAgICAgICB3aWR0aDogODAlO1xcbiAgICAgICAgfVxcbiAgICAgICAgLmFkZC10YXNrLWJ0bntcXG4gICAgICAgICAgd2lkdGg6IDZ2aDtcXG4gICAgICAgICAgaGVpZ2h0OiA2dmg7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgfVxcbn1cXG4gIFxcbiAgXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvOndnaHRAMzAwOzUwMDs5MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKiwqOjphZnRlciwqOjpiZWZvcmV7bWFyZ2luOjA7cGFkZGluZzowO2JveC1zaXppbmc6Ym9yZGVyLWJveH1ib2R5LGgxLGgyLGgzLGg0IHAsZmlndXJlLHBpY3R1cmV7bWFyZ2luOjB9aDEsaDIsaDMsaDQsaDV7dGV4dC10cmFuc2Zvcm06Y2FwaXRhbGl6ZTtmb250LXdlaWdodDo0MDB9YSxsaXt0ZXh0LWRlY29yYXRpb246bm9uZTtsaXN0LXN0eWxlOm5vbmV9Ym9keXtsaW5lLWhlaWdodDoxLjU7bWluLWhlaWdodDoxMDB2aDtmb250LWZhbWlseTpcXFwiUm9ib3RvXFxcIixzYW5zLXNlcmlmO2dyaWQtdGVtcGxhdGUtcm93czotd2Via2l0LW1pbi1jb250ZW50IDFmcjtncmlkLXRlbXBsYXRlLXJvd3M6bWluLWNvbnRlbnQgMWZyO292ZXJmbG93LXg6aGlkZGVufWltZyxwaWN0dXJle21heC13aWR0aDoxMDAlO2Rpc3BsYXk6YmxvY2t9aW5wdXQsYnV0dG9uLHRleHRhcmVhLHNlbGVjdHtmb250OmluaGVyaXQ7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lfWlucHV0OmZvY3Vze291dGxpbmU6bm9uZTthcHBlYXJhbmNlOm5vbmV9QG1lZGlhKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSl7KiwqOjpiZWZvcmUsKjo6YWZ0ZXJ7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246LjAxbXMgIWltcG9ydGFudDthbmltYXRpb24tZHVyYXRpb246LjAxbXMgIWltcG9ydGFudDstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MSAhaW1wb3J0YW50O2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MSAhaW1wb3J0YW50O3RyYW5zaXRpb24tZHVyYXRpb246LjAxc21zICFpbXBvcnRhbnQ7c2Nyb2xsLWJlaGF2aW9yOmF1dG8gIWltcG9ydGFudH19LmhpZGRlbntkaXNwbGF5Om5vbmV9LmlubGluZXtkaXNwbGF5OmlubGluZS1ibG9ja30uZmxleHtkaXNwbGF5OmZsZXg7Z2FwOnZhcigtLWdhcCwgMXJlbSl9LmdyaWR7ZGlzcGxheTpncmlkO2dhcDp2YXIoLS1nYXAsIDFyZW0pfS5kLWJsb2Nre2Rpc3BsYXk6YmxvY2t9LmNvbnRhaW5lcntwYWRkaW5nLWlubGluZTowcmVtO21hcmdpbi1pbmxpbmU6YXV0bzttYXgtd2lkdGg6aW5oZXJpdH0uc3Itb25seXtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxcHg7aGVpZ2h0OjFweDtwYWRkaW5nOjA7bWFyZ2luOi0xcHg7b3ZlcmZsb3c6aGlkZGVuO2NsaXA6cmVjdCgwLCAwLCAwLCAwKTt3aGl0ZS1zcGFjZTpub3dyYXA7Ym9yZGVyOjB9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9fY3VzdG9tLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBOEJBLHFCQUdFLFFBQUEsQ0FDQSxTQUFBLENBQ0EscUJBQUEsQ0FHRixrQ0FPRSxRQUFBLENBR0YsZUFLRSx5QkFBQSxDQUNBLGVBQUEsQ0FHRixLQUVFLG9CQUFBLENBQ0EsZUFBQSxDQUdGLEtBQ0UsZUFBQSxDQUNBLGdCQUFBLENBQ0EsK0JBQUEsQ0FFQSwwQ0FBQSxDQUNBLGtDQUFBLENBQ0EsaUJBQUEsQ0FJRixZQUVFLGNBQUEsQ0FDQSxhQUFBLENBSUYsNkJBSUUsWUFBQSxDQUNBLHVCQUFBLENBQ0EsZUFBQSxDQUdGLFlBQ0UsWUFBQSxDQUNBLGVBQUEsQ0FLRix1Q0FFRSxxQkFHRSwyQ0FBQSxDQUNBLG1DQUFBLENBQ0EsOENBQUEsQ0FDQSxzQ0FBQSxDQUNBLHFDQUFBLENBQ0EsK0JBQUEsQ0FBQSxDQU9KLFFBQ0UsWUFBQSxDQUdGLFFBQ0Usb0JBQUEsQ0FHRixNQUNFLFlBQUEsQ0FDQSxvQkFBQSxDQUdGLE1BQ0UsWUFBQSxDQUNBLG9CQUFBLENBR0YsU0FDRSxhQUFBLENBU0YsV0FDRSxtQkFBQSxDQUNBLGtCQUFBLENBQ0EsaUJBQUEsQ0FJRixTQUNFLGlCQUFBLENBQ0EsU0FBQSxDQUNBLFVBQUEsQ0FDQSxTQUFBLENBQ0EsV0FBQSxDQUNBLGVBQUEsQ0FDQSxxQkFBQSxDQUNBLGtCQUFBLENBRUEsUUFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvLyBWYXJpYWJsZXNcXG4kcHJpbWFyeS1iYWNrZ3JvdW5kOiAjZjNkMmMxO1xcbiRwcmltYXJ5LWJhY2tncm91bmQtb3BhY2l0eTogcmdiYSgyNDMsIDIxMCwgMTkzLCAwLjkpO1xcbiRwcmltYXJ5LWJhY2tncm91bmQtbGlnaHQ6ICNGRkU2RDk7XFxuJHByaW1hcnktYmFja2dyb3VuZC1saWdodC1vcGFjaXR5OiByZ2JhKDI1NSwgMjMwLCAyMTcsIDAuOSk7XFxuJGZvbnQtdGl0bGUtY29sb3I6ICMwMDE4NTg7XFxuJGZvbnQtdGl0bGUtZ3JleTogIzM0M0Y1RTtcXG4kZm9udC1wLWNvbG9yOiAjMjczNTVDO1xcbiRmb250LXAtY29sb3ItbGlnaHQ6ICNlNmRmZDA7XFxuJGZvbnQtdGl0bGUtYmctY29sb3I6IHJnYmEoMCwgMjMsIDg4LCAwLjkpO1xcbiRzZWNvbmRhcnktYmFja2dyb3VuZDogI2ZlZjZlNDtcXG4kc2Vjb25kYXJ5LWJhY2tncm91bmQtZGFyazogI0Y1RUREQztcXG4kc2Vjb25kYXJ5LWJhY2tncm91bmQtZGFyay1vcGFjaXR5OiByZ2JhKDI0NSwgMjM3LCAyMjAsIDAuOSk7XFxuXFxuJGhpZ2gtbGlnaC1pY29uOiAjZjU4MmFlO1xcbiRyZWQ6ICNGOTY5NjE7XFxuXFxuJGxldHRlci1zcGFjaW5nOiAwLjAxZW07XFxuXFxuXFxuXFxuXFxuLyogRk9OVCBGQU1JTFkgKi9cXG5AaW1wb3J0IHVybChcXFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEAzMDA7NTAwOzkwMCZkaXNwbGF5PXN3YXBcXFwiKTtcXG4vKlxcbj09PT09PT09PT09PT09PSBcXG5HbG9iYWwgU3R5bGVzLyBSZXNldFxcbj09PT09PT09PT09PT09PVxcbiovXFxuXFxuKixcXG4qOjphZnRlcixcXG4qOjpiZWZvcmUge1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbmJvZHksXFxuaDEsXFxuaDIsXFxuaDMsXFxuaDQgcCxcXG5maWd1cmUsXFxucGljdHVyZSB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbmgxLFxcbmgyLFxcbmgzLFxcbmg0LFxcbmg1IHtcXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuYSxcXG5saSB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvXFxcIiwgc2Fucy1zZXJpZjtcXG5cXG4gIGdyaWQtdGVtcGxhdGUtcm93czogLXdlYmtpdC1taW4tY29udGVudCAxZnI7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IG1pbi1jb250ZW50IDFmcjtcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXG59XFxuXFxuLyogaW1ncyBlYXNpZXIgdG8gd29yayB3aXRoICovXFxuaW1nLFxcbnBpY3R1cmUge1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi8qIGZvcm0gZWxlbWVudHMgZWFzaWVyIHRvIHdvcmsgd2l0aCAqL1xcbmlucHV0LFxcbmJ1dHRvbixcXG50ZXh0YXJlYSxcXG5zZWxlY3Qge1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICBcXG59XFxuaW5wdXQ6Zm9jdXN7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgYXBwZWFyYW5jZTogbm9uZTtcXG59XFxuXFxuXFxuLyogcmVtb3ZlIGFuaW1hdGlvbiBmb3IgcGVvcGxlIHdobyB0dXJuZWQgdGhlbSBvZmYgKi9cXG5AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xcblxcbiAgKixcXG4gICo6OmJlZm9yZSxcXG4gICo6OmFmdGVyIHtcXG4gICAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDAuMDFtcyAhaW1wb3J0YW50O1xcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDAuMDFtcyAhaW1wb3J0YW50O1xcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IDEgIWltcG9ydGFudDtcXG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMSAhaW1wb3J0YW50O1xcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjAxc21zICFpbXBvcnRhbnQ7XFxuICAgIHNjcm9sbC1iZWhhdmlvcjogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG4vKiA9PT09PT09PT1cXG51dGlsaXR5IGNsYXNlcyBcXG49PT09PT09PT09PSAqL1xcbi5oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmlubGluZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5mbGV4IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IHZhcigtLWdhcCwgMXJlbSk7XFxufVxcblxcbi5ncmlkIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBnYXA6IHZhcigtLWdhcCwgMXJlbSk7XFxufVxcblxcbi5kLWJsb2NrIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5cXG4vKiBTUEFDSU5HIC5mbG93ICovXFxuLyogU2VjbGVjdCBhbGwgdGhlIGVsZW1lbnRzIG9mIGEgZGl2aWRlciBleGNlcHQgdGhlIGZpcnN0IENoaWxkICovXFxuLyogSXQgaXMgdXNlIHRvIG1ha2UgdGhlIHRvcCBhbmQgYm90dG9uIGxpbmUgaGVpZ2h0cyBhbmQgYm9yZGVycyB0aGUgc2FtZSAqL1xcbi8qIFdoZXJlIGlzIGEgd2F5IHRvIGdyb3VwIHRoaW5ncywgaXMgbG93ZXIgb24gc3BlY2lmaWN5IHNvIHdlIGRvbnQgb3ZlcndyaXRlIHRoaW5ncyovXFxuXFxuLmNvbnRhaW5lciB7XFxuICBwYWRkaW5nLWlubGluZTogMHJlbTtcXG4gIG1hcmdpbi1pbmxpbmU6IGF1dG87XFxuICBtYXgtd2lkdGg6IGluaGVyaXQ7XFxufVxcblxcbi8qIGZvciB0aGUgdmlzdWFsbHkgaW1wYWlyZWQgLUhpZGUgQ29udHRlbi0gKi9cXG4uc3Itb25seSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMXB4O1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAtMXB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgLyogYWRkZWQgbGluZSAqL1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpOyAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgaXNEYXRlIGZyb20gXCIuLi9pc0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcblxuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoZGF0ZSkpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeSA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDSVNPV2VlayhkYXRlKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGF0ZSkuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsInZhciBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMobmV3T3B0aW9ucykge1xuICBkZWZhdWx0T3B0aW9ucyA9IG5ld09wdGlvbnM7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG5cbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkd2Vla1N0YXJ0c09uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX29wdGlvbnMkd2Vla1N0YXJ0c09uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMCk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8uZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAxKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIG9wdGlvbnMpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIG9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZExlYWRpbmdaZXJvcyhudW1iZXIsIHRhcmdldExlbmd0aCkge1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgPyAnLScgOiAnJztcbiAgdmFyIG91dHB1dCA9IE1hdGguYWJzKG51bWJlcikudG9TdHJpbmcoKTtcblxuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuXG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufSIsImltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gJ00nID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09ICdhbScgPyAnYS5tLicgOiAncC5tLic7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCBnZXRVVENEYXlPZlllYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG5pbXBvcnQgbGlnaHRGb3JtYXR0ZXJzIGZyb20gXCIuLi9saWdodEZvcm1hdHRlcnMvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG5cbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfSAvLyBPcmRpbmFsIG51bWJlclxuXG5cbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfSAvLyBQYWRkaW5nXG5cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpOyAvLyBQYWRkaW5nXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBpc29XZWVrID0gZ2V0VVRDSVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnRUUnOlxuICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnRUVFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBpc29EYXlPZldlZWsgPSBkYXlPZldlZWsgPT09IDAgPyA3IDogZGF5T2ZXZWVrO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG5cbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcblxuICAgICAgY2FzZSAnaW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29EYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZVxuXG4gICAgICBjYXNlICdpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnQkInOlxuICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzEtMjRdXG4gIGs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuXG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcblxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG5cbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsInZhciBkYXRlTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIChwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciB0aW1lTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIChwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciBkYXRlVGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiAocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59O1xuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCIvKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn0iLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5cbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uICh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG4gICAgaWYgKCFwYXJzZVJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuXG52YXIgZm9ybWF0UmVsYXRpdmUgPSBmdW5jdGlvbiAodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRSZWxhdGl2ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcblxuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7IC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG5cbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0TG9jYWxlOyIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzXCI7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQicsICdBJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0JDJywgJ0FEJ10sXG4gIHdpZGU6IFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMXN0IHF1YXJ0ZXInLCAnMm5kIHF1YXJ0ZXInLCAnM3JkIHF1YXJ0ZXInLCAnNHRoIHF1YXJ0ZXInXVxufTsgLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4vLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbi8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xuXG52YXIgb3JkaW5hbE51bWJlciA9IGZ1bmN0aW9uIChkaXJ0eU51bWJlciwgX29wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7IC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YC5cbiAgLy9cbiAgLy8gYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcuXG5cbiAgdmFyIHJlbTEwMCA9IG51bWJlciAlIDEwMDtcblxuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnc3QnO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuXG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAncmQnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudW1iZXIgKyAndGgnO1xufTtcblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qc1wiO1xuaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qc1wiO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9vcHRpb25zJGxvY2FsZSwgX3JlZjIsIF9yZWYzLCBfcmVmNCwgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUyLCBfb3B0aW9ucyRsb2NhbGUyJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiwgX3JlZjUsIF9yZWY2LCBfcmVmNywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUzLCBfb3B0aW9ucyRsb2NhbGUzJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQ7XG5cbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgbG9jYWxlID0gKF9yZWYgPSAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbG9jYWxlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRsb2NhbGUgOiBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9jYWxlO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDEpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcblxuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cblxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG5cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgdmFyIG1hdGNoZWQgPSBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKTtcblxuICBpZiAoIW1hdGNoZWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vLUNyZWF0ZSBUYXNrIEFycmF5IHdpdGggdGhlIHRhc2sgdGFncy0vL1xuY2xhc3Mgc3RvcmUge1xuICAvL1RBU0tTLy9cbiAgc3RhdGljIGdldFRhc2tzID0gKCkgPT4ge1xuICAgIGxldCB0YXNrcztcbiAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGFza3MnKSA9PT0gbnVsbCl7XG4gICAgICB0YXNrcyA9IFtdO1xuICAgIH1lbHNle1xuICAgICAgdGFza3MgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0YXNrcycpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhc2tzO1xuICB9XG4gIFxuICBzdGF0aWMgZ2V0U2luZ2xlVGFzayA9ICh0YXNrVGl0bGUpID0+IHtcbiAgICBsZXQgdGFza3MgPSB0aGlzLmdldFRhc2tzKCk7XG4gICAgbGV0IHRhc2s7XG4gICAgdGFza3MuZm9yRWFjaCgoc2luZ2xlVGFzaykgPT4ge1xuICAgICAgaWYoc2luZ2xlVGFzay50aXRsZSA9PSB0YXNrVGl0bGUpe1xuXG4gICAgICAgIHRhc2sgPSBzaW5nbGVUYXNrXG4gICAgICB9O1xuICAgIH0pXG4gICAgcmV0dXJuIHRhc2s7XG4gIH1cblxuICBzdGF0aWMgc2F2ZVRhc2sgKHRhc2tzKXtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGFza3MnLCBKU09OLnN0cmluZ2lmeSh0YXNrcykpXG4gIH1cblxuICBzdGF0aWMgYWRkVGFza1RvTFModGFzayl7XG4gICAgbGV0IHRhc2tzID0gc3RvcmUuZ2V0VGFza3MoKTtcbiAgICB0YXNrcy5wdXNoKHRhc2spO1xuICAgIHRoaXMuc2F2ZVRhc2sodGFza3MpO1xuICB9XG4gIC8vIEFkZCBEYXRlXG4gIHN0YXRpYyBhZGREYXRlKHRhc2tUaXRsZSwgZGF0ZSl7XG4gICAgbGV0IHRhc2tzID0gdGhpcy5nZXRUYXNrcygpO1xuICAgIGxldCB0YXNrSW5kZXggPSB0YXNrcy5maW5kSW5kZXgoKHRhc2spID0+IHRhc2sudGl0bGUgPT0gdGFza1RpdGxlKTtcbiAgICB0YXNrc1t0YXNrSW5kZXhdLmR1ZURhdGUgPSBkYXRlOyBcbiAgICB0aGlzLnNhdmVUYXNrKHRhc2tzKTtcbiAgfVxuICAvLyByZW1vdmUgVGFza1xuICBzdGF0aWMgTFNyZW1vdmVUYXNrKGUpe1xuICAgIGlmKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnVGFza0l0ZW1EZWxldGUnKSl7XG4gICAgICAvLyBnZXQgdGl0bGVcbiAgICAgIGxldCB0aXRsZSA9IGUudGFyZ2V0LnByZXZpb3VzRWxlbWVudFNpYmxpbmcuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJIVE1MO1xuICAgICAgbGV0IHRhc2tzID0gc3RvcmUuZ2V0VGFza3MoKTtcbiAgICAgIHRhc2tzLmZvckVhY2goKHRhc2ssIGluZGV4KSA9PiB7XG4gICAgICAgIGlmKHRhc2sudGl0bGUgPT0gdGl0bGUpe1xuICAgICAgICAgIHRhc2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zYXZlVGFzayh0YXNrcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvLyBDaGFuZ2UgZG9uZSBzdGF0ZSBvbiBMU1xuICBzdGF0aWMgY2hhbmdlRG9uZVN0YXRlKGUpe1xuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ1Rhc2tJdGVtQ2hlY2tib3gnKSl7XG4gICAgICAgIC8vIGdldCB0aXRsZVxuICAgICAgICBsZXQgdGl0bGUgPSBlLnRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJIVE1MO1xuXG4gICAgICAgIGxldCB0YXNrcyA9IHN0b3JlLmdldFRhc2tzKCk7XG4gICAgICAvKkdldCBpbmRleCBieSB0aGUgdGFzayB0aXRsZSBwcmVzc2VkLiBcbiAgICAgIFNvIHRoYXQgd2UgY2hhbmdlIHRoZSBzdGF0ZSBvZiBvbmx5IHRoYXQgdGFzayovIFxuICAgICAgICBsZXQgdGFza0luZGV4ID0gdGFza3MuZmluZEluZGV4KCh0YXNrKSA9PiB0YXNrLnRpdGxlID09IHRpdGxlIClcbiAgICAgICAgaWYgKHRhc2tzW3Rhc2tJbmRleF0uZG9uZSl7XG4gICAgICAgICAgdGFza3NbdGFza0luZGV4XS5kb25lID0gZmFsc2U7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NoYW5nJywgdGFza3NbdGFza0luZGV4XS5kb25lKVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICB0YXNrc1t0YXNrSW5kZXhdLmRvbmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2F2ZVRhc2sodGFza3MpO1xuICBcbiAgICAgICAgfTtcbiAgfVxuXG5cbiAgLy9DQVRFR09SSUVTICBcbiAgc3RhdGljIHN0b3JlQ2F0ZWdvcnkoY2F0ZWdvcnkpIHtcbiAgICBsZXQgY2F0ZWdvcmllcyA9IHN0b3JlLmdldENhdGVnb3JpZXMoKTtcbiAgICBjYXRlZ29yaWVzLnB1c2goY2F0ZWdvcnkpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjYXRlZ29yaWVzJywgSlNPTi5zdHJpbmdpZnkoY2F0ZWdvcmllcykpO1xuICB9XG4gIC8vIEdldCBjYXRlZ29yaWVzXG4gIHN0YXRpYyBnZXRDYXRlZ29yaWVzKCl7XG4gICAgbGV0IGNhdGVnb3JpZXM7XG4gICAgaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NhdGVnb3JpZXMnKSA9PT0gbnVsbCl7XG4gICAgICBjYXRlZ29yaWVzID0gW107XG4gICAgfWVsc2V7XG4gICAgICBjYXRlZ29yaWVzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2F0ZWdvcmllcycpKVxuICAgIH1cbiAgICByZXR1cm4gY2F0ZWdvcmllcztcbiAgfVxuXG4gIC8vIERlbGV0ZSBUYXNrIGlmIHRhc2sgY2F0ZWdvcnkgPT0gY2F0ZWdvcnlcbiAgc3RhdGljIGRlbGV0ZVRhc2tzRnJvbUNhdGVnb3J5KHRhc2tzLCBjYXRlZ29yeSl7XG4gICAgdGFza3MgPSB0YXNrcy5maWx0ZXIodGFzayA9PiB0YXNrLnRhZyAhPT0gY2F0ZWdvcnkpXG4gIFxuICAgIHRoaXMuc2F2ZVRhc2sodGFza3MpO1xuICB9XG5cbiAgc3RhdGljIExTZGVsZXRlQ2F0ZWdvcnkoZSl7XG4gICAgbGV0IHRpdGxlID0gZS50YXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZy5pbm5lckhUTUw7XG4gICAgbGV0IGNhdGVnb3JpZXMgPSBzdG9yZS5nZXRDYXRlZ29yaWVzKCk7XG4gICAgbGV0IHRhc2tzID0gc3RvcmUuZ2V0VGFza3MoKTtcbiAgICBjYXRlZ29yaWVzLm1hcCgoY2F0ZWdvcnksIGluZGV4KT0+e1xuICAgICAgaWYoY2F0ZWdvcnkgPT0gIHRpdGxlKXtcbiAgICAgICAgY2F0ZWdvcmllcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NhdGVnb3JpZXMnLCBKU09OLnN0cmluZ2lmeShjYXRlZ29yaWVzKSk7XG4gICAgICBzdG9yZS5kZWxldGVUYXNrc0Zyb21DYXRlZ29yeSh0YXNrcywgdGl0bGUpO1xuICAgIH0pXG4gIH1cbiAvLyBzYXZlIG9uIGNoYW5nZXMgXG4gIHN0YXRpYyBTYXZlTm90ZXModGFza1RpdGxlLCBodG1sVmFsdWUpIHtcbiAgICBsZXQgdGFza3MgPSB0aGlzLmdldFRhc2tzKCk7XG4gICAgbGV0IHRhc2tJbmRleCA9IHRhc2tzLmZpbmRJbmRleCgodGFzaykgPT4gdGFzay50aXRsZSA9PSB0YXNrVGl0bGUpO1xuICAgIHRhc2tzW3Rhc2tJbmRleF0ubm90ZXMgPSBodG1sVmFsdWU7IFxuICAgIHRoaXMuc2F2ZVRhc2sodGFza3MpO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgc3RvcmUgfTsiLCJpbXBvcnQgeyBzdG9yZSB9IGZyb20gXCIuLi9TdG9yZVRhc2svc3RvcmVcIjtcblxuY2xhc3MgVGFzayB7XG4gIGNvbnN0cnVjdG9yKHRpdGxlLCBjYXRlZ29yeSwgZGF0ZUNyZWF0ZWQpe1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgdGhpcy5kdWVEYXRlID0gbnVsbDtcbiAgICB0aGlzLmRhdGVDcmVhdGVkID0gZGF0ZUNyZWF0ZWQ7XG4gICAgdGhpcy5ub3RlcyA9IHVuZGVmaW5lZDtcbiAgICAvLyBhZGQgZGF0ZSBjcmVhdGVkLCBzdG9yaW5nIHRoZSBkYXRlIHRoZSB0YXNrIGlzIGNyZWF0ZWQuIFxuICB9XG4gIC8vIEFkZCBUYXNrIFRPIFBhbmVsXG4gIHN0YXRpYyBhZGRUYXNrUGFuZWwgKHRhc2spIHtcbiAgICBjb25zdCB0YXNrUGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFza3MnKTtcbiAgICBsZXQgdGFza0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRhc2tEaXYuY2xhc3NMaXN0LmFkZCgndGFzaycsICdncmlkJyk7XG4gICAgXG4gICAgLy8gRGlzcGxheSB0YXNrIGRvbmUgb3IgdW5kb25lXG4gICAgaWYgKHRhc2suZG9uZSkge1xuICAgICAgdGFza0Rpdi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCB0cnVlKVxuICAgIH1lbHNle1xuICAgICAgdGFza0Rpdi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSlcbiAgICB9XG4gICAgdGFza0Rpdi5pbm5lckhUTUwgPSBgXG4gICAgPGJ1dHRvbiB0eXBlPVwicmFkaW9cIiByb2xlPVwiY2hlY2tib3hcIiBhcmlhLWNoZWNrZWQ9XCJmYWxzZVwiIGNsYXNzPVwiVGFza0l0ZW1DaGVja2JveFwiPjwvYnV0dG9uPlxuICAgIDxkaXYgY2xhc3M9XCJ0YXNrLWNvbnRlbnRcIj5cbiAgICAgIDxwIGNsYXNzPVwidGFzay10aXRsZVwiPiR7dGFzay50aXRsZX08L3A+XG4gICAgICA8cCBjbGFzcz1cInRhc2stY2F0ZWdvcnlcIj4ke3Rhc2suY2F0ZWdvcnl9PC9wPlxuICAgIDwvZGl2PlxuICAgIDxidXR0b24gY2xhc3M9XCJUYXNrSXRlbURlbGV0ZVwiPjwvYnV0dG9uPlxuICAgIGA7XG4gICAgXG4gICAgdGFza1BhbmVsLmFwcGVuZENoaWxkKHRhc2tEaXYpO1xuICAgIFxuICB9XG4gIFxuXG4gIC8vIFRha2UgaW5wdXRcbiAgc3RhdGljIHRha2VJbnB1dEV2ZW50IChjYXRlZ29yeSkge1xuICAgIC8vIEZ1bnRpb24gdG8gdGFrZSBpbnB1dCBvbiBlbnRlciBrZXkgcHJlc3NlZCBvciBjbGlja1xuICAgIGNvbnN0IHRha2VJbnB1dCA9IChjYXRlZ29yeSkgPT4ge1xuICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWRkLXRhc2stdGV4dCcpLnZhbHVlO1xuICAgICAgaWYodGl0bGUubGVuZ3RoID4gMCl7XG4gICAgICAgIC8vIGdldCBUb2RheSdzIGRhdGUgXG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBsZXQgbmV3VGFzayA9IG5ldyBUYXNrKHRpdGxlLCBjYXRlZ29yeSwgZGF0ZSk7XG4gICAgICAgIC8vIGFkZCB0YXNrIHRvIERPTVxuICAgICAgICBUYXNrLmFkZFRhc2tQYW5lbChuZXdUYXNrKTtcbiAgICAgICAgLy8gU3RvcmUgdGFzayBvbiBMb2NhbCBzdG9yYWdlXG4gICAgICAgIHN0b3JlLmFkZFRhc2tUb0xTKG5ld1Rhc2spO1xuICAgICAgfWVsc2V7XG4gICAgICAgIGFsZXJ0KFwiUGxlYXNlIGVudGVyIGF0IGxlYXN0IG9uZSBjaGFyYWN0ZXJcIilcbiAgICAgIH1cbiAgICAgIFRhc2suY2xlYXJJbnB1dEZpZWxkKCcjYWRkLXRhc2stdGV4dCcpO1xuICAgIH1cbiAgICBjb25zdCB0YXNrQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC10YXNrLWNvbnRhaW5lcicpO1xuICAgIGNvbnN0IGFkZEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtdGFzay1idG4nKTtcbiAgICAvLyBFTlRFUiBLRVlcbiAgICB0YXNrQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGUpID0+IHtcbiAgICAgIGlmKGUua2V5ID09PSAnRW50ZXInKXtcbiAgICAgICAgdGFrZUlucHV0KGNhdGVnb3J5KVxuICAgICAgfVxuICAgIH0pXG4gICAgLy8gbW91c2V1cCB1bmxpa2UgY2xpY2sgZG9lcyBub3QgaW50ZXJhY3Qgd2l0aCB0aGUgZW50ZXIga2V5XG4gICAgYWRkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoKSA9PntcbiAgICAgIHRha2VJbnB1dChjYXRlZ29yeSk7XG4gICAgfSlcbiAgICAvLyBtb2JpbGUgaGFuZGxlclxuICAgIC8vIGFkZEJ0bi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsICgpID0+e1xuICAgIC8vICAgdGFrZUlucHV0KGNhdGVnb3J5KTtcbiAgICAvLyB9KVxuICB9XG5cbiAgLy8gQ2xlYXIgSW5wdXQgZmllbGRzXG4gIHN0YXRpYyBjbGVhcklucHV0RmllbGQoZWxlbWVudCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudCkudmFsdWUgPSAnJztcbiAgfVxuICBcbiAgLy8gQ2hhbmdlIHRhc2sgZG9uZXMgc3RhdHVzIG9uIHNjcmVlblxuICBzdGF0aWMgdGFza0RvbmUoZSkge1xuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ1Rhc2tJdGVtQ2hlY2tib3gnKSl7XG4gICAgICBjb25zdCB0YXNrID0gZS50YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICBcbiAgICAgIGxldCB0aXRsZSA9IGUudGFyZ2V0Lm5leHRFbGVtZW50U2libGluZy5maXJzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUw7XG4gICAgICBjb25zdCB0YXNrcyA9IHN0b3JlLmdldFRhc2tzKCk7XG4gICAgICAvKkdldCBpbmRleCBieSB0aGUgdGFzayB0aXRsZSBwcmVzc2VkLiBcbiAgICAgIFNvIHRoYXQgd2UgY2hhbmdlIHRoZSBzdGF0ZSBvZiBvbmx5IHRoYXQgdGFzayovIFxuICAgICAgbGV0IHRhc2tJbmRleCA9IHRhc2tzLmZpbmRJbmRleCgodGFzaykgPT4gdGFzay50aXRsZSA9PSB0aXRsZSApXG4gICAgICBpZiAodGFza3NbdGFza0luZGV4XS5kb25lKXtcbiAgICAgICAgdGFzay5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgICAgIFxuICAgICAgfWVsc2V7XG4gICAgICAgIHRhc2suc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgdHJ1ZSk7XG4gICAgICB9IFxuICAgIH1cbiAgfVxuXG4gIC8vIERlbGV0ZSBUYXNrXG4gIHN0YXRpYyBkZWxldGVUYXNrKGUpe1xuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ1Rhc2tJdGVtRGVsZXRlJykpe1xuICAgICAgZS50YXJnZXQucGFyZW50RWxlbWVudC5yZW1vdmUoKTtcbiAgICB9XG4gIH1cblxuICAvLyBEaXNwbGF5IHRhc2tzXG4gIHN0YXRpYyBkaXNwbGF5VGFza3MgPSAoKSA9PiB7XG4gICAgbGV0IHRhc2tzID0gc3RvcmUuZ2V0VGFza3MoKTtcbiAgICB0YXNrcy5mb3JFYWNoKCh0YXNrKSA9PiB7XG4gICAgICBUYXNrLmFkZFRhc2tQYW5lbCh0YXNrKVxuICAgICAgXG4gICAgfSk7XG4gIH1cbiAgXG4gIHN0YXRpYyBkaXNwbGF5VGFza3NDYXRlZ29yaWNhbGx5ID0gKGNhdGVnb3J5KSA9PiB7XG4gICAgbGV0IHRhc2tzID0gc3RvcmUuZ2V0VGFza3MoKTtcbiAgICB0YXNrcy5tYXAoKHRhc2spID0+IHtcbiAgICAgIGlmKHRhc2suY2F0ZWdvcnkgPT0gY2F0ZWdvcnkpIHtcbiAgICAgICAgVGFzay5hZGRUYXNrUGFuZWwodGFzayk7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuICBcbn1cblxuZXhwb3J0e1Rhc2t9OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vX3RvZG9QYW5lbC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vX3RvZG9QYW5lbC5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICcuLi9zdHlsZXMvc2Fzc01vZHVsZXMvX3RvZG9QYW5lbC5zY3NzJ1xuY29uc3QgdG9kb1BhbmVsID0gKGZvbGRlcikgPT4ge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3RvZG8tcGFuZWwnKTtcbiAgY29udGFpbmVyLmlubmVySFRNTCA9IGBcbiAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5cbiAgICAgIDxoMT4ke2ZvbGRlcn08L2gxPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ0YXNrc1wiPlxuICAgICAgPCEtLSB0YXNrIDEgLS0+XG4gICAgICBcblxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJhZGQtdGFzay1jb250YWluZXJcIj5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiYWRkLXRhc2stdGV4dFwiIG5hbWU9XCJhZGQtdGFzay10ZXh0XCI+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJhZGQtdGFzay1sYWJlbFwiIGZvcj1cImFkZC10YXNrLXRleHRcIj5BZGQgbmV3IHRhc2s8L2xhYmVsPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cImFkZC10YXNrLWJ0biBidG5cIj48c3BhbiBjbGFzcz1cInNyLW9ubHlcIj5hZGQgdGFzayBidG48L3NwYW4+PC9idXR0b24+XG4gICAgPC9kaXY+XG4gIGBcbiAgXG4gIHJldHVybiBjb250YWluZXI7XG59XG5leHBvcnQgZGVmYXVsdCB0b2RvUGFuZWw7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9faG9tZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vX2hvbWUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuaW1wb3J0ICcuLi9zdHlsZXMvc2Fzc01vZHVsZXMvX2hvbWUuc2NzcydcbmltcG9ydCB0b2RvUGFuZWwgZnJvbSAnLi9hZGRUb0RvJztcbmltcG9ydCBzaWRlQmFyIGZyb20gJy4vc2lkZUJhcic7XG5cbmNsYXNzIGhvbWUge1xuICBzdGF0aWMgaGVhZGVyKCl7XG4gICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaGVhZGVyJyk7XG4gICAgaGVhZGVyLmNsYXNzTGlzdC5hZGQoJ3ByaW1hcnktaGVhZGVyJyk7XG4gICAgaGVhZGVyLmlubmVySFRNTCA9IGBcbiAgICA8YnV0dG9uIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiIGNsYXNzPVwibW9iaWxlLXRvZ2dsZVwiIGFyaWEtY29udHJvbHM9XCJjYXRlZ29yaWVzLW5hdmlnYXRpb25cIj48L2J1dHRvbj5cbiAgICA8ZGl2IGNsYXNzPVwic2lkZS1wYW5lbFwiPiBcbiAgICBcbiAgICA8dWwgaWQ9XCJjYXRlZ29yaWVzLW5hdmlnYXRpb25cIiBjbGFzcz1cImNhdGVnb3JpZXMtbmF2aWdhdGlvbiBmbGV4XCIgZGF0YS12aXNpYmxlPVwiZmFsc2VcIj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2F0ZWdvcmllcy10aXRsZVwiPlxuICAgICAgICAgIDxoMj5DYXRlZ29yaWVzPC9oMj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImFkZC1jYXRlZ29yaWVzXCIgaWQ9XCJhZGQtY2F0ZWdvcmllc1wiPjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+ICAgIFxuICAgICAgICA8bGkgY2xhc3M9XCJjYXRlZ29yeVwiPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8cCBjbGFzcz1cImNhdGVnb3J5LS10aXRsZVwiPkFsbCBUYXNrczwvcD5cbiAgICAgICAgICAgIFxuICAgICAgICAgIDwvZGl2PiBcbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpIGNsYXNzPVwiY2F0ZWdvcnlcIj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPHAgY2xhc3M9XCJjYXRlZ29yeS0tdGl0bGVcIj5Xb3JrPC9wPlxuICAgICAgICAgICAgXG4gICAgICAgICAgPC9kaXY+IFxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgICBgXG4gICAgcmV0dXJuIGhlYWRlcjtcbiAgfVxuICBcbiAgc3RhdGljIGhlcm8oKSB7XG4gICAgY29uc3QgaGVybyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGhlcm8uY2xhc3NMaXN0LmFkZCgnY29udGFpbmVyJywgJ2NvbnRhaW5lci1oZXJvJyk7XG4gICAgaGVyby5hcHBlbmRDaGlsZCh0b2RvUGFuZWwoJ0FsbCBUYXNrcycpKTtcbiAgICAvLyBEZXNjIFBhbmVsLCBKdXN0IGZvciBzdHlsaW5nXG5cbiAgICAvLyBEaXNwbGF5IGNhdGVnb3JpZXMgb24gc2lkZSBwYW5lbC5cbiAgICBzaWRlQmFyLmRpc3BsYXlDYXRlZ29yaWVzKClcbiAgICByZXR1cm4gaGVybztcbiAgfVxuXG4gIHN0YXRpYyBjbGVhckhlcm8gKCkge1xuICAgIGNvbnN0IHRvZG9QYW5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLXBhbmVsJyk7XG4gICAgdG9kb1BhbmVsLnRleHRDb250ZW50ID0gJyc7XG4gIH1cbiAgc3RhdGljIGNsZWFyRGVzY1BhbmVsKCl7XG4gICAgY29uc3QgZGVzY1BhbmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhc2tEZXNjUGFuZWwnKTtcbiAgICBkZXNjUGFuZWwucmVtb3ZlKCk7XG4gIH1cblxuICAvLyB3cmFwIGFsbCBlbGVtZW50cyB3aGVuIHBvcHVwIGlzIGNsaWNrZWQsIHNvIHRoZSBwb3AgdXAgaXNudCB3cmFwcGVkLiBcbiAgc3RhdGljIGJsdXJFbGVtZW50cygpe1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKS5jbGFzc0xpc3QuYWRkKCdibHVyLWRvY3VtZW50Jyk7XG4gICAgLy8gY29uc29sZS5sb2cobWFpbik7XG4gIH1cbiAgc3RhdGljIGRlQmx1ckVsZW1lbnRzKCl7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXItZG9jdW1lbnQnKTtcbiAgfVxufVxuXG5cblxuXG5leHBvcnQge2hvbWV9IiwiaW1wb3J0IHsgc3RvcmUgfSBmcm9tIFwiLi4vU3RvcmVUYXNrL3N0b3JlXCI7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSBcIi4vYWRkVGFza1wiO1xuaW1wb3J0IHsgaG9tZSB9IGZyb20gXCIuL2hvbWVcIjtcbi8vIGltcG9ydCAnLi4vc3R5bGVzL3Nhc3NNb2R1bGVzL190b2RvUGFuZWwuc2NzcydcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBzaWRlQmFyIHtcbiAgLy8gVG9nZ2xlXG4gIHN0YXRpYyB0b2dnbGUgKCkge1xuICAgIGNvbnN0IHRvZ2dsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2JpbGUtdG9nZ2xlJyk7XG4gICAgY29uc3QgY2F0ZWdvcmllc05hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXRlZ29yaWVzLW5hdmlnYXRpb24nKTtcbiAgICB0b2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBjb25zdCB2aXNpYmlsaXR5ID0gY2F0ZWdvcmllc05hdi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmlzaWJsZScpO1xuICAgICAgaWYgKHZpc2liaWxpdHkgPT09ICAnZmFsc2UnKVxuICAgICAge1xuICAgICAgICAvLyBFeHBhbmQgbmF2XG4gICAgICAgIGNhdGVnb3JpZXNOYXYuc2V0QXR0cmlidXRlKCdkYXRhLXZpc2libGUnLCB0cnVlKTtcbiAgICAgICAgLy8gY2hhbmdlIEhhbS1CdG4gd2hlbiBhcmlhIGlzIGV4cGFuYWRlZFxuICAgICAgICB0b2dnbGUuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICB9ZWxzZVxuICAgICAge1xuICAgICAgICBjYXRlZ29yaWVzTmF2LnNldEF0dHJpYnV0ZSgnZGF0YS12aXNpYmxlJywgZmFsc2UpO1xuICAgICAgICB0b2dnbGUuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBQT1AgVVAgLy9cbiAgLypcbiAgV2hlbiBJY29uKCspIHRvIGFkZCBjYXRlZ29yeSBpcyBwcmVzc2VkXG4gICAgc2hvdyB0aGUgY2F0ZWdvcnkgUE9QVVAgcGFuZWxcbiAgKi8gXG4gIHN0YXRpYyBDYXRlZ29yeVBvcFVwUGFuZWwgKCkge1xuICAgIGNvbnN0IGFkZFByb2plY3RQb3BVcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGFkZFByb2plY3RQb3BVcC5jbGFzc0xpc3QuYWRkKCdhZGQtcHJvamVjdC1wb3BVcCcpO1xuICAgIGFkZFByb2plY3RQb3BVcC5zZXRBdHRyaWJ1dGUoJ3Byb2plY3QtcG9wLXZpc2libGUnLCBmYWxzZSk7XG4gICAgXG4gICAgLy8gVGhpcyBzaG91bGQgYmUgb24gdGhlIGhlYWRlciBJIHRoaW5rLiBJIG1lYW4gb24gdGhlIG1haW4gYnkgZGVmYXVsdFxuICAgIGFkZFByb2plY3RQb3BVcC5pbm5lckhUTUwgPSBgXG4gICAgPGxhYmVsIGZvcj1cImFkZC1wcm9qZWN0LXRleHRcIj5Qcm9qZWN0IG5hbWU6PC9sYWJlbD5cbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImFkZC1wcm9qZWN0LXRleHRcIiBuYW1lPVwiYWRkLXByb2plY3QtdGV4dFwiPlxuICAgIDxkaXYgY2xhc3M9XCJidG5zLXBvcFVwXCI+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiY2FuY2VsLXByb2plY3QtYnRuXCI+Q2FuY2VsPC9idXR0b24+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiYWRkLXByb2plY3QtYnRuXCI+QWRkPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICAgYFxuICAgIHJldHVybiBhZGRQcm9qZWN0UG9wVXA7XG4gIH1cbiAgc3RhdGljIHNob3dBZGRDYXRlZ29yeVBhbmVsKGUpIHtcbiAgICBjb25zdCBhZGRQcm9qZWN0UG9wVXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXByb2plY3QtcG9wVXAnKTtcbiAgICBpZihlLnRhcmdldC5pZCA9PSAnYWRkLWNhdGVnb3JpZXMnKXtcbiAgICAgIGhvbWUuYmx1ckVsZW1lbnRzKCk7XG5cbiAgICAgIGFkZFByb2plY3RQb3BVcC5zZXRBdHRyaWJ1dGUoJ3Byb2plY3QtcG9wLXZpc2libGUnLCB0cnVlKTtcbiAgICAgIFxuICAgICAgc2lkZUJhci5jYW5jZWxQb3BVcEJ0bigpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNhbmNlbCBCVE4gb24gUE9QVVAgKHRoaXMgYnRuIGFsc28gbWFrZXMgdGhlIHBvcFVQIGRpc2FwcGVhci4pXG4gIHN0YXRpYyBjYW5jZWxQb3BVcEJ0biAoKXtcbiAgICBjb25zdCBhZGRQcm9qZWN0UG9wVXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXByb2plY3QtcG9wVXAnKTtcbiAgICBjb25zdCBjYW5jZWxCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FuY2VsLXByb2plY3QtYnRuJyk7XG4gICAgY2FuY2VsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgYWRkUHJvamVjdFBvcFVwLnNldEF0dHJpYnV0ZSgncHJvamVjdC1wb3AtdmlzaWJsZScsIGZhbHNlKTtcbiAgICAgIGhvbWUuZGVCbHVyRWxlbWVudHMoKTtcbiAgICB9KVxuICB9XG5cbiAgLy9BZGQgQ2F0ZWdvcnkgd2hlbiBwb3AgVXAgPDxhZGQ+PiBidG4gaXMgcHJlc3NlZFxuICBzdGF0aWMgYWRkTmV3Q2F0ZWdvcnlCdG4gKCkge1xuXG4gICAgY29uc3QgYWRkUHJvamVjdFBvcFVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC1wcm9qZWN0LXBvcFVwJyk7XG4gICAgY29uc3QgdGFrZUlucHV0ID0gKCkgPT57XG4gICAgICBsZXQgdGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWRkLXByb2plY3QtdGV4dCcpLnZhbHVlO1xuICAgICAgdGl0bGUgPSB0aXRsZS50b0xvd2VyQ2FzZSgpO1xuICBcbiAgICAgIGlmKHRpdGxlLmxlbmd0aCA8IDEpe1xuICAgICAgICBhbGVydCgnUGxlYXNlIGVudGVyIGF0IGxlYXN0IG9uZSBjaGFyYWN0ZXInKVxuICAgICAgfWVsc2V7XG4gICAgICAgIHNpZGVCYXIuYWRkQ2F0ZWdvcnkodGl0bGUpO1xuICAgICAgICAvLyBMb2NhbCBTdG9yYWdlXG4gICAgICAgIHN0b3JlLnN0b3JlQ2F0ZWdvcnkodGl0bGUpO1xuICAgICAgICBob21lLmRlQmx1ckVsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIFRhc2suY2xlYXJJbnB1dEZpZWxkKCcjYWRkLXByb2plY3QtdGV4dCcpO1xuICAgICAgLy8gSGlkZSBCVE5cbiAgICAgIGFkZFByb2plY3RQb3BVcC5zZXRBdHRyaWJ1dGUoJ3Byb2plY3QtcG9wLXZpc2libGUnLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY29uc3QgYWRkQ2F0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC1wcm9qZWN0LWJ0bicpO1xuICAgIGFkZFByb2plY3RQb3BVcC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChlKT0+e1xuICAgICAgaWYoZS5rZXkgPT09ICdFbnRlcicpe1xuICAgICAgICB0YWtlSW5wdXQoKVxuICAgICAgfVxuICAgIH0pXG4gICAgLy8gbW91c2V1cCB1bmxpa2UgY2xpY2sgZG9lcyBub3QgaW50ZXJhY3Qgd2l0aCB0aGUgZW50ZXIga2V5XG4gICAgYWRkQ2F0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoKT0+e1xuICAgICAgdGFrZUlucHV0KCk7XG4gICAgfSlcbiAgICAvLyBtb2JpbGUgaGFuZGxlclxuICAgIGFkZENhdEJ0bi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsICgpPT57XG4gICAgICB0YWtlSW5wdXQoKTtcbiAgICB9KVxuICB9XG5cbiAgLy8gQWRkIENhdGVnb3J5IC8vXG4gIHN0YXRpYyBhZGRDYXRlZ29yeSAoY2F0ZWdvcnkpIHtcbiAgICBjb25zdCBmb3JtYXRUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgY29uc3QgY2F0ZWdvcmllc0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2F0ZWdvcmllcy1uYXZpZ2F0aW9uJyk7XG4gICAgLy8gQ3JlYXRlIGNhdGVnb3J5IHRpdGxlIFBhcmFncmFwaCBlbGVtZW50LiBcbiAgICBjb25zdCBjYXRlZ29yeVRpdGxlID0gYDxwIGNsYXNzPVwiY2F0ZWdvcnktLXRpdGxlXCI+JHtjYXRlZ29yeX08L3A+YDtcbiAgICBmb3JtYXRUaXRsZS5jbGFzc0xpc3QuYWRkKCdjYXRlZ29yeScpO1xuXG4gICAgZm9ybWF0VGl0bGUuaW5uZXJIVE1MID0gYFxuICAgIDxkaXY+XG4gICAgICAke2NhdGVnb3J5VGl0bGV9XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiZGVsZXRlLWNhdGVnb3J5XCI+PC9idXR0b24+XG4gICAgPC9kaXY+YDtcbiAgICAvLyBhZGQgdG8gZG9tIGxpc3RcbiAgICBjYXRlZ29yaWVzTGlzdC5hcHBlbmRDaGlsZChmb3JtYXRUaXRsZSk7XG4gIH1cblxuICAvLyBEaXNwbGF5IENhdGVnb3JpZXNcbiAgc3RhdGljIGRpc3BsYXlDYXRlZ29yaWVzICgpIHtcbiAgICBjb25zdCBjYXRlZ29yaWVzID0gc3RvcmUuZ2V0Q2F0ZWdvcmllcygpO1xuICAgIGNhdGVnb3JpZXMubWFwKChjYXRlZ29yeSkgPT4ge1xuICAgICAgc2lkZUJhci5hZGRDYXRlZ29yeShjYXRlZ29yeSk7XG4gICAgfSlcbiAgfVxuXG4gIC8vIFN3aXRjaCBiZXR0d2VlbiBjYXRlZ29yaWVzIC8vXG4gIC8vIENyZWF0ZSBuZXcgdG9kbyBQYW5lbCB3aGVuIGEgQ2F0ZWdvcnkgaXMgcHJlc3NlZC4gXG4gIHN0YXRpYyBjYXRlZ29yeVByZXNzZWQoZSkge1xuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NhdGVnb3J5LS10aXRsZScpKXtcbiAgICAgIHNpZGVCYXIubmV3VG9Eb1BhbmVsKGUudGFyZ2V0LmlubmVySFRNTClcbiAgICB9XG4gIH1cbiAgLy8gTmV3IHRvZG8gUGFuZWxcbiAgc3RhdGljIG5ld1RvRG9QYW5lbChjYXRlZ29yeSkge1xuICAgIGNvbnN0IHRvZG9QYW5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLXBhbmVsJyk7XG4gICAgY29uc3QgY2F0ZWdvcmllc05hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXRlZ29yaWVzLW5hdmlnYXRpb24nKTtcbiAgICBjb25zdCB0b2dnbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9iaWxlLXRvZ2dsZScpO1xuICAgIC8vIERlbGV0ZSBwcmV2aW91cyBwYW5lbFxuICAgIGhvbWUuY2xlYXJIZXJvKCk7XG4gICAgLy8gSGlkZSBzaWRlIHBhbmVsXG4gICAgY2F0ZWdvcmllc05hdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmlzaWJsZScsIGZhbHNlKTtcbiAgICB0b2dnbGUuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgIC8vIE5ldyB0b2RvIHBhbmVsXG4gICAgdG9kb1BhbmVsLmlubmVySFRNTCA9IGBcbiAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5cbiAgICA8aDE+JHtjYXRlZ29yeX08L2gxPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ0YXNrc1wiPlxuICAgIDwhLS0gdGFzayAxIC0tPlxuXG4gICAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYWRkLXRhc2stY29udGFpbmVyXCI+XG4gICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImFkZC10YXNrLXRleHRcIiBuYW1lPVwiYWRkLXRhc2stdGV4dFwiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwiYWRkLXRhc2stbGFiZWxcIiBmb3I9XCJhZGQtdGFzay10ZXh0XCI+QWRkIG5ldyB0YXNrPC9sYWJlbD5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJhZGQtdGFzay1idG4gYnRuXCI+QWRkPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICAgYFxuICAgIGlmIChjYXRlZ29yeSA9PSAnQWxsIFRhc2tzJyl7XG4gICAgICBUYXNrLmRpc3BsYXlUYXNrcygpO1xuICAgICAgVGFzay50YWtlSW5wdXRFdmVudCgnZ2VuZXJhbCcpXG4gICAgfWVsc2V7XG4gICAgICBUYXNrLmRpc3BsYXlUYXNrc0NhdGVnb3JpY2FsbHkoY2F0ZWdvcnkpO1xuICAgIH1cbiAgICBcbiAgICBUYXNrLnRha2VJbnB1dEV2ZW50KGNhdGVnb3J5KVxuICB9XG4gICAgXG4gIC8vIERlbGV0ZSBjYXRlZ29yaWVzLiBcbiAgc3RhdGljIGRlbGV0ZUNhdGVnb3J5KGUpIHtcbiAgICBjb25zdCBkZWxldGVCdG5QcmVzc2VkID0gZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkZWxldGUtY2F0ZWdvcnknKTtcbiAgICBpZihkZWxldGVCdG5QcmVzc2VkKXtcbiAgICAgIGUudGFyZ2V0LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmUoKTtcbiAgICAgIHN0b3JlLkxTZGVsZXRlQ2F0ZWdvcnkoZSk7XG4gICAgfVxuICB9XG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9fdGFza1BhbmVsLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9fdGFza1BhbmVsLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBzdG9yZSB9IGZyb20gXCIuLi9TdG9yZVRhc2svc3RvcmVcIjtcbmltcG9ydCAnLi4vc3R5bGVzL3Nhc3NNb2R1bGVzL190YXNrUGFuZWwuc2Nzcyc7XG4vLyBkYXRlLWZuc1xuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSBcImRhdGUtZm5zXCI7XG5pbXBvcnQgeyBob21lIH0gZnJvbSBcIi4vaG9tZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB0YXNrRGVzY1BhbmVsIHtcbiAgc3RhdGljIHBhbmVsICh0YXNrKSB7XG4gICAgY29uc3QgcGFuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwYW5lbC5jbGFzc0xpc3QuYWRkKCd0YXNrRGVzY1BhbmVsJyk7XG4gICAgY29uc3QgZHVlRGF0ZSA9IHRhc2suZHVlRGF0ZSA9PT0gbnVsbCA/ICdObyBEdWUgZGF0ZSBhZGRlZCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNjcmVlbkRhdGVGb3JtYXQodGFzay5kdWVEYXRlKSA7XG4gICAgY29uc3Qgbm90ZXMgPSB0YXNrLm5vdGVzID09PSB1bmRlZmluZWQgPyAnJyA6IHRhc2subm90ZXM7XG5cbiAgICBwYW5lbC5pbm5lckhUTUwgPSBgXG4gICAgPGJ1dHRvbiBjbGFzcz1cImhpZGUtZGVzYy1wYW5lbFwiPjwvYnV0dG9uPlxuICAgIDxkaXYgY2xhc3M9XCJ0aXRsZSB0aXRsZS0tdGFza1wiPlxuICAgICAgPGgxPiR7dGFzay50aXRsZX08L2gxPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJzZXQtZGF0ZVwiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwiYWRkLWRhdGUtbGFiZWxcIiBmb3I9XCJkdWUtRGF0ZVwiPkFkZCBkdWUgZGF0ZTwvbGFiZWw+XG4gICAgICA8aW5wdXQgdHlwZT1cImRhdGVcIiBpZD1cImR1ZS1EYXRlXCIgbmFtZT1cImR1ZS1EYXRlXCI+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiZHVlLURhdGUtYnRuXCI+PC9idXR0b24+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cIm5vdGVzLXBhbmVsXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dGFyZWFcIiByb2xlPVwidGV4dGJveFwiIGNvbnRlbnRlZGl0YWJsZT1cInRydWVcIj4ke25vdGVzfTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2PlxuICAgICAgPHAgY2xhc3M9XCJkZWFkbGluZVwiPkRlYWRsaW5lOiAke2R1ZURhdGV9PC9zcGFuPjwvcD5cbiAgICAgIDxwPkRhdGUgQ3JlYXRlZDogJHt0aGlzLm9uU2NyZWVuRGF0ZUZvcm1hdCh0YXNrLmRhdGVDcmVhdGVkKX08L3A+XG4gICAgPC9kaXY+XG4gICAgYFxuICAgIGNvbnN0IGhlcm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyLWhlcm8nKVxuICAgIC8vIFRoZSBlLnRhcmdldCBnZXRzIHRoZSB0aXRsZVxuICAgIGhlcm8uYXBwZW5kQ2hpbGQocGFuZWwpXG4gICAgXG4gICAgdGhpcy51cGRhdGVOb3Rlc09uSXB1dCgpO1xuICAgIHJldHVybiBwYW5lbFxuICB9XG5cblxuICBzdGF0aWMgc2hvd1BhbmVsKGUpe1xuICAgIGlmKGUudGFyZ2V0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0YXNrLWNvbnRlbnQnKSl7XG4gICAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgIGNvbnN0IHRhc2tUaXRsZSA9ICBlLnRhcmdldC5wYXJlbnRFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkLnRleHRDb250ZW50O1xuICAgICAgY29uc3QgdGFzayA9IHN0b3JlLmdldFNpbmdsZVRhc2sodGFza1RpdGxlKTtcbiAgICAgIC8vIFRoZSBlLnRhcmdldCBnZXRzIHRoZSB0aXRsZVxuICAgICAgYm9keS5hcHBlbmRDaGlsZCh0aGlzLnBhbmVsKHRhc2spKVxuXG4gICAgICBcbiAgICAgIFxuICAgIH1cbiAgfVxuICBzdGF0aWMgcmVtb3ZlUGFuZWwoZSkge1xuICAgIGlmKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaGlkZS1kZXNjLXBhbmVsJykpe1xuICAgICAgaG9tZS5jbGVhckRlc2NQYW5lbCgpO1xuXG4gICAgfVxuICB9XG5cbiAgLypcbiAgRk9STUFUIHRoZSBzdG9yZWQgZGF0ZSB2YWx1ZSBmb3Igc2hvd2luZyBpdCBvbiBzY3JlZW4gdG8gbW0vZGQveXl5eS4gXG4gICovXG4gIHN0YXRpYyBvblNjcmVlbkRhdGVGb3JtYXQoZGF0ZSl7XG4gICAgbGV0IHRvRm9ybWF0ID0gbmV3IERhdGUoZGF0ZSkudG9KU09OKCkuc2xpY2UoMCwxMCk7XG4gICAgbGV0IGZvcm1hdGVkRGF0ZSA9IGZvcm1hdChuZXcgRGF0ZSh0b0Zvcm1hdC5yZXBsYWNlKC8tL2csICcvJykpLCAnTU0vZGQveXl5eScpO1xuICAgIHJldHVybiBmb3JtYXRlZERhdGU7XG4gIH1cbiAgXG4gICAgLy8gRGF0ZVxuICAgIHN0YXRpYyBnZXREYXRlIChlKXtcbiAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2R1ZS1EYXRlLWJ0bicpKXtcbiAgICAgICAgbGV0IGRhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZHVlLURhdGUnKS52YWx1ZTtcbiAgICAgICAgY29uc29sZS5sb2coZGF0ZSk7XG4gICAgICAgIC8vIG5vdGU6IHRoaXMgc2hvdWxkIGJlIGEgZGVmYXVsdCBkYXRlLCBmb3JtYXQgaXQgb24gdXBkYXRlIGRhdGVcbiAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICBjb25zdCB0aXRsZSA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZy5maXJzdEVsZW1lbnRDaGlsZC50ZXh0Q29udGVudDtcbiAgICAgICAgc3RvcmUuYWRkRGF0ZSh0aXRsZSwgZGF0ZSk7XG4gICAgICAgIHRoaXMudXBkYXRlRGF0ZSh0aXRsZSk7XG5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgdXBkYXRlRGF0ZSh0aXRsZSl7XG4gICAgICAvLyBTaG93IGRhdGVcbiAgICAgIGNvbnN0IGRlYWRsaW5lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlYWRsaW5lJyk7XG4gICAgICBjb25zdCB0YXNrID0gc3RvcmUuZ2V0U2luZ2xlVGFzayh0aXRsZSk7XG4gICAgICBcbiAgICAgIGRlYWRsaW5lLmlubmVySFRNTCA9IGBEZWFkbGluZTogJHt0aGlzLm9uU2NyZWVuRGF0ZUZvcm1hdCh0YXNrLmR1ZURhdGUpfWA7XG4gICAgfVxuXG4gICAgc3RhdGljIHVwZGF0ZU5vdGVzT25JcHV0KCl7XG4gICAgICBjb25zdCBub3Rlc0xpc3RlbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRleHRhcmVhJyk7XG4gICAgICBjb25zdCBwYW5lbCA9IG5vdGVzTGlzdGVuZXIucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgLy8gS2V5IHVwIHdvcmtzIG9uIG1vYmlsZSBhcyB3ZWxsXG4gICAgICBub3Rlc0xpc3RlbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKCk9PntcbiAgICAgICAgY29uc3Qgbm90ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGV4dGFyZWEnKS5pbm5lckhUTUw7XG4gICAgICAgIC8vIHRoaXMgbGluZSB0byBnZXQgYW4gZWxlbWVudCBpcyBuZWF0IFxuICAgICAgICBjb25zdCB0YXNrVGl0bGUgPSBwYW5lbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaDEnKVswXS50ZXh0Q29udGVudDtcbiAgICAgICAgc3RvcmUuU2F2ZU5vdGVzKHRhc2tUaXRsZSwgbm90ZXMpO1xuXG4gICAgICB9KVxuXG4gICAgfVxuICAgIHN0YXRpYyB1cGRhdGVOb3RlcyAoZSl7XG4gICAgICBpZihlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2FkZC10YXNrLW5vdGUnKSl7XG5cbiAgICAgICAgY29uc3Qgbm90ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGV4dGFyZWEnKS5pbm5lckhUTUw7XG4gICAgICAgIGNvbnN0IHRhc2tUaXRsZSA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZC5maXJzdEVsZW1lbnRDaGlsZC50ZXh0Q29udGVudDtcbiAgICAgICAgY29uc29sZS5sb2codGFza1RpdGxlKTtcbiAgICAgICAgY29uc29sZS5sb2cobm90ZXMpO1xuICAgICAgICBzdG9yZS5TYXZlTm90ZXModGFza1RpdGxlLCBub3Rlcyk7XG4gICAgICAgIGFsZXJ0KCdub3RlcyBzYXZlZCcpO1xuICAgICAgfVxuICAgIH1cbiAgXG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0ODI2OiAwLFxuXHQxOTQ6IDAsXG5cdDIwNzogMCxcblx0Mjc5OiAwLFxuXHQyNzogMCxcblx0MzU6IDAsXG5cdDg1MTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vX2Zvb3Rlci5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vX2Zvb3Rlci5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuL21vZHVsZXMvYWRkVGFza1wiO1xuLy8gaW1wb3J0ICcuL3N0eWxlcy9zdHlsZXMuY3NzJztcbmltcG9ydCAnLi9zdHlsZXMvc3R5bGUuc2Nzcyc7XG5pbXBvcnQgeyBzdG9yZSB9IGZyb20gXCIuL1N0b3JlVGFzay9zdG9yZVwiO1xuaW1wb3J0IHsgaG9tZSB9IGZyb20gXCIuL21vZHVsZXMvaG9tZVwiO1xuaW1wb3J0IHNpZGVCYXIgZnJvbSBcIi4vbW9kdWxlcy9zaWRlQmFyXCI7XG5pbXBvcnQgdGFza0Rlc2NQYW5lbCBmcm9tIFwiLi9tb2R1bGVzL3Rhc2tQYW5lbFwiO1xuaW1wb3J0IGZvb3RlciBmcm9tIFwiLi9tb2R1bGVzL2Zvb3RlclwiO1xuXG5jb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbmNvbnN0IG1haW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdtYWluJyk7XG4vLyBBZGQgbmV3IFByb2plY3QvQ2F0ZWdvcnlcbmJvZHkuYXBwZW5kQ2hpbGQoc2lkZUJhci5DYXRlZ29yeVBvcFVwUGFuZWwoKSk7XG4vLyBBcHBlbmQgaGVhZGVyIGFuZCBzaWRlIHBhbmVsIFxuYm9keS5hcHBlbmRDaGlsZChob21lLmhlYWRlcigpKTtcbi8vIFRvZ2dsZSB0byBzaG93IHNpZGUgcGFuZWwgXG5zaWRlQmFyLnRvZ2dsZSgpO1xuXG5ib2R5LmFwcGVuZENoaWxkKG1haW4pO1xuXG5tYWluLmFwcGVuZENoaWxkKGhvbWUuaGVybygpKTtcblxuYm9keS5hcHBlbmRDaGlsZChmb290ZXIoKSlcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIFRhc2suZGlzcGxheVRhc2tzKCkpO1xuXG4vLyBkZWxldGVcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgVGFzay5kZWxldGVUYXNrKGUpO1xuICBUYXNrLnRhc2tEb25lKGUpO1xuICBzdG9yZS5MU3JlbW92ZVRhc2soZSk7XG4gIHN0b3JlLmNoYW5nZURvbmVTdGF0ZShlKTtcbiAgc2lkZUJhci5jYXRlZ29yeVByZXNzZWQoZSk7XG4gIHNpZGVCYXIuc2hvd0FkZENhdGVnb3J5UGFuZWwoZSk7XG4gIHNpZGVCYXIuZGVsZXRlQ2F0ZWdvcnkoZSk7XG4gIHRhc2tEZXNjUGFuZWwuc2hvd1BhbmVsKGUpO1xuICB0YXNrRGVzY1BhbmVsLmdldERhdGUoZSk7XG4gIHRhc2tEZXNjUGFuZWwudXBkYXRlTm90ZXMoZSk7XG4gIHRhc2tEZXNjUGFuZWwucmVtb3ZlUGFuZWwoZSk7XG4gIC8vIHN0b3JlLnNhdmVEdWVEYXRlKGUpO1xufSlcblxuLypUYWtlIHRoZSBpbnB1dCB1c2VyIGlucHV0IFxuZnJvbSB0aGUgdGV4dCBib3gsIHRoaXMgZmlsZSBpcyBsb2NhdGVkIG9uIC4vVUkvYWRkVGFzay5qcyovICBcblRhc2sudGFrZUlucHV0RXZlbnQoJ2dlbmVyYWwnKTtcbnNpZGVCYXIuYWRkTmV3Q2F0ZWdvcnlCdG4oKTtcblxuIiwiaW1wb3J0ICcuLi9zdHlsZXMvc2Fzc01vZHVsZXMvX2Zvb3Rlci5zY3NzJ1xuY29uc3QgZm9vdGVyID0gKCkgPT4ge1xuICBjb25zdCBmb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb290ZXInKTtcbiAgZm9vdGVyLmNsYXNzTGlzdC5hZGQoJ2Zvb3RlcicpO1xuICBmb290ZXIuaW5uZXJIVE1MID0gYFxuICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyIGNvbnRhaW5lci0tZm9vdGVyXCI+XG4gIDxkaXYgY2xhc3M9XCJzb2NpYWxzXCI+XG4gICAgPHA+Rm9sbG93IFVzPC9wPlxuICAgIDxkaXYgY2xhc3M9XCJzb2NpYWwtaWNvbnNcIiA+XG4gICAgICA8YSBjbGFzcz1cImluc3RhZ3JhbVwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL1wiPjwvYT5cbiAgICAgIDwvYT5cbiAgICAgIDxhIGNsYXNzPVwidHdpdHRlclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3R3aXR0ZXIuY29tL2hvbWVcIj5cbiAgICAgIDwvYT5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxhIGNsYXNzPVwiY29udHJpYnV0ZVwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vUGFyeml2YWxjZW4vVG9kb0FwcE1vZHVsYXJcIj5cbkNvbnRyaWJ1dGU8L2E+XG5cbiAgPGEgY2xhc3M9XCJnaXRIdWJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL1BhcnppdmFsY2VuXCI+PC9hPlxuXG4gIDwvZGl2PmA7XG4gIHJldHVybiBmb290ZXI7XG59XG5leHBvcnQgZGVmYXVsdCBmb290ZXIiXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwiVHlwZUVycm9yIiwiaXNEYXRlIiwidmFsdWUiLCJhcmd1bWVudHMiLCJEYXRlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiY2FsbCIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJnU3RyIiwiZ2V0VGltZSIsImNvbnNvbGUiLCJ3YXJuIiwiRXJyb3IiLCJzdGFjayIsIk5hTiIsImlzVmFsaWQiLCJkaXJ0eURhdGUiLCJkYXRlIiwiaXNOYU4iLCJOdW1iZXIiLCJ0b0ludGVnZXIiLCJkaXJ0eU51bWJlciIsIm51bWJlciIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJhZGRNaWxsaXNlY29uZHMiLCJkaXJ0eUFtb3VudCIsInRpbWVzdGFtcCIsImFtb3VudCIsInN1Yk1pbGxpc2Vjb25kcyIsIk1JTExJU0VDT05EU19JTl9EQVkiLCJzdGFydE9mVVRDSVNPV2VlayIsIndlZWtTdGFydHNPbiIsImRheSIsImdldFVUQ0RheSIsImRpZmYiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsInNldFVUQ0hvdXJzIiwiZ2V0VVRDSVNPV2Vla1llYXIiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ0lTT1dlZWtZZWFyIiwiZm91cnRoT2ZKYW51YXJ5IiwiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCJkZWZhdWx0T3B0aW9ucyIsImdldERlZmF1bHRPcHRpb25zIiwic3RhcnRPZlVUQ1dlZWsiLCJfcmVmIiwiX3JlZjIiLCJfcmVmMyIsIl9vcHRpb25zJHdlZWtTdGFydHNPbiIsIl9vcHRpb25zJGxvY2FsZSIsIl9vcHRpb25zJGxvY2FsZSRvcHRpbyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbCIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDIiLCJsb2NhbGUiLCJSYW5nZUVycm9yIiwiZ2V0VVRDV2Vla1llYXIiLCJfb3B0aW9ucyRmaXJzdFdlZWtDb24iLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENXZWVrWWVhciIsImZpcnN0V2VlayIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsInNpZ24iLCJvdXRwdXQiLCJhYnMiLCJ0b2tlbiIsInNpZ25lZFllYXIiLCJtb250aCIsImdldFVUQ01vbnRoIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicG93IiwiZm9ybWF0VGltZXpvbmVTaG9ydCIsIm9mZnNldCIsImRpcnR5RGVsaW1pdGVyIiwiYWJzT2Zmc2V0IiwiaG91cnMiLCJtaW51dGVzIiwiZGVsaW1pdGVyIiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJHIiwibG9jYWxpemUiLCJlcmEiLCJ3aWR0aCIsInkiLCJvcmRpbmFsTnVtYmVyIiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicXVhcnRlciIsImNvbnRleHQiLCJxIiwiTSIsIkwiLCJ3Iiwid2VlayIsInJvdW5kIiwiZ2V0VVRDV2VlayIsIkkiLCJpc29XZWVrIiwiZ2V0VVRDSVNPV2VlayIsImQiLCJEIiwiZGF5T2ZZZWFyIiwic2V0VVRDTW9udGgiLCJzdGFydE9mWWVhclRpbWVzdGFtcCIsImRpZmZlcmVuY2UiLCJnZXRVVENEYXlPZlllYXIiLCJFIiwiZGF5T2ZXZWVrIiwiZSIsImxvY2FsRGF5T2ZXZWVrIiwiYyIsImlzb0RheU9mV2VlayIsImEiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJkYXlQZXJpb2QiLCJ0b0xvd2VyQ2FzZSIsImIiLCJCIiwiaCIsIkgiLCJLIiwibSIsInMiLCJTIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwieCIsIk8iLCJ6IiwidCIsIm9yaWdpbmFsRGF0ZSIsIlQiLCJkYXRlTG9uZ0Zvcm1hdHRlciIsInBhdHRlcm4iLCJmb3JtYXRMb25nIiwidGltZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lIiwibG9uZ0Zvcm1hdHRlcnMiLCJwIiwiUCIsImRhdGVUaW1lRm9ybWF0IiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJkYXRlVGltZSIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJ1dGNEYXRlIiwiVVRDIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaW5kZXhPZiIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJmb3JtYXQiLCJpbnB1dCIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJ2YWx1ZXNBcnJheSIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwiX2RlZmF1bHRXaWR0aCIsIl93aWR0aCIsInZhbHVlcyIsImFyZ3VtZW50Q2FsbGJhY2siLCJidWlsZE1hdGNoRm4iLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwiZmluZEluZGV4IiwiZmluZEtleSIsInZhbHVlQ2FsbGJhY2siLCJyZXN0Iiwib2JqZWN0IiwicHJlZGljYXRlIiwiaGFzT3duUHJvcGVydHkiLCJhcnJheSIsImNvZGUiLCJmb3JtYXREaXN0YW5jZSIsImNvdW50IiwicmVzdWx0IiwidG9rZW5WYWx1ZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiX29wdGlvbnMiLCJyZW0xMDAiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsInBhcnNlUGF0dGVybiIsInBhcnNlSW50IiwicGFyc2VSZXN1bHQiLCJhbnkiLCJpbmRleCIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZGlydHlGb3JtYXRTdHIiLCJfcmVmNCIsIl9vcHRpb25zJGxvY2FsZTIiLCJfb3B0aW9ucyRsb2NhbGUyJG9wdGkiLCJfcmVmNSIsIl9yZWY2IiwiX3JlZjciLCJfb3B0aW9ucyRsb2NhbGUzIiwiX29wdGlvbnMkbG9jYWxlMyRvcHRpIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsMyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDQiLCJmb3JtYXRTdHIiLCJkZWZhdWx0TG9jYWxlIiwiZm9ybWF0dGVyT3B0aW9ucyIsInN1YnN0cmluZyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsImNsZWFuRXNjYXBlZFN0cmluZyIsImZvcm1hdHRlciIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJtYXRjaGVkIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImdldFRhcmdldCIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwic3RvcmUiLCJzdGF0aWMiLCJ0YXNrcyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZSIsInRhc2tUaXRsZSIsInRhc2siLCJnZXRUYXNrcyIsImZvckVhY2giLCJzaW5nbGVUYXNrIiwidGl0bGUiLCJzZXRJdGVtIiwic2F2ZVRhc2siLCJ0YXNrSW5kZXgiLCJkdWVEYXRlIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJpbm5lckhUTUwiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJkb25lIiwibG9nIiwiY2F0ZWdvcnkiLCJjYXRlZ29yaWVzIiwiZ2V0Q2F0ZWdvcmllcyIsImZpbHRlciIsInRhZyIsImRlbGV0ZVRhc2tzRnJvbUNhdGVnb3J5IiwiaHRtbFZhbHVlIiwibm90ZXMiLCJUYXNrIiwiY29uc3RydWN0b3IiLCJkYXRlQ3JlYXRlZCIsInRhc2tQYW5lbCIsInRhc2tEaXYiLCJhZGQiLCJ0YWtlSW5wdXQiLCJuZXdUYXNrIiwiYWRkVGFza1BhbmVsIiwiYWxlcnQiLCJjbGVhcklucHV0RmllbGQiLCJ0YXNrQ29udGFpbmVyIiwiYWRkQnRuIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhcmVudEVsZW1lbnQiLCJmb2xkZXIiLCJjb250YWluZXIiLCJob21lIiwiaGVhZGVyIiwiaGVybyIsInNpZGVCYXIiLCJ0ZXh0Q29udGVudCIsInRvZ2dsZSIsImNhdGVnb3JpZXNOYXYiLCJnZXRBdHRyaWJ1dGUiLCJhZGRQcm9qZWN0UG9wVXAiLCJjYW5jZWxQb3BVcEJ0biIsImFkZENhdGVnb3J5IiwiYWRkQ2F0QnRuIiwiZm9ybWF0VGl0bGUiLCJjYXRlZ29yaWVzTGlzdCIsImNhdGVnb3J5VGl0bGUiLCJuZXdUb0RvUGFuZWwiLCJ0b2RvUGFuZWwiLCJ0YXNrRGVzY1BhbmVsIiwicGFuZWwiLCJvblNjcmVlbkRhdGVGb3JtYXQiLCJ1cGRhdGVOb3Rlc09uSXB1dCIsImJvZHkiLCJ0b0Zvcm1hdCIsInRvSlNPTiIsInVwZGF0ZURhdGUiLCJkZWFkbGluZSIsIm5vdGVzTGlzdGVuZXIiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiYmFzZVVSSSIsInNlbGYiLCJocmVmIiwibmMiLCJtYWluIiwiZm9vdGVyIl0sInNvdXJjZVJvb3QiOiIifQ==