(()=>{"use strict";var n={916:(n,e,t)=>{t.d(e,{Z:()=>g});var a=t(537),r=t.n(a),o=t(645),i=t.n(o),s=t(667),d=t.n(s),l=new URL(t(935),t.b),A=new URL(t(921),t.b),c=i()(r()),u=d()(l),m=d()(A);c.push([n.id,"@media screen and (min-width: 0px) {\n  a:visited{\n    color: inherit;\n  }\n  .container--footer{\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    min-height: 10vh;\n    background-color: #e9c46a;\n    color: white;\n    box-shadow: 0px -12px 5px -8px rgba(0,0,0,0.75);\n  }\n\n  /* SOCIALS */\n  .social-icons{\n    display: flex;\n  }\n  .instagram, .twitter{\n    background: transparent;\n    background-color: #2a9d8f;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    cursor: pointer;\n    width: 5vh;\n    height: 5vh;\n \n  }\n  .instagram{\n    -webkit-mask-image: url("+u+") ;\n    mask-image: url("+u+") ;\n  }\n  .twitter{\n    -webkit-mask-image: url("+m+") ;\n    mask-image: url("+m+") ;\n\n  }\n  \n}","",{version:3,sources:["webpack://./src/styles/footer.css"],names:[],mappings:"AAAA;EACE;IACE,cAAc;EAChB;EACA;IACE,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;IACnB,gBAAgB;IAChB,yBAAyB;IACzB,YAAY;IACZ,+CAA+C;EACjD;;EAEA,YAAY;EACZ;IACE,aAAa;EACf;EACA;IACE,uBAAuB;IACvB,yBAAyB;IACzB,8BAA8B;IAC9B,sBAAsB;IACtB,eAAe;IACf,UAAU;IACV,WAAW;;EAEb;EACA;IACE,4DAA+C;IAC/C,oDAAuC;EACzC;EACA;IACE,4DAA6C;IAC7C,oDAAqC;;EAEvC;;AAEF",sourcesContent:["@media screen and (min-width: 0px) {\n  a:visited{\n    color: inherit;\n  }\n  .container--footer{\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    min-height: 10vh;\n    background-color: #e9c46a;\n    color: white;\n    box-shadow: 0px -12px 5px -8px rgba(0,0,0,0.75);\n  }\n\n  /* SOCIALS */\n  .social-icons{\n    display: flex;\n  }\n  .instagram, .twitter{\n    background: transparent;\n    background-color: #2a9d8f;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    cursor: pointer;\n    width: 5vh;\n    height: 5vh;\n \n  }\n  .instagram{\n    -webkit-mask-image: url(../imgs/instagram.svg) ;\n    mask-image: url(../imgs/instagram.svg) ;\n  }\n  .twitter{\n    -webkit-mask-image: url(../imgs/twitter.svg) ;\n    mask-image: url(../imgs/twitter.svg) ;\n\n  }\n  \n}"],sourceRoot:""}]);const g=c},309:(n,e,t)=>{t.d(e,{Z:()=>b});var a=t(537),r=t.n(a),o=t(645),i=t.n(o),s=t(667),d=t.n(s),l=new URL(t(649),t.b),A=new URL(t(251),t.b),c=new URL(t(96),t.b),u=new URL(t(155),t.b),m=i()(r()),g=d()(l),p=d()(A),h=d()(c),C=d()(u);m.push([n.id,'/* ---------\nside Panel\n------------ */\n@media screen and (min-width:0px) {\n  .categories-navigation{\n    position: fixed;\n    flex-direction: column;\n    inset: 0 20% 0 0;\n    z-index: 999;\n    padding: min(10rem, 8vh);\n    background-color: rgb(42, 157, 143, 0.9);\n    transform: translateX(-100%);\n    transition: 0.4s ease-in-out;\n    /*BLUR bg  */\n    backdrop-filter: blur(8px);\n    color: white;\n    max-height: 90vh;\n  }\n  .categories-navigation[data-visible="true"]{\n    transform: translateX(0%);\n  }\n  .category:hover{\n    cursor: pointer;\n  }\n  /* categorieS TITLE */\n  .categories-title{\n    display: grid;\n    align-items: center;\n    grid-template-columns: 1fr 1fr;\n    gap: 0.5rem;\n  }\n  .add-categories{\n    background-color: #e9c46a;\n    -webkit-mask-image: url('+g+") ;\n    mask-image: url("+g+") ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    width: 1.5rem;\n    height: 1.5rem;\n    border: 0;\n    z-index: 1000;\n    cursor: pointer;\n  }\n  /* SINGLE CATEGORY */\n  .category--title{\n    text-transform: capitalize;\n  }\n  .category > div {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: center;\n  }\n  .delete-category{\n    width: 1rem;\n    height: 1rem;\n    background-color: #800020;\n    -webkit-mask-image: url("+p+") ;\n    mask-image: url("+p+") ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    border: 0;\n    cursor: pointer;\n\n  }\n  /* TOGGLE */\n  .mobile-toggle{\n    display: block;\n    /* Change Icon color */\n    background-color: #e9c46a;\n    -webkit-mask-image: url("+h+") ;\n    mask-image: url("+h+') ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    position: absolute;\n    width: 2rem;\n    height: 2rem;\n    left: 1rem;\n    margin-top: 1rem;\n    border: 0;\n    z-index: 1000;\n    cursor: pointer;\n    \n    \n  }\n  .mobile-toggle[aria-expanded="true"]{\n    -webkit-mask-image: url('+C+") ;\n    mask-image: url("+C+') ;\n  }\n\n  /* -----------\n  POP UP\n  ---------------- */\n  .add-project-popUp{\n    display: none;\n    box-shadow: -1px 0px 5px 6px rgba(0, 0, 0, 0.36);\n    background-color: #e9c46a;\n    max-width: 18rem;\n    text-align: center;\n    border-radius: 10px;\n    padding-top: 2rem;\n    padding-inline: 2rem;\n    position: absolute;\n    top: 20%;\n    left: 50%;\n    z-index: 1005;\n    transform: translate(-50%, 20%);\n  }\n  .add-project-popUp > input, button{\n    border-radius: 10px;\n    border: none;\n  }\n  .add-project-popUp > input{\n    padding-inline: 1rem;\n  }\n  /* Buttons */\n  .btns-popUp{\n    margin-top: 1rem;\n    display: flex;\n    justify-content: space-around;\n  }\n  .btns-popUp > *{\n    background: transparent;\n  }\n  .add-project-btn{\n    color: rgb(42, 157, 143, 0.9);\n  }\n  .cancel-project-btn{\n    color: rgba(48, 48, 48, 0.9);\n  }\n  /* Attribute swicth */\n  .add-project-popUp[project-pop-visible="true"]{\n    display: block;\n  }\n}\n@media screen and (min-width: 900px) {\n  .categories-navigation{\n    transform: translateX(0%);\n    inset: 0 70% 0 0;\n    box-shadow: 11px 3px 5px -6px rgba(0,0,0,0.75);\n    \n  }\n  .mobile-toggle{\n    display: none;\n  }\n\n}\n@media screen and (min-width: 1200px) {\n  .categories-navigation{\n    inset: 0 75% 0 0;\n  }\n}\n@media screen and (min-width: 1600px) {\n  .categories-navigation{\n    inset: 0 80% 0 0;\n  }\n}',"",{version:3,sources:["webpack://./src/styles/home.css"],names:[],mappings:"AAAA;;cAEc;AACd;EACE;IACE,eAAe;IACf,sBAAsB;IACtB,gBAAgB;IAChB,YAAY;IACZ,wBAAwB;IACxB,wCAAwC;IACxC,4BAA4B;IAC5B,4BAA4B;IAC5B,YAAY;IACZ,0BAA0B;IAC1B,YAAY;IACZ,gBAAgB;EAClB;EACA;IACE,yBAAyB;EAC3B;EACA;IACE,eAAe;EACjB;EACA,qBAAqB;EACrB;IACE,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,WAAW;EACb;EACA;IACE,yBAAyB;IACzB,4DAA0C;IAC1C,oDAAkC;IAClC,8BAA8B;IAC9B,sBAAsB;IACtB,aAAa;IACb,cAAc;IACd,SAAS;IACT,aAAa;IACb,eAAe;EACjB;EACA,oBAAoB;EACpB;IACE,0BAA0B;EAC5B;EACA;IACE,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;EACrB;EACA;IACE,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,4DAAiD;IACjD,oDAAyC;IACzC,8BAA8B;IAC9B,sBAAsB;IACtB,SAAS;IACT,eAAe;;EAEjB;EACA,WAAW;EACX;IACE,cAAc;IACd,sBAAsB;IACtB,yBAAyB;IACzB,4DAA6C;IAC7C,oDAAqC;IACrC,8BAA8B;IAC9B,sBAAsB;IACtB,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,UAAU;IACV,gBAAgB;IAChB,SAAS;IACT,aAAa;IACb,eAAe;;;EAGjB;EACA;IACE,4DAA+C;IAC/C,oDAAuC;EACzC;;EAEA;;oBAEkB;EAClB;IACE,aAAa;IACb,gDAAgD;IAChD,yBAAyB;IACzB,gBAAgB;IAChB,kBAAkB;IAClB,mBAAmB;IACnB,iBAAiB;IACjB,oBAAoB;IACpB,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,aAAa;IACb,+BAA+B;EACjC;EACA;IACE,mBAAmB;IACnB,YAAY;EACd;EACA;IACE,oBAAoB;EACtB;EACA,YAAY;EACZ;IACE,gBAAgB;IAChB,aAAa;IACb,6BAA6B;EAC/B;EACA;IACE,uBAAuB;EACzB;EACA;IACE,6BAA6B;EAC/B;EACA;IACE,4BAA4B;EAC9B;EACA,qBAAqB;EACrB;IACE,cAAc;EAChB;AACF;AACA;EACE;IACE,yBAAyB;IACzB,gBAAgB;IAChB,8CAA8C;;EAEhD;EACA;IACE,aAAa;EACf;;AAEF;AACA;EACE;IACE,gBAAgB;EAClB;AACF;AACA;EACE;IACE,gBAAgB;EAClB;AACF",sourcesContent:['/* ---------\nside Panel\n------------ */\n@media screen and (min-width:0px) {\n  .categories-navigation{\n    position: fixed;\n    flex-direction: column;\n    inset: 0 20% 0 0;\n    z-index: 999;\n    padding: min(10rem, 8vh);\n    background-color: rgb(42, 157, 143, 0.9);\n    transform: translateX(-100%);\n    transition: 0.4s ease-in-out;\n    /*BLUR bg  */\n    backdrop-filter: blur(8px);\n    color: white;\n    max-height: 90vh;\n  }\n  .categories-navigation[data-visible="true"]{\n    transform: translateX(0%);\n  }\n  .category:hover{\n    cursor: pointer;\n  }\n  /* categorieS TITLE */\n  .categories-title{\n    display: grid;\n    align-items: center;\n    grid-template-columns: 1fr 1fr;\n    gap: 0.5rem;\n  }\n  .add-categories{\n    background-color: #e9c46a;\n    -webkit-mask-image: url(../imgs/plus.svg) ;\n    mask-image: url(../imgs/plus.svg) ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    width: 1.5rem;\n    height: 1.5rem;\n    border: 0;\n    z-index: 1000;\n    cursor: pointer;\n  }\n  /* SINGLE CATEGORY */\n  .category--title{\n    text-transform: capitalize;\n  }\n  .category > div {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: center;\n  }\n  .delete-category{\n    width: 1rem;\n    height: 1rem;\n    background-color: #800020;\n    -webkit-mask-image: url(../imgs/minusDelete.svg) ;\n    mask-image: url(../imgs/minusDelete.svg) ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    border: 0;\n    cursor: pointer;\n\n  }\n  /* TOGGLE */\n  .mobile-toggle{\n    display: block;\n    /* Change Icon color */\n    background-color: #e9c46a;\n    -webkit-mask-image: url(../imgs/hamMenu.svg) ;\n    mask-image: url(../imgs/hamMenu.svg) ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    position: absolute;\n    width: 2rem;\n    height: 2rem;\n    left: 1rem;\n    margin-top: 1rem;\n    border: 0;\n    z-index: 1000;\n    cursor: pointer;\n    \n    \n  }\n  .mobile-toggle[aria-expanded="true"]{\n    -webkit-mask-image: url(../imgs/closeMenu.svg) ;\n    mask-image: url(../imgs/closeMenu.svg) ;\n  }\n\n  /* -----------\n  POP UP\n  ---------------- */\n  .add-project-popUp{\n    display: none;\n    box-shadow: -1px 0px 5px 6px rgba(0, 0, 0, 0.36);\n    background-color: #e9c46a;\n    max-width: 18rem;\n    text-align: center;\n    border-radius: 10px;\n    padding-top: 2rem;\n    padding-inline: 2rem;\n    position: absolute;\n    top: 20%;\n    left: 50%;\n    z-index: 1005;\n    transform: translate(-50%, 20%);\n  }\n  .add-project-popUp > input, button{\n    border-radius: 10px;\n    border: none;\n  }\n  .add-project-popUp > input{\n    padding-inline: 1rem;\n  }\n  /* Buttons */\n  .btns-popUp{\n    margin-top: 1rem;\n    display: flex;\n    justify-content: space-around;\n  }\n  .btns-popUp > *{\n    background: transparent;\n  }\n  .add-project-btn{\n    color: rgb(42, 157, 143, 0.9);\n  }\n  .cancel-project-btn{\n    color: rgba(48, 48, 48, 0.9);\n  }\n  /* Attribute swicth */\n  .add-project-popUp[project-pop-visible="true"]{\n    display: block;\n  }\n}\n@media screen and (min-width: 900px) {\n  .categories-navigation{\n    transform: translateX(0%);\n    inset: 0 70% 0 0;\n    box-shadow: 11px 3px 5px -6px rgba(0,0,0,0.75);\n    \n  }\n  .mobile-toggle{\n    display: none;\n  }\n\n}\n@media screen and (min-width: 1200px) {\n  .categories-navigation{\n    inset: 0 75% 0 0;\n  }\n}\n@media screen and (min-width: 1600px) {\n  .categories-navigation{\n    inset: 0 80% 0 0;\n  }\n}'],sourceRoot:""}]);const b=m},772:(n,e,t)=>{t.d(e,{Z:()=>u});var a=t(537),r=t.n(a),o=t(645),i=t.n(o),s=t(667),d=t.n(s),l=new URL(t(567),t.b),A=i()(r());A.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap);"]);var c=d()(l);A.push([n.id,'/* FONT FAMILY */\n/*\n=============== \nGlobal Styles/ Reset\n===============\n*/\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody,\nh1,\nh2,\nh3,\nh4 p,\nfigure,\npicture {\n  margin: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  text-transform: capitalize;\n  font-weight: 400;\n}\n\na,\nli {\n  text-decoration: none;\n  list-style: none;\n}\n\nbody {\n  line-height: 1.5;\n  min-height: 100vh;\n  font-family: "Roboto", sans-serif;\n\n  grid-template-rows: -webkit-min-content 1fr;\n  grid-template-rows: min-content 1fr;\n  overflow-x: hidden;\n}\n\n/* imgs easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* form elements easier to work with */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n  -webkit-appearance: none;\n  appearance: none;\n  \n}\ninput:focus{\n outline: none;\n  appearance: none;\n}\n\n\n/* remove animation for people who turned them off */\n@media (prefers-reduced-motion: reduce) {\n\n  *,\n  *::before,\n  *::after {\n    -webkit-animation-duration: 0.01ms !important;\n    animation-duration: 0.01ms !important;\n    -webkit-animation-iteration-count: 1 !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01sms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n/* =========\nutility clases \n=========== */\n.hidden {\n  display: none;\n}\n\n.inline {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n  gap: var(--gap, 1rem);\n}\n\n.grid {\n  display: grid;\n  gap: var(--gap, 1rem);\n}\n\n.d-block {\n  display: block;\n}\n\n/* header */\n.logo {\n  margin: clamp(1.5rem, 5vw, 2rem);\n}\n\n.primary-header {\n  align-items: center;\n  justify-content: space-between;\n}\n\n@media screen and (max-width: 768px) {\n  .flex {\n    flex-wrap: wrap;\n  }\n}\n\n/* SPACING .flow */\n/* Seclect all the elements of a divider except the first Child */\n/* It is use to make the top and botton line heights and borders the same */\n/* Where is a way to group things, is lower on specificy so we dont overwrite things*/\n.flow>*:where(:not(:first-child)) {\n  margin-top: var(--flow-space, 1rem);\n  /* outline: 1px solid red; */\n}\n\n.container {\n  padding-inline: 0rem;\n  margin-inline: auto;\n  max-width: inherit;\n}\n\n/* for the visually impaired -Hide Contten- */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  /* added line */\n  border: 0;\n}\n\n/* -------------\nTODO \n-------------- */\n.container-hero{\n  background-color: #264653;\n  height: 90vh;\n  display: grid;\n  place-items: center;\n}\n/* BLUR */\n.blur-document{\n  filter: blur(20px);\n}\n\n\n@media screen and (min-width:900px) {\n  .container-hero{\n    background-image: url('+c+");\n    background-repeat: no-repeat;\n    background-size: cover;\n  }\n  \n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA,gBAAgB;AAEhB;;;;CAIC;;AAED;;;EAGE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;;;;;;;EAOE,SAAS;AACX;;AAEA;;;;;EAKE,0BAA0B;EAC1B,gBAAgB;AAClB;;AAEA;;EAEE,qBAAqB;EACrB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,iCAAiC;;EAEjC,2CAA2C;EAC3C,mCAAmC;EACnC,kBAAkB;AACpB;;AAEA,6BAA6B;AAC7B;;EAEE,eAAe;EACf,cAAc;AAChB;;AAEA,sCAAsC;AACtC;;;;EAIE,aAAa;EACb,wBAAwB;EACxB,gBAAgB;;AAElB;AACA;CACC,aAAa;EACZ,gBAAgB;AAClB;;;AAGA,oDAAoD;AACpD;;EAEE;;;IAGE,6CAA6C;IAC7C,qCAAqC;IACrC,+CAA+C;IAC/C,uCAAuC;IACvC,uCAAuC;IACvC,gCAAgC;EAClC;AACF;;AAEA;;aAEa;AACb;EACE,aAAa;AACf;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,qBAAqB;AACvB;;AAEA;EACE,cAAc;AAChB;;AAEA,WAAW;AACX;EACE,gCAAgC;AAClC;;AAEA;EACE,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA,kBAAkB;AAClB,iEAAiE;AACjE,2EAA2E;AAC3E,qFAAqF;AACrF;EACE,mCAAmC;EACnC,4BAA4B;AAC9B;;AAEA;EACE,oBAAoB;EACpB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA,6CAA6C;AAC7C;EACE,kBAAkB;EAClB,UAAU;EACV,WAAW;EACX,UAAU;EACV,YAAY;EACZ,gBAAgB;EAChB,sBAAsB;EACtB,mBAAmB;EACnB,eAAe;EACf,SAAS;AACX;;AAEA;;gBAEgB;AAChB;EACE,yBAAyB;EACzB,YAAY;EACZ,aAAa;EACb,mBAAmB;AACrB;AACA,SAAS;AACT;EACE,kBAAkB;AACpB;;;AAGA;EACE;IACE,yDAA6C;IAC7C,4BAA4B;IAC5B,sBAAsB;EACxB;;AAEF",sourcesContent:['/* FONT FAMILY */\n@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;500;900&display=swap");\n/*\n=============== \nGlobal Styles/ Reset\n===============\n*/\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody,\nh1,\nh2,\nh3,\nh4 p,\nfigure,\npicture {\n  margin: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  text-transform: capitalize;\n  font-weight: 400;\n}\n\na,\nli {\n  text-decoration: none;\n  list-style: none;\n}\n\nbody {\n  line-height: 1.5;\n  min-height: 100vh;\n  font-family: "Roboto", sans-serif;\n\n  grid-template-rows: -webkit-min-content 1fr;\n  grid-template-rows: min-content 1fr;\n  overflow-x: hidden;\n}\n\n/* imgs easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* form elements easier to work with */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n  -webkit-appearance: none;\n  appearance: none;\n  \n}\ninput:focus{\n outline: none;\n  appearance: none;\n}\n\n\n/* remove animation for people who turned them off */\n@media (prefers-reduced-motion: reduce) {\n\n  *,\n  *::before,\n  *::after {\n    -webkit-animation-duration: 0.01ms !important;\n    animation-duration: 0.01ms !important;\n    -webkit-animation-iteration-count: 1 !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01sms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n/* =========\nutility clases \n=========== */\n.hidden {\n  display: none;\n}\n\n.inline {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n  gap: var(--gap, 1rem);\n}\n\n.grid {\n  display: grid;\n  gap: var(--gap, 1rem);\n}\n\n.d-block {\n  display: block;\n}\n\n/* header */\n.logo {\n  margin: clamp(1.5rem, 5vw, 2rem);\n}\n\n.primary-header {\n  align-items: center;\n  justify-content: space-between;\n}\n\n@media screen and (max-width: 768px) {\n  .flex {\n    flex-wrap: wrap;\n  }\n}\n\n/* SPACING .flow */\n/* Seclect all the elements of a divider except the first Child */\n/* It is use to make the top and botton line heights and borders the same */\n/* Where is a way to group things, is lower on specificy so we dont overwrite things*/\n.flow>*:where(:not(:first-child)) {\n  margin-top: var(--flow-space, 1rem);\n  /* outline: 1px solid red; */\n}\n\n.container {\n  padding-inline: 0rem;\n  margin-inline: auto;\n  max-width: inherit;\n}\n\n/* for the visually impaired -Hide Contten- */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  /* added line */\n  border: 0;\n}\n\n/* -------------\nTODO \n-------------- */\n.container-hero{\n  background-color: #264653;\n  height: 90vh;\n  display: grid;\n  place-items: center;\n}\n/* BLUR */\n.blur-document{\n  filter: blur(20px);\n}\n\n\n@media screen and (min-width:900px) {\n  .container-hero{\n    background-image: url(../imgs/bg-Desktop.jpg);\n    background-repeat: no-repeat;\n    background-size: cover;\n  }\n  \n}'],sourceRoot:""}]);const u=A},207:(n,e,t)=>{t.d(e,{Z:()=>g});var a=t(537),r=t.n(a),o=t(645),i=t.n(o),s=t(667),d=t.n(s),l=new URL(t(251),t.b),A=new URL(t(649),t.b),c=i()(r()),u=d()(l),m=d()(A);c.push([n.id,"@media screen and (min-width: 0px){\n  .taskDescPanel{\n    position: absolute;\n    top: 20%;\n    left: 50%;\n    transform: translate(-50%, 20%);\n    min-height: 40vh;\n    padding: 1em;\n    width: 35vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    background-color: rgba(233, 197, 106);\n    backdrop-filter: blur(8px);\n    border-radius: 10px;\n    color: white;\n    overflow: auto;\n  }\n  .title--task{\n    display: flex;\n    position: relative;\n    border: none;\n  }\n  .title--task > h1{\n    font-size: 1.4em;\n  }\n  .hide-desc-panel{\n    background: transparent;\n    border: none;\n    width: 2vh;\n    height: 2vh;\n    /* Change Icon color */\n    background-color: #800020;\n    -webkit-mask-image: url("+u+") ;\n    mask-image: url("+u+") ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    position: absolute;\n    right: 1vh;\n    cursor: pointer;\n  }\n  .set-date{\n    position: relative;\n    display: grid;\n    place-items: center;\n    padding: .2em;\n    border-radius: 10px;\n    grid-template-columns: 1fr 4vh;\n    border: 1px solid white;\n  }\n  .add-date-label{\n    position: absolute;\n    z-index: -1;\n  }\n  #due-Date{\n    border: none;\n    background: transparent;\n  }\n  .due-Date-btn{\n    background-image: url("+m+");\n    width: 1.5rem;\n    height: 1.5rem;\n    background-color: transparent;\n    background-repeat: no-repeat;\n    border: 0;\n    cursor: pointer;\n  }\n  /* PANEL FOR NOTES */\n  .notes-panel{\n    position: relative;\n    margin-top: 1rem;\n    min-height: 10vh;\n    padding: .3em;\n    border: 1px solid white;\n    border-radius: 10px;\n    background: rgba(221, 192, 117, 0.9);\n  }\n  .task-notes:focus{\n    outline: none;\n  }\n  .notes-panel > .add-task-note{\n    background: transparent;\n    position: absolute;\n    bottom: .5vh;\n    right    : 1vh;\n  }\n}\n@media screen and (min-width: 800px) {\n  .add-date-label{\n    display: none;\n  }\n  \n}","",{version:3,sources:["webpack://./src/styles/taskPanel.css"],names:[],mappings:"AAAA;EACE;IACE,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,+BAA+B;IAC/B,gBAAgB;IAChB,YAAY;IACZ,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,qCAAqC;IACrC,0BAA0B;IAC1B,mBAAmB;IACnB,YAAY;IACZ,cAAc;EAChB;EACA;IACE,aAAa;IACb,kBAAkB;IAClB,YAAY;EACd;EACA;IACE,gBAAgB;EAClB;EACA;IACE,uBAAuB;IACvB,YAAY;IACZ,UAAU;IACV,WAAW;IACX,sBAAsB;IACtB,yBAAyB;IACzB,4DAAiD;IACjD,oDAAyC;IACzC,8BAA8B;IAC9B,sBAAsB;IACtB,kBAAkB;IAClB,UAAU;IACV,eAAe;EACjB;EACA;IACE,kBAAkB;IAClB,aAAa;IACb,mBAAmB;IACnB,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,uBAAuB;EACzB;EACA;IACE,kBAAkB;IAClB,WAAW;EACb;EACA;IACE,YAAY;IACZ,uBAAuB;EACzB;EACA;IACE,yDAAuC;IACvC,aAAa;IACb,cAAc;IACd,6BAA6B;IAC7B,4BAA4B;IAC5B,SAAS;IACT,eAAe;EACjB;EACA,oBAAoB;EACpB;IACE,kBAAkB;IAClB,gBAAgB;IAChB,gBAAgB;IAChB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,oCAAoC;EACtC;EACA;IACE,aAAa;EACf;EACA;IACE,uBAAuB;IACvB,kBAAkB;IAClB,YAAY;IACZ,cAAc;EAChB;AACF;AACA;EACE;IACE,aAAa;EACf;;AAEF",sourcesContent:["@media screen and (min-width: 0px){\n  .taskDescPanel{\n    position: absolute;\n    top: 20%;\n    left: 50%;\n    transform: translate(-50%, 20%);\n    min-height: 40vh;\n    padding: 1em;\n    width: 35vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    background-color: rgba(233, 197, 106);\n    backdrop-filter: blur(8px);\n    border-radius: 10px;\n    color: white;\n    overflow: auto;\n  }\n  .title--task{\n    display: flex;\n    position: relative;\n    border: none;\n  }\n  .title--task > h1{\n    font-size: 1.4em;\n  }\n  .hide-desc-panel{\n    background: transparent;\n    border: none;\n    width: 2vh;\n    height: 2vh;\n    /* Change Icon color */\n    background-color: #800020;\n    -webkit-mask-image: url(../imgs/minusDelete.svg) ;\n    mask-image: url(../imgs/minusDelete.svg) ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    position: absolute;\n    right: 1vh;\n    cursor: pointer;\n  }\n  .set-date{\n    position: relative;\n    display: grid;\n    place-items: center;\n    padding: .2em;\n    border-radius: 10px;\n    grid-template-columns: 1fr 4vh;\n    border: 1px solid white;\n  }\n  .add-date-label{\n    position: absolute;\n    z-index: -1;\n  }\n  #due-Date{\n    border: none;\n    background: transparent;\n  }\n  .due-Date-btn{\n    background-image: url(../imgs/plus.svg);\n    width: 1.5rem;\n    height: 1.5rem;\n    background-color: transparent;\n    background-repeat: no-repeat;\n    border: 0;\n    cursor: pointer;\n  }\n  /* PANEL FOR NOTES */\n  .notes-panel{\n    position: relative;\n    margin-top: 1rem;\n    min-height: 10vh;\n    padding: .3em;\n    border: 1px solid white;\n    border-radius: 10px;\n    background: rgba(221, 192, 117, 0.9);\n  }\n  .task-notes:focus{\n    outline: none;\n  }\n  .notes-panel > .add-task-note{\n    background: transparent;\n    position: absolute;\n    bottom: .5vh;\n    right    : 1vh;\n  }\n}\n@media screen and (min-width: 800px) {\n  .add-date-label{\n    display: none;\n  }\n  \n}"],sourceRoot:""}]);const g=c},385:(n,e,t)=>{t.d(e,{Z:()=>b});var a=t(537),r=t.n(a),o=t(645),i=t.n(o),s=t(667),d=t.n(s),l=new URL(t(115),t.b),A=new URL(t(251),t.b),c=new URL(t(179),t.b),u=new URL(t(743),t.b),m=i()(r()),g=d()(l),p=d()(A),h=d()(c),C=d()(u);m.push([n.id,"@media screen and (min-width: 0px) {\n  .title{\n    margin-bottom: 1.5vh;\n    border-bottom: 1px solid white;\n  }\n  .todo-panel{\n    position: relative;\n    padding: 1em;\n    border-radius: 10px;\n    min-height: 45vh;\n    max-height: 60vh;\n    width: 35vh;\n    background-color: #258d81;\n    color: white;\n    overflow: auto;\n    \n  }\n/* Make tasks scrollable */\n  .tasks{\n    max-height: 40vh;\n    overflow: auto;\n  }\n\n  \n  \n  .task{\n    padding: .8vh;\n    grid-template-columns: 2vh 1fr 2vh;\n  }\n  .TaskItemCheckbox{\n    place-self: center;\n    border-radius: 50%;\n    border: none;\n    color: #e9c46a;\n    background-color: #e9c46a;\n    -webkit-mask-image: url("+g+") ;\n    mask-image: url("+g+") ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    width: 2vh;\n    height: 2vh;\n    cursor: pointer;\n    \n  }\n  .TaskItemDelete{\n    background: transparent;\n    border: none;\n    text-align: center;\n    place-self: center;\n    width: 2vh;\n    height: 2vh;\n    /* Change Icon color */\n    background-color: #800020;\n    -webkit-mask-image: url("+p+") ;\n    mask-image: url("+p+') ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    cursor: pointer;\n  }\n  .task[aria-disabled="true"] .TaskItemCheckbox {\n    /* Change Icon color */\n    background-color: #a0a0a0;\n    -webkit-mask-image: url('+h+") ;\n    mask-image: url("+h+') ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;  \n      \n\n  }\n  .task[aria-disabled="true"] .task-category {\n    display: none;\n  }\n  .task-title{\n    cursor: pointer;\n    z-index: 2;\n  }\n  .task[aria-disabled="true"]{\n    color: rgb(104, 104, 104);\n    text-decoration: line-through;\n    \n  }\n  .task-category{\n    color: rgb(104, 104, 104);\n    text-transform: capitalize;\n    \n\n  }\n  \n  /* INPUT TASK FIELD */\n  .add-task-container{\n    position: sticky;\n    display: flex;\n    gap: .5vh;\n    border-radius: 10px;\n    align-items: center;\n    bottom: .1vh;\n    left: .5vh;\n    width: 30vh;\n    height: 5vh;\n\n    \n  }\n  #add-task-text{\n    width: 25vh;\n  }\n  .add-task-container > label{\n    display: block;\n    position: absolute;\n    top: .8em;\n    left: 2vh;\n    opacity: .4;\n    font-size: 12px;\n    color: black;\n  }\n  \n  .add-task-container > input{\n    padding-left: 1em;\n    outline: none;\n    border: none;\n    display:block;\n    line-height: 1.5em;\n    font-size: 14pt;\n    \n  }\n  #add-task-text {\n    border-radius: 10px;\n    \n  }\n  #add-task-text:focus + .add-task-label {\n    opacity: 0;\n  }\n  .add-task-btn{\n    background: transparent;\n    border: none;\n    width: 5vh;\n    height: 5vh;\n    color: #e9c46a;\n    /* Change Icon color */\n    background-color: rgb(216, 183, 99);\n    -webkit-mask-image: url('+C+") ;\n    mask-image: url("+C+") ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    cursor: pointer;\n  }\n\n\n\n}\n@media screen and (min-width: 500px) {\n\n  .add-task-container{\n    bottom: .05em;\n    left: 2.8vh;\n  }\n  .add-task-container > label{\n    top: 1.6vh;\n    left: 2vh;\n  }\n  .add-task-btn{\n    width: 3vh;\n    height: 3vh;\n  }\n}\n@media screen and (min-width: 800px) {\n\n}","",{version:3,sources:["webpack://./src/styles/todoPanel.css"],names:[],mappings:"AAAA;EACE;IACE,oBAAoB;IACpB,8BAA8B;EAChC;EACA;IACE,kBAAkB;IAClB,YAAY;IACZ,mBAAmB;IACnB,gBAAgB;IAChB,gBAAgB;IAChB,WAAW;IACX,yBAAyB;IACzB,YAAY;IACZ,cAAc;;EAEhB;AACF,0BAA0B;EACxB;IACE,gBAAgB;IAChB,cAAc;EAChB;;;;EAIA;IACE,aAAa;IACb,kCAAkC;EACpC;EACA;IACE,kBAAkB;IAClB,kBAAkB;IAClB,YAAY;IACZ,cAAc;IACd,yBAAyB;IACzB,4DAA6C;IAC7C,oDAAqC;IACrC,8BAA8B;IAC9B,sBAAsB;IACtB,UAAU;IACV,WAAW;IACX,eAAe;;EAEjB;EACA;IACE,uBAAuB;IACvB,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,UAAU;IACV,WAAW;IACX,sBAAsB;IACtB,yBAAyB;IACzB,4DAAiD;IACjD,oDAAyC;IACzC,8BAA8B;IAC9B,sBAAsB;IACtB,eAAe;EACjB;EACA;IACE,sBAAsB;IACtB,yBAAyB;IACzB,4DAA2C;IAC3C,oDAAmC;IACnC,8BAA8B;IAC9B,sBAAsB;;;EAGxB;EACA;IACE,aAAa;EACf;EACA;IACE,eAAe;IACf,UAAU;EACZ;EACA;IACE,yBAAyB;IACzB,6BAA6B;;EAE/B;EACA;IACE,yBAAyB;IACzB,0BAA0B;;;EAG5B;;EAEA,qBAAqB;EACrB;IACE,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,mBAAmB;IACnB,YAAY;IACZ,UAAU;IACV,WAAW;IACX,WAAW;;;EAGb;EACA;IACE,WAAW;EACb;EACA;IACE,cAAc;IACd,kBAAkB;IAClB,SAAS;IACT,SAAS;IACT,WAAW;IACX,eAAe;IACf,YAAY;EACd;;EAEA;IACE,iBAAiB;IACjB,aAAa;IACb,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,eAAe;;EAEjB;EACA;IACE,mBAAmB;;EAErB;EACA;IACE,UAAU;EACZ;EACA;IACE,uBAAuB;IACvB,YAAY;IACZ,UAAU;IACV,WAAW;IACX,cAAc;IACd,sBAAsB;IACtB,mCAAmC;IACnC,4DAA6C;IAC7C,oDAAqC;IACrC,8BAA8B;IAC9B,sBAAsB;IACtB,eAAe;EACjB;;;;AAIF;AACA;;EAEE;IACE,aAAa;IACb,WAAW;EACb;EACA;IACE,UAAU;IACV,SAAS;EACX;EACA;IACE,UAAU;IACV,WAAW;EACb;AACF;AACA;;AAEA",sourcesContent:['@media screen and (min-width: 0px) {\n  .title{\n    margin-bottom: 1.5vh;\n    border-bottom: 1px solid white;\n  }\n  .todo-panel{\n    position: relative;\n    padding: 1em;\n    border-radius: 10px;\n    min-height: 45vh;\n    max-height: 60vh;\n    width: 35vh;\n    background-color: #258d81;\n    color: white;\n    overflow: auto;\n    \n  }\n/* Make tasks scrollable */\n  .tasks{\n    max-height: 40vh;\n    overflow: auto;\n  }\n\n  \n  \n  .task{\n    padding: .8vh;\n    grid-template-columns: 2vh 1fr 2vh;\n  }\n  .TaskItemCheckbox{\n    place-self: center;\n    border-radius: 50%;\n    border: none;\n    color: #e9c46a;\n    background-color: #e9c46a;\n    -webkit-mask-image: url(../imgs/uncheck.svg) ;\n    mask-image: url(../imgs/uncheck.svg) ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    width: 2vh;\n    height: 2vh;\n    cursor: pointer;\n    \n  }\n  .TaskItemDelete{\n    background: transparent;\n    border: none;\n    text-align: center;\n    place-self: center;\n    width: 2vh;\n    height: 2vh;\n    /* Change Icon color */\n    background-color: #800020;\n    -webkit-mask-image: url(../imgs/minusDelete.svg) ;\n    mask-image: url(../imgs/minusDelete.svg) ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    cursor: pointer;\n  }\n  .task[aria-disabled="true"] .TaskItemCheckbox {\n    /* Change Icon color */\n    background-color: #a0a0a0;\n    -webkit-mask-image: url(../imgs/check.svg) ;\n    mask-image: url(../imgs/check.svg) ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;  \n      \n\n  }\n  .task[aria-disabled="true"] .task-category {\n    display: none;\n  }\n  .task-title{\n    cursor: pointer;\n    z-index: 2;\n  }\n  .task[aria-disabled="true"]{\n    color: rgb(104, 104, 104);\n    text-decoration: line-through;\n    \n  }\n  .task-category{\n    color: rgb(104, 104, 104);\n    text-transform: capitalize;\n    \n\n  }\n  \n  /* INPUT TASK FIELD */\n  .add-task-container{\n    position: sticky;\n    display: flex;\n    gap: .5vh;\n    border-radius: 10px;\n    align-items: center;\n    bottom: .1vh;\n    left: .5vh;\n    width: 30vh;\n    height: 5vh;\n\n    \n  }\n  #add-task-text{\n    width: 25vh;\n  }\n  .add-task-container > label{\n    display: block;\n    position: absolute;\n    top: .8em;\n    left: 2vh;\n    opacity: .4;\n    font-size: 12px;\n    color: black;\n  }\n  \n  .add-task-container > input{\n    padding-left: 1em;\n    outline: none;\n    border: none;\n    display:block;\n    line-height: 1.5em;\n    font-size: 14pt;\n    \n  }\n  #add-task-text {\n    border-radius: 10px;\n    \n  }\n  #add-task-text:focus + .add-task-label {\n    opacity: 0;\n  }\n  .add-task-btn{\n    background: transparent;\n    border: none;\n    width: 5vh;\n    height: 5vh;\n    color: #e9c46a;\n    /* Change Icon color */\n    background-color: rgb(216, 183, 99);\n    -webkit-mask-image: url(../imgs/arrowUp.svg) ;\n    mask-image: url(../imgs/arrowUp.svg) ;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    cursor: pointer;\n  }\n\n\n\n}\n@media screen and (min-width: 500px) {\n\n  .add-task-container{\n    bottom: .05em;\n    left: 2.8vh;\n  }\n  .add-task-container > label{\n    top: 1.6vh;\n    left: 2vh;\n  }\n  .add-task-btn{\n    width: 3vh;\n    height: 3vh;\n  }\n}\n@media screen and (min-width: 800px) {\n\n}'],sourceRoot:""}]);const b=m},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,r,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(a)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);a&&i[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(r," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},695:(n,e,t)=>{function a(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function r(n){return a(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function o(n){a(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function i(n){if(a(1,arguments),!r(n)&&"number"!=typeof n)return!1;var e=o(n);return!isNaN(Number(e))}function s(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function d(n,e){a(2,arguments);var t=o(n).getTime(),r=s(e);return new Date(t+r)}function l(n,e){a(2,arguments);var t=s(e);return d(n,-t)}t.d(e,{Z:()=>on});var A=864e5;function c(n){a(1,arguments);var e=1,t=o(n),r=t.getUTCDay(),i=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-i),t.setUTCHours(0,0,0,0),t}function u(n){a(1,arguments);var e=o(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var i=c(r),s=new Date(0);s.setUTCFullYear(t,0,4),s.setUTCHours(0,0,0,0);var d=c(s);return e.getTime()>=i.getTime()?t+1:e.getTime()>=d.getTime()?t:t-1}function m(n){a(1,arguments);var e=u(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=c(t);return r}var g=6048e5,p={};function h(){return p}function C(n,e){var t,r,i,d,l,A,c,u;a(1,arguments);var m=h(),g=s(null!==(t=null!==(r=null!==(i=null!==(d=null==e?void 0:e.weekStartsOn)&&void 0!==d?d:null==e||null===(l=e.locale)||void 0===l||null===(A=l.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==i?i:m.weekStartsOn)&&void 0!==r?r:null===(c=m.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==t?t:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=o(n),C=p.getUTCDay(),b=(C<g?7:0)+C-g;return p.setUTCDate(p.getUTCDate()-b),p.setUTCHours(0,0,0,0),p}function b(n,e){var t,r,i,d,l,A,c,u;a(1,arguments);var m=o(n),g=m.getUTCFullYear(),p=h(),b=s(null!==(t=null!==(r=null!==(i=null!==(d=null==e?void 0:e.firstWeekContainsDate)&&void 0!==d?d:null==e||null===(l=e.locale)||void 0===l||null===(A=l.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==i?i:p.firstWeekContainsDate)&&void 0!==r?r:null===(c=p.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==t?t:1);if(!(b>=1&&b<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(g+1,0,b),f.setUTCHours(0,0,0,0);var v=C(f,e),B=new Date(0);B.setUTCFullYear(g,0,b),B.setUTCHours(0,0,0,0);var k=C(B,e);return m.getTime()>=v.getTime()?g+1:m.getTime()>=k.getTime()?g:g-1}function f(n,e){var t,r,o,i,d,l,A,c;a(1,arguments);var u=h(),m=s(null!==(t=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(d=e.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(A=u.locale)||void 0===A||null===(c=A.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),g=b(n,e),p=new Date(0);p.setUTCFullYear(g,0,m),p.setUTCHours(0,0,0,0);var f=C(p,e);return f}var v=6048e5;function B(n,e){for(var t=n<0?"-":"",a=Math.abs(n).toString();a.length<e;)a="0"+a;return t+a}const k=function(n,e){var t=n.getUTCFullYear(),a=t>0?t:1-t;return B("yy"===e?a%100:a,e.length)},w=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):B(t+1,2)},E=function(n,e){return B(n.getUTCDate(),e.length)},y=function(n,e){return B(n.getUTCHours()%12||12,e.length)},I=function(n,e){return B(n.getUTCHours(),e.length)},x=function(n,e){return B(n.getUTCMinutes(),e.length)},T=function(n,e){return B(n.getUTCSeconds(),e.length)},S=function(n,e){var t=e.length,a=n.getUTCMilliseconds();return B(Math.floor(a*Math.pow(10,t-3)),e.length)};function D(n,e){var t=n>0?"-":"+",a=Math.abs(n),r=Math.floor(a/60),o=a%60;if(0===o)return t+String(r);var i=e||"";return t+String(r)+i+B(o,2)}function U(n,e){return n%60==0?(n>0?"-":"+")+B(Math.abs(n)/60,2):M(n,e)}function M(n,e){var t=e||"",a=n>0?"-":"+",r=Math.abs(n);return a+B(Math.floor(r/60),2)+t+B(r%60,2)}const L={G:function(n,e,t){var a=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(a,{width:"abbreviated"});case"GGGGG":return t.era(a,{width:"narrow"});default:return t.era(a,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var a=n.getUTCFullYear(),r=a>0?a:1-a;return t.ordinalNumber(r,{unit:"year"})}return k(n,e)},Y:function(n,e,t,a){var r=b(n,a),o=r>0?r:1-r;return"YY"===e?B(o%100,2):"Yo"===e?t.ordinalNumber(o,{unit:"year"}):B(o,e.length)},R:function(n,e){return B(u(n),e.length)},u:function(n,e){return B(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return B(a,2);case"Qo":return t.ordinalNumber(a,{unit:"quarter"});case"QQQ":return t.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(a,{width:"narrow",context:"formatting"});default:return t.quarter(a,{width:"wide",context:"formatting"})}},q:function(n,e,t){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return B(a,2);case"qo":return t.ordinalNumber(a,{unit:"quarter"});case"qqq":return t.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(a,{width:"narrow",context:"standalone"});default:return t.quarter(a,{width:"wide",context:"standalone"})}},M:function(n,e,t){var a=n.getUTCMonth();switch(e){case"M":case"MM":return w(n,e);case"Mo":return t.ordinalNumber(a+1,{unit:"month"});case"MMM":return t.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(a,{width:"narrow",context:"formatting"});default:return t.month(a,{width:"wide",context:"formatting"})}},L:function(n,e,t){var a=n.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return B(a+1,2);case"Lo":return t.ordinalNumber(a+1,{unit:"month"});case"LLL":return t.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(a,{width:"narrow",context:"standalone"});default:return t.month(a,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var i=function(n,e){a(1,arguments);var t=o(n),r=C(t,e).getTime()-f(t,e).getTime();return Math.round(r/v)+1}(n,r);return"wo"===e?t.ordinalNumber(i,{unit:"week"}):B(i,e.length)},I:function(n,e,t){var r=function(n){a(1,arguments);var e=o(n),t=c(e).getTime()-m(e).getTime();return Math.round(t/g)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):B(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):E(n,e)},D:function(n,e,t){var r=function(n){a(1,arguments);var e=o(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),i=t-r;return Math.floor(i/A)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):B(r,e.length)},E:function(n,e,t){var a=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},e:function(n,e,t,a){var r=n.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return B(o,2);case"eo":return t.ordinalNumber(o,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,a){var r=n.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return B(o,e.length);case"co":return t.ordinalNumber(o,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){var a=n.getUTCDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return B(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},a:function(n,e,t){var a=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(n,e,t){var a,r=n.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(n,e,t){var a,r=n.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var a=n.getUTCHours()%12;return 0===a&&(a=12),t.ordinalNumber(a,{unit:"hour"})}return y(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):I(n,e)},K:function(n,e,t){var a=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(a,{unit:"hour"}):B(a,e.length)},k:function(n,e,t){var a=n.getUTCHours();return 0===a&&(a=24),"ko"===e?t.ordinalNumber(a,{unit:"hour"}):B(a,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):x(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):T(n,e)},S:function(n,e){return S(n,e)},X:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return U(r);case"XXXX":case"XX":return M(r);default:return M(r,":")}},x:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();switch(e){case"x":return U(r);case"xxxx":case"xx":return M(r);default:return M(r,":")}},O:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+D(r,":");default:return"GMT"+M(r,":")}},z:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+D(r,":");default:return"GMT"+M(r,":")}},t:function(n,e,t,a){var r=a._originalDate||n;return B(Math.floor(r.getTime()/1e3),e.length)},T:function(n,e,t,a){return B((a._originalDate||n).getTime(),e.length)}};var P=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Y=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},j={p:Y,P:function(n,e){var t,a=n.match(/(P+)(p+)?/)||[],r=a[1],o=a[2];if(!o)return P(n,e);switch(r){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",P(r,e)).replace("{{time}}",Y(o,e))}};const W=j;function q(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var z=["D","DD"],Z=["YY","YYYY"];function N(n){return-1!==z.indexOf(n)}function O(n){return-1!==Z.indexOf(n)}function F(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var R={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function H(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,a=n.formats[t]||n.formats[n.defaultWidth];return a}}var X,G={date:H({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:H({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:H({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Q={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function $(n){return function(e,t){var a;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,o=null!=t&&t.width?String(t.width):r;a=n.formattingValues[o]||n.formattingValues[r]}else{var i=n.defaultWidth,s=null!=t&&t.width?String(t.width):n.defaultWidth;a=n.values[s]||n.values[i]}return a[n.argumentCallback?n.argumentCallback(e):e]}}function J(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.width,r=a&&n.matchPatterns[a]||n.matchPatterns[n.defaultMatchWidth],o=e.match(r);if(!o)return null;var i,s=o[0],d=a&&n.parsePatterns[a]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(d)?_(d,(function(n){return n.test(s)})):V(d,(function(n){return n.test(s)}));i=n.valueCallback?n.valueCallback(l):l,i=t.valueCallback?t.valueCallback(i):i;var A=e.slice(s.length);return{value:i,rest:A}}}function V(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function _(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}const K={code:"en-US",formatDistance:function(n,e,t){var a,r=R[n];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+a:a+" ago":a},formatLong:G,formatRelative:function(n,e,t,a){return Q[n]},localize:{ordinalNumber:function(n,e){var t=Number(n),a=t%100;if(a>20||a<10)switch(a%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:$({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:$({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:$({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:$({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:$({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(X={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(X.matchPattern);if(!t)return null;var a=t[0],r=n.match(X.parsePattern);if(!r)return null;var o=X.valueCallback?X.valueCallback(r[0]):r[0];o=e.valueCallback?e.valueCallback(o):o;var i=n.slice(a.length);return{value:o,rest:i}}),era:J({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:J({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:J({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:J({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:J({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var nn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,en=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,tn=/^'([^]*?)'?$/,an=/''/g,rn=/[a-zA-Z]/;function on(n,e,t){var r,d,A,c,u,m,g,p,C,b,f,v,B,k,w,E,y,I;a(2,arguments);var x=String(e),T=h(),S=null!==(r=null!==(d=null==t?void 0:t.locale)&&void 0!==d?d:T.locale)&&void 0!==r?r:K,D=s(null!==(A=null!==(c=null!==(u=null!==(m=null==t?void 0:t.firstWeekContainsDate)&&void 0!==m?m:null==t||null===(g=t.locale)||void 0===g||null===(p=g.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==u?u:T.firstWeekContainsDate)&&void 0!==c?c:null===(C=T.locale)||void 0===C||null===(b=C.options)||void 0===b?void 0:b.firstWeekContainsDate)&&void 0!==A?A:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var U=s(null!==(f=null!==(v=null!==(B=null!==(k=null==t?void 0:t.weekStartsOn)&&void 0!==k?k:null==t||null===(w=t.locale)||void 0===w||null===(E=w.options)||void 0===E?void 0:E.weekStartsOn)&&void 0!==B?B:T.weekStartsOn)&&void 0!==v?v:null===(y=T.locale)||void 0===y||null===(I=y.options)||void 0===I?void 0:I.weekStartsOn)&&void 0!==f?f:0);if(!(U>=0&&U<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var M=o(n);if(!i(M))throw new RangeError("Invalid time value");var P=q(M),Y=l(M,P),j={firstWeekContainsDate:D,weekStartsOn:U,locale:S,_originalDate:M},z=x.match(en).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,W[e])(n,S.formatLong):n})).join("").match(nn).map((function(a){if("''"===a)return"'";var r=a[0];if("'"===r)return sn(a);var o=L[r];if(o)return null!=t&&t.useAdditionalWeekYearTokens||!O(a)||F(a,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!N(a)||F(a,e,String(n)),o(Y,a,S.localize,j);if(r.match(rn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return a})).join("");return z}function sn(n){var e=n.match(tn);return e?e[1].replace(an,"'"):n}},134:(n,e,t)=>{var a=t(379),r=t.n(a),o=t(795),i=t.n(o),s=t(569),d=t.n(s),l=t(565),A=t.n(l),c=t(216),u=t.n(c),m=t(589),g=t.n(m),p=t(385),h={};h.styleTagTransform=g(),h.setAttributes=A(),h.insert=d().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=u(),r()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals},379:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var o={},i=[],s=0;s<n.length;s++){var d=n[s],l=a.base?d[0]+a.base:d[0],A=o[l]||0,c="".concat(l," ").concat(A);o[l]=A+1;var u=t(c),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var g=r(m,a);a.byIndex=s,e.splice(s,0,{identifier:c,updater:g,references:1})}i.push(c)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var o=a(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var d=a(n,r),l=0;l<o.length;l++){var A=t(o[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}o=d}}},569:n=>{var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,r&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},182:(n,e,t)=>{t.d(e,{h:()=>a});class a{static getTasks=()=>{let n;return n=null===localStorage.getItem("tasks")?[]:JSON.parse(localStorage.getItem("tasks")),n};static getSingleTask=n=>{let e;return this.getTasks().forEach((t=>{t.title==n&&(e=t)})),e};static saveTask(n){localStorage.setItem("tasks",JSON.stringify(n))}static addTaskToLS(n){let e=a.getTasks();e.push(n),this.saveTask(e)}static addDate(n,e){let t=this.getTasks(),a=t.findIndex((e=>e.title==n));t[a].dueDate=e,this.saveTask(t)}static LSremoveTask(n){if(n.target.classList.contains("TaskItemDelete")){let e=n.target.previousElementSibling.firstElementChild.innerHTML,t=a.getTasks();t.forEach(((n,a)=>{n.title==e&&t.splice(a,1),this.saveTask(t)}))}}static changeDoneState(n){if(n.target.classList.contains("TaskItemCheckbox")){let e=n.target.nextElementSibling.firstElementChild.innerHTML,t=a.getTasks(),r=t.findIndex((n=>n.title==e));t[r].done?(t[r].done=!1,console.log("chang",t[r].done)):t[r].done=!0,this.saveTask(t)}}static storeCategory(n){let e=a.getCategories();e.push(n),localStorage.setItem("categories",JSON.stringify(e))}static getCategories(){let n;return n=null===localStorage.getItem("categories")?[]:JSON.parse(localStorage.getItem("categories")),n}static deleteTasksFromCategory(n,e){n=n.filter((n=>n.tag!==e)),this.saveTask(n)}static LSdeleteCategory(n){let e=n.target.previousElementSibling.innerHTML,t=a.getCategories(),r=a.getTasks();t.map(((n,o)=>{n==e&&t.splice(o,1),localStorage.setItem("categories",JSON.stringify(t)),a.deleteTasksFromCategory(r,e)}))}static SaveNotes(n,e){let t=this.getTasks(),a=t.findIndex((e=>e.title==n));console.log("index",a),t[a].notes=e,this.saveTask(t)}}},133:(n,e,t)=>{t.d(e,{i:()=>r});var a=t(182);class r{constructor(n,e,t){this.title=n,this.category=e,this.done=!1,this.dueDate=null,this.dateCreated=t,this.notes="add notes here"}static addTaskPanel(n){const e=document.querySelector(".tasks");let t=document.createElement("div");t.classList.add("task","grid"),n.done?t.setAttribute("aria-disabled",!0):t.setAttribute("aria-disabled",!1),t.innerHTML=`\n    <button type="radio" role="checkbox" aria-checked="false" class="TaskItemCheckbox"></button>\n    <div class="task-content">\n      <p class="task-title">${n.title}</p>\n      <p class="task-category">${n.category}</p>\n    </div>\n    <button class="TaskItemDelete"></button>\n    `,e.appendChild(t)}static takeInputEvent(n){const e=n=>{const e=document.querySelector("#add-task-text").value;if(e.length>0){const t=new Date;let o=new r(e,n,t);r.addTaskPanel(o),a.h.addTaskToLS(o)}else alert("Please enter at least one character");r.clearInputField("#add-task-text")},t=document.querySelector(".add-task-container"),o=document.querySelector(".add-task-btn");t.addEventListener("keypress",(t=>{"Enter"===t.key&&e(n)})),o.addEventListener("mouseup",(()=>{e(n)})),o.addEventListener("touchend",(()=>{e(n)}))}static clearInputField(n){document.querySelector(n).value=""}static taskDone(n){if(n.target.classList.contains("TaskItemCheckbox")){const e=n.target.parentElement;let t=n.target.nextElementSibling.firstElementChild.innerHTML;const r=a.h.getTasks();let o=r.findIndex((n=>n.title==t));r[o].done?e.setAttribute("aria-disabled",!1):e.setAttribute("aria-disabled",!0)}}static deleteTask(n){n.target.classList.contains("TaskItemDelete")&&n.target.parentElement.remove()}static displayTasks=()=>{a.h.getTasks().forEach((n=>{r.addTaskPanel(n)}))};static displayTasksCategorically=n=>{a.h.getTasks().map((e=>{e.category==n&&r.addTaskPanel(e)}))}}},485:(n,e,t)=>{t.d(e,{Z:()=>a}),t(134);const a=n=>{const e=document.createElement("div");return e.classList.add("todo-panel"),e.innerHTML=`\n    <div class="title">\n      <h1>${n}</h1>\n    </div>\n    <div class="tasks">\n      \x3c!-- task 1 --\x3e\n      \n\n    </div>\n    <div class="add-task-container">\n      <input type="text" id="add-task-text" name="add-task-text">\n      <label class="add-task-label" for="add-task-text">Add new task</label>\n      <button class="add-task-btn btn"></button>\n    </div>\n  `,e}},831:(n,e,t)=>{t.d(e,{L:()=>f});var a=t(379),r=t.n(a),o=t(795),i=t.n(o),s=t(569),d=t.n(s),l=t(565),A=t.n(l),c=t(216),u=t.n(c),m=t(589),g=t.n(m),p=t(309),h={};h.styleTagTransform=g(),h.setAttributes=A(),h.insert=d().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=u(),r()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;var C=t(485),b=t(426);class f{static header(){const n=document.createElement("header");return n.classList.add("primary-header"),n.innerHTML='\n    <button aria-expanded="false" class="mobile-toggle" aria-controls="categories-navigation"></button>\n    <div class="side-panel"> \n    <ul id="categories-navigation" class="categories-navigation flex" data-visible="false">\n        <div class="categories-title">\n          <h2>Categories</h2>\n          <span class="add-categories" id="add-categories"></span>\n        </div>    \n        <li class="category">\n          <div>\n            <p class="category--title">All Tasks</p>\n            \n          </div> \n        </li>\n        <li class="category">\n          <div>\n            <p class="category--title">Work</p>\n            \n          </div> \n        </li>\n      </ul>\n    </div>\n    ',n}static hero(){const n=document.createElement("div");return n.classList.add("container","container-hero"),n.appendChild((0,C.Z)("All Tasks")),b.Z.displayCategories(),n}static clearHero(){document.querySelector(".todo-panel").textContent=""}static clearDescPanel(){document.querySelector(".taskDescPanel").remove()}static blurElements(){document.querySelector("main").classList.add("blur-document")}static deBlurElements(){document.querySelector("main").classList.remove("blur-document")}}},426:(n,e,t)=>{t.d(e,{Z:()=>i});var a=t(182),r=t(133),o=t(831);t(134);class i{static toggle(){const n=document.querySelector(".mobile-toggle"),e=document.querySelector(".categories-navigation");n.addEventListener("click",(()=>{"false"===e.getAttribute("data-visible")?(e.setAttribute("data-visible",!0),n.setAttribute("aria-expanded",!0)):(e.setAttribute("data-visible",!1),n.setAttribute("aria-expanded",!1))}))}static CategoryPopUpPanel(){const n=document.createElement("div");return n.classList.add("add-project-popUp"),n.setAttribute("project-pop-visible",!1),n.innerHTML='\n    <label for="add-project-text">Project name</label>\n    <input type="text" id="add-project-text" name="add-project-text">\n    <div class="btns-popUp">\n      <button class="cancel-project-btn">Cancel</button>\n      <button class="add-project-btn">Add</button>\n    </div>\n    ',n}static showAddCategoryPanel(n){const e=document.querySelector(".add-project-popUp");"add-categories"==n.target.id&&(o.L.blurElements(),e.setAttribute("project-pop-visible",!0),i.cancelPopUpBtn())}static cancelPopUpBtn(){const n=document.querySelector(".add-project-popUp");document.querySelector(".cancel-project-btn").addEventListener("click",(()=>{n.setAttribute("project-pop-visible",!1),o.L.deBlurElements()}))}static addNewCategoryBtn(){const n=document.querySelector(".add-project-popUp"),e=()=>{let e=document.querySelector("#add-project-text").value;e=e.toLowerCase(),e.length<1?alert("Please enter at least one character"):(i.addCategory(e),a.h.storeCategory(e),o.L.deBlurElements()),r.i.clearInputField("#add-project-text"),n.setAttribute("project-pop-visible",!1)},t=document.querySelector(".add-project-btn");n.addEventListener("keypress",(n=>{"Enter"===n.key&&e()})),t.addEventListener("mouseup",(()=>{e()})),t.addEventListener("touchend",(()=>{e()}))}static addCategory(n){const e=document.createElement("li"),t=document.querySelector("#categories-navigation"),a=`<p class="category--title">${n}</p>`;e.classList.add("category"),e.innerHTML=`\n    <div>\n      ${a}\n      <button class="delete-category"></button>\n    </div>`,t.appendChild(e)}static displayCategories(){a.h.getCategories().map((n=>{i.addCategory(n)}))}static categoryPressed(n){n.target.classList.contains("category--title")&&i.newToDoPanel(n.target.innerHTML)}static newToDoPanel(n){const e=document.querySelector(".todo-panel"),t=document.querySelector(".categories-navigation"),a=document.querySelector(".mobile-toggle");o.L.clearHero(),t.setAttribute("data-visible",!1),a.setAttribute("aria-expanded",!1),e.innerHTML=`\n    <div class="title">\n    <h1>${n}</h1>\n    </div>\n    <div class="tasks">\n    \x3c!-- task 1 --\x3e\n\n      </div>\n    <div class="add-task-container">\n      <input type="text" id="add-task-text" name="add-task-text">\n      <label class="add-task-label" for="add-task-text">Add new task</label>\n      <button class="add-task-btn btn">Add</button>\n    </div>\n    `,"All Tasks"==n?(r.i.displayTasks(),r.i.takeInputEvent("general")):r.i.displayTasksCategorically(n),r.i.takeInputEvent(n)}static deleteCategory(n){n.target.classList.contains("delete-category")&&(n.target.parentElement.parentElement.remove(),a.h.LSdeleteCategory(n))}}},719:(n,e,t)=>{t.d(e,{Z:()=>v});var a=t(182),r=t(379),o=t.n(r),i=t(795),s=t.n(i),d=t(569),l=t.n(d),A=t(565),c=t.n(A),u=t(216),m=t.n(u),g=t(589),p=t.n(g),h=t(207),C={};C.styleTagTransform=p(),C.setAttributes=c(),C.insert=l().bind(null,"head"),C.domAPI=s(),C.insertStyleElement=m(),o()(h.Z,C),h.Z&&h.Z.locals&&h.Z.locals;var b=t(695),f=t(831);class v{static panel(n){const e=document.createElement("div");e.classList.add("taskDescPanel");const t=null===n.dueDate?"No Due date added":this.onScreenDateFormat(n.dueDate);return e.innerHTML=`\n    <div class="title title--task">\n      <h1>${n.title}</h1>\n      <button class="hide-desc-panel"></button>\n    </div>\n    <div class="set-date">\n      <label class="add-date-label" for="due-Date">Add due date</label>\n      <input type="date" id="due-Date" name="due-Date">\n      <button class="due-Date-btn"></button>\n    </div>\n    <div class="notes-panel">\n      <p class="task-notes" contenteditable="true">${n.notes}</p>\n      <button class="add-task-note">Add</button>\n    </div>\n    <div>\n      <p class="deadline">Deadline: ${t}</span></p>\n      <p>Date Created: ${this.onScreenDateFormat(n.dateCreated)}</p>\n    </div>\n    `,document.querySelector(".container-hero").appendChild(e),e}static showPanel(n){if(n.target.parentElement.classList.contains("task-content")){const e=document.body,t=n.target.parentElement.firstElementChild.textContent;console.log(t);const r=a.h.getSingleTask(t);e.appendChild(this.panel(r)),f.L.blurElements()}}static removePanel(n){n.target.classList.contains("hide-desc-panel")&&(f.L.clearDescPanel(),f.L.deBlurElements())}static onScreenDateFormat(n){let e=new Date(n).toJSON().slice(0,10);return(0,b.Z)(new Date(e.replace(/-/g,"/")),"MM/dd/yyyy")}static getDate(n){if(n.target.classList.contains("due-Date-btn")){let e=document.querySelector("#due-Date").value;console.log(e),e=new Date(e);const t=n.target.parentElement.previousElementSibling.firstElementChild.textContent;a.h.addDate(t,e),this.updateDate(t)}}static updateDate(n){const e=document.querySelector(".deadline"),t=a.h.getSingleTask(n);e.innerHTML=`Deadline: ${this.onScreenDateFormat(t.dueDate)}`}static updateNotes(n){if(n.target.classList.contains("add-task-note")){const e=document.querySelector(".task-notes").textContent,t=n.target.parentElement.parentElement.firstElementChild.firstElementChild.textContent;console.log(t),console.log(e),a.h.SaveNotes(t,e),alert("notes saved")}}}},743:(n,e,t)=>{n.exports=t.p+"dd513233d599b3cefb96.svg"},567:(n,e,t)=>{n.exports=t.p+"74656ae82718666f40be.jpg"},179:(n,e,t)=>{n.exports=t.p+"34132d14dfa6bc3dfab4.svg"},155:(n,e,t)=>{n.exports=t.p+"2a6dcf09223357a4829d.svg"},96:(n,e,t)=>{n.exports=t.p+"af11555927ec5fef641b.svg"},935:(n,e,t)=>{n.exports=t.p+"6ed2cb5264b2240800b4.svg"},251:(n,e,t)=>{n.exports=t.p+"fd4f814d80e2e23ecb48.svg"},649:(n,e,t)=>{n.exports=t.p+"11a0880f45bca649f6a4.svg"},921:(n,e,t)=>{n.exports=t.p+"ca6dab938465408e4613.svg"},115:(n,e,t)=>{n.exports=t.p+"b9d42bb4d9163d6e719c.svg"}},e={};function t(a){var r=e[a];if(void 0!==r)return r.exports;var o=e[a]={id:a,exports:{}};return n[a](o,o.exports,t),o.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var a=e.getElementsByTagName("script");a.length&&(n=a[a.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(133),e=t(379),a=t.n(e),r=t(795),o=t.n(r),i=t(569),s=t.n(i),d=t(565),l=t.n(d),A=t(216),c=t.n(A),u=t(589),m=t.n(u),g=t(772),p={};p.styleTagTransform=m(),p.setAttributes=l(),p.insert=s().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=c(),a()(g.Z,p),g.Z&&g.Z.locals&&g.Z.locals;var h=t(182),C=t(831),b=t(426),f=t(719),v=t(916),B={};B.styleTagTransform=m(),B.setAttributes=l(),B.insert=s().bind(null,"head"),B.domAPI=o(),B.insertStyleElement=c(),a()(v.Z,B),v.Z&&v.Z.locals&&v.Z.locals;const k=document.body,w=document.createElement("main");k.appendChild(C.L.header()),k.appendChild(b.Z.CategoryPopUpPanel()),b.Z.toggle(),k.appendChild(w),w.appendChild(C.L.hero()),k.appendChild((()=>{const n=document.createElement("footer");return n.classList.add("footer"),n.innerHTML='\n  <div class="container container--footer">\n  <div class="socials">\n    <p>Follow Us</p>\n    <div class="social-icons" >\n      <a class="instagram" target="_blank" href="https://www.instagram.com/"></a>\n      </a>\n      <a class="twitter" target="_blank" href="https://twitter.com/home">\n      </a>\n    </div>\n  </div>\n  <a class="contribute" target="_blank" href="https://github.com/Parzivalcen/TodoAppModular">\nContribute</a>\n  <div class="made">\n    <p>made by <a target="_blank" href="https://github.com/Parzivalcen">DavidCentz</a></p>\n  </div>\n  </div>',n})()),document.addEventListener("DOMContentLoaded",n.i.displayTasks()),document.addEventListener("click",(e=>{n.i.deleteTask(e),n.i.taskDone(e),h.h.LSremoveTask(e),h.h.changeDoneState(e),b.Z.categoryPressed(e),b.Z.showAddCategoryPanel(e),b.Z.deleteCategory(e),f.Z.showPanel(e),f.Z.getDate(e),f.Z.updateNotes(e),f.Z.removePanel(e)})),n.i.takeInputEvent("general"),b.Z.addNewCategoryBtn()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,